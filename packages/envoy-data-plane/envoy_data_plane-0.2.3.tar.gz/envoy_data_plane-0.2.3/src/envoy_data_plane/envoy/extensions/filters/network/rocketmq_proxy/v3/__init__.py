# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/rocketmq_proxy/v3/route.proto, envoy/extensions/filters/network/rocketmq_proxy/v3/rocketmq_proxy.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import List

import betterproto


@dataclass(eq=False, repr=False)
class RouteConfiguration(betterproto.Message):
    # The name of the route configuration.
    name: str = betterproto.string_field(1)
    # The list of routes that will be matched, in order, against incoming
    # requests. The first route that matches will be used.
    routes: List["Route"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    # Route matching parameters.
    match: "RouteMatch" = betterproto.message_field(1)
    # Route request to some upstream cluster.
    route: "RouteAction" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteMatch(betterproto.Message):
    # The name of the topic.
    topic: "_____type_matcher_v3__.StringMatcher" = betterproto.message_field(1)
    # Specifies a set of headers that the route should match on. The router will
    # check the requestâ€™s headers against all the specified headers in the route
    # config. A match will happen if all the headers in the route are present in
    # the request with the same values (or based on presence if the value field
    # is not in the config).
    headers: List["_____config_route_v3__.HeaderMatcher"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteAction(betterproto.Message):
    # Indicates the upstream cluster to which the request should be routed.
    cluster: str = betterproto.string_field(1)
    # Optional endpoint metadata match criteria used by the subset load balancer.
    metadata_match: "_____config_core_v3__.Metadata" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RocketmqProxy(betterproto.Message):
    # The name of the route configuration.
    stat_prefix: str = betterproto.string_field(1)
    # The list of routes that will be matched, in order, against incoming
    # requests. The first route that matches will be used.
    route_config: "RouteConfiguration" = betterproto.message_field(2)
    transient_object_life_span: timedelta = betterproto.message_field(3)
    develop_mode: bool = betterproto.bool_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


from ......config.core import v3 as _____config_core_v3__
from ......config.route import v3 as _____config_route_v3__
from ......type.matcher import v3 as _____type_matcher_v3__
