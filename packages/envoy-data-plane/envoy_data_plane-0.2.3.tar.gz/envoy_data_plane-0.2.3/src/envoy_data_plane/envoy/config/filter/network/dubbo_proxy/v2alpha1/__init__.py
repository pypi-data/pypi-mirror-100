# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/network/dubbo_proxy/v2alpha1/route.proto, envoy/config/filter/network/dubbo_proxy/v2alpha1/dubbo_proxy.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto


class ProtocolType(betterproto.Enum):
    Dubbo = 0


class SerializationType(betterproto.Enum):
    Hessian2 = 0


@dataclass(eq=False, repr=False)
class RouteConfiguration(betterproto.Message):
    """[#next-free-field: 6]"""

    # The name of the route configuration. Reserved for future use in
    # asynchronous route discovery.
    name: str = betterproto.string_field(1)
    # The interface name of the service.
    interface: str = betterproto.string_field(2)
    # Which group does the interface belong to.
    group: str = betterproto.string_field(3)
    # The version number of the interface.
    version: str = betterproto.string_field(4)
    # The list of routes that will be matched, in order, against incoming
    # requests. The first route that matches will be used.
    routes: List["Route"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    # Route matching parameters.
    match: "RouteMatch" = betterproto.message_field(1)
    # Route request to some upstream cluster.
    route: "RouteAction" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteMatch(betterproto.Message):
    # Method level routing matching.
    method: "MethodMatch" = betterproto.message_field(1)
    # Specifies a set of headers that the route should match on. The router will
    # check the requestâ€™s headers against all the specified headers in the route
    # config. A match will happen if all the headers in the route are present in
    # the request with the same values (or based on presence if the value field
    # is not in the config).
    headers: List["_____api_v2_route__.HeaderMatcher"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteAction(betterproto.Message):
    # Indicates the upstream cluster to which the request should be routed.
    cluster: str = betterproto.string_field(1, group="cluster_specifier")
    # Multiple upstream clusters can be specified for a given route. The request
    # is routed to one of the upstream clusters based on weights assigned to each
    # cluster. Currently ClusterWeight only supports the name and weight fields.
    weighted_clusters: "_____api_v2_route__.WeightedCluster" = (
        betterproto.message_field(2, group="cluster_specifier")
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MethodMatch(betterproto.Message):
    # The name of the method.
    name: "_____type_matcher__.StringMatcher" = betterproto.message_field(1)
    # Method parameter definition. The key is the parameter index, starting from
    # 0. The value is the parameter matching type.
    params_match: Dict[
        int, "MethodMatchParameterMatchSpecifier"
    ] = betterproto.map_field(2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MethodMatchParameterMatchSpecifier(betterproto.Message):
    """The parameter matching type."""

    # If specified, header match will be performed based on the value of the
    # header.
    exact_match: str = betterproto.string_field(3, group="parameter_match_specifier")
    # If specified, header match will be performed based on range. The rule will
    # match if the request header value is within this range. The entire request
    # header value must represent an integer in base 10 notation: consisting of
    # an optional plus or minus sign followed by a sequence of digits. The rule
    # will not match if the header value does not represent an integer. Match
    # will fail for empty values, floating point numbers or if only a subsequence
    # of the header value is an integer. Examples: * For range [-10,0), route
    # will match for header value -1, but not for 0,   "somestring", 10.9,
    # "-1somestring"
    range_match: "_____type__.Int64Range" = betterproto.message_field(
        4, group="parameter_match_specifier"
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DubboProxy(betterproto.Message):
    """[#next-free-field: 6]"""

    # The name of the route configuration. Reserved for future use in
    # asynchronous route discovery.
    stat_prefix: str = betterproto.string_field(1)
    # The interface name of the service.
    protocol_type: "ProtocolType" = betterproto.enum_field(2)
    # Which group does the interface belong to.
    serialization_type: "SerializationType" = betterproto.enum_field(3)
    # The version number of the interface.
    route_config: List["RouteConfiguration"] = betterproto.message_field(4)
    # The list of routes that will be matched, in order, against incoming
    # requests. The first route that matches will be used.
    dubbo_filters: List["DubboFilter"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DubboFilter(betterproto.Message):
    # Route matching parameters.
    name: str = betterproto.string_field(1)
    # Route request to some upstream cluster.
    config: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


from ...... import type as _____type__
from ......api.v2 import route as _____api_v2_route__
from ......type import matcher as _____type_matcher__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
