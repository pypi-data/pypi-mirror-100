# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/type/matcher/v3/number.proto, envoy/type/matcher/v3/regex.proto, envoy/type/matcher/v3/string.proto, envoy/type/matcher/v3/value.proto, envoy/type/matcher/v3/struct.proto, envoy/type/matcher/v3/node.proto, envoy/type/matcher/v3/path.proto, envoy/type/matcher/v3/metadata.proto
# plugin: python-betterproto
import warnings
from dataclasses import dataclass
from typing import List, Optional

import betterproto


@dataclass(eq=False, repr=False)
class DoubleMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    range: "__v3__.DoubleRange" = betterproto.message_field(1, group="match_pattern")
    # If specified, the input double value must be equal to the value specified
    # here.
    exact: float = betterproto.double_field(2, group="match_pattern")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegexMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    google_re2: "RegexMatcherGoogleRe2" = betterproto.message_field(
        1, group="engine_type"
    )
    # If specified, the input double value must be equal to the value specified
    # here.
    regex: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegexMatcherGoogleRe2(betterproto.Message):
    max_program_size: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_UINT32
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.max_program_size:
            warnings.warn(
                "RegexMatcherGoogleRe2.max_program_size is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RegexMatchAndSubstitute(betterproto.Message):
    pattern: "RegexMatcher" = betterproto.message_field(1)
    substitution: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class StringMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    exact: str = betterproto.string_field(1, group="match_pattern")
    # If specified, the input double value must be equal to the value specified
    # here.
    prefix: str = betterproto.string_field(2, group="match_pattern")
    suffix: str = betterproto.string_field(3, group="match_pattern")
    safe_regex: "RegexMatcher" = betterproto.message_field(5, group="match_pattern")
    contains: str = betterproto.string_field(7, group="match_pattern")
    ignore_case: bool = betterproto.bool_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListStringMatcher(betterproto.Message):
    patterns: List["StringMatcher"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValueMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    null_match: "ValueMatcherNullMatch" = betterproto.message_field(
        1, group="match_pattern"
    )
    # If specified, the input double value must be equal to the value specified
    # here.
    double_match: "DoubleMatcher" = betterproto.message_field(2, group="match_pattern")
    string_match: "StringMatcher" = betterproto.message_field(3, group="match_pattern")
    bool_match: bool = betterproto.bool_field(4, group="match_pattern")
    present_match: bool = betterproto.bool_field(5, group="match_pattern")
    list_match: "ListMatcher" = betterproto.message_field(6, group="match_pattern")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValueMatcherNullMatch(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMatcher(betterproto.Message):
    one_of: "ValueMatcher" = betterproto.message_field(1, group="match_pattern")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class StructMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    path: List["StructMatcherPathSegment"] = betterproto.message_field(2)
    # If specified, the input double value must be equal to the value specified
    # here.
    value: "ValueMatcher" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class StructMatcherPathSegment(betterproto.Message):
    key: str = betterproto.string_field(1, group="segment")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NodeMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    node_id: "StringMatcher" = betterproto.message_field(1)
    # If specified, the input double value must be equal to the value specified
    # here.
    node_metadatas: List["StructMatcher"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PathMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    path: "StringMatcher" = betterproto.message_field(1, group="rule")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetadataMatcher(betterproto.Message):
    """Specifies the way to match a double value."""

    # If specified, the input double value must be in the range specified here.
    # Note: The range is using half-open interval semantics [start, end).
    filter: str = betterproto.string_field(1)
    # If specified, the input double value must be equal to the value specified
    # here.
    path: List["MetadataMatcherPathSegment"] = betterproto.message_field(2)
    value: "ValueMatcher" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MetadataMatcherPathSegment(betterproto.Message):
    key: str = betterproto.string_field(1, group="segment")

    def __post_init__(self) -> None:
        super().__post_init__()


from ... import v3 as __v3__
