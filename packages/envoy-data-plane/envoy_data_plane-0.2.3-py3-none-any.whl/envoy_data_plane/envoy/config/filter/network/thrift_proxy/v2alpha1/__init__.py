# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto, envoy/config/filter/network/thrift_proxy/v2alpha1/thrift_proxy.proto
# plugin: python-betterproto
import warnings
from dataclasses import dataclass
from typing import List, Optional

import betterproto


class TransportType(betterproto.Enum):
    AUTO_TRANSPORT = 0
    FRAMED = 1
    UNFRAMED = 2
    HEADER = 3


class ProtocolType(betterproto.Enum):
    AUTO_PROTOCOL = 0
    BINARY = 1
    LAX_BINARY = 2
    COMPACT = 3
    TWITTER = 4


@dataclass(eq=False, repr=False)
class RouteConfiguration(betterproto.Message):
    # The name of the route configuration. Reserved for future use in
    # asynchronous route discovery.
    name: str = betterproto.string_field(1)
    # The list of routes that will be matched, in order, against incoming
    # requests. The first route that matches will be used.
    routes: List["Route"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    # Route matching parameters.
    match: "RouteMatch" = betterproto.message_field(1)
    # Route request to some upstream cluster.
    route: "RouteAction" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteMatch(betterproto.Message):
    # If specified, the route must exactly match the request method name. As a
    # special case, an empty string matches any request method name.
    method_name: str = betterproto.string_field(1, group="match_specifier")
    # If specified, the route must have the service name as the request method
    # name prefix. As a special case, an empty string matches any service name.
    # Only relevant when service multiplexing.
    service_name: str = betterproto.string_field(2, group="match_specifier")
    # Inverts whatever matching is done in the :ref:`method_name <envoy_api_field
    # _config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name>` or
    # :ref:`service_name <envoy_api_field_config.filter.network.thrift_proxy.v2al
    # pha1.RouteMatch.service_name>` fields. Cannot be combined with wildcard
    # matching as that would result in routes never being matched. .. note::
    # This does not invert matching done as part of the :ref:`headers field   <en
    # voy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.header
    # s>` field. To   invert header matching, see :ref:`invert_match
    # <envoy_api_field_route.HeaderMatcher.invert_match>`.
    invert: bool = betterproto.bool_field(3)
    # Specifies a set of headers that the route should match on. The router will
    # check the requestâ€™s headers against all the specified headers in the route
    # config. A match will happen if all the headers in the route are present in
    # the request with the same values (or based on presence if the value field
    # is not in the config). Note that this only applies for Thrift transports
    # and/or protocols that support headers.
    headers: List["_____api_v2_route__.HeaderMatcher"] = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteAction(betterproto.Message):
    """[#next-free-field: 7]"""

    # Indicates a single upstream cluster to which the request should be routed
    # to.
    cluster: str = betterproto.string_field(1, group="cluster_specifier")
    # Multiple upstream clusters can be specified for a given route. The request
    # is routed to one of the upstream clusters based on weights assigned to each
    # cluster.
    weighted_clusters: "WeightedCluster" = betterproto.message_field(
        2, group="cluster_specifier"
    )
    # Envoy will determine the cluster to route to by reading the value of the
    # Thrift header named by cluster_header from the request headers. If the
    # header is not found or the referenced cluster does not exist Envoy will
    # respond with an unknown method exception or an internal error exception,
    # respectively.
    cluster_header: str = betterproto.string_field(6, group="cluster_specifier")
    # Optional endpoint metadata match criteria used by the subset load balancer.
    # Only endpoints in the upstream cluster with metadata matching what is set
    # in this field will be considered. Note that this will be merged with what's
    # provided in :ref:`WeightedCluster.metadata_match <envoy_api_field_config.fi
    # lter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight.metadata_m
    # atch>`, with values there taking precedence. Keys and values should be
    # provided under the "envoy.lb" metadata key.
    metadata_match: "_____api_v2_core__.Metadata" = betterproto.message_field(3)
    # Specifies a set of rate limit configurations that could be applied to the
    # route. N.B. Thrift service or method name matching can be achieved by
    # specifying a RequestHeaders action with the header name ":method-name".
    rate_limits: List["_____api_v2_route__.RateLimit"] = betterproto.message_field(4)
    # Strip the service prefix from the method name, if there's a prefix. For
    # example, the method call Service:method would end up being just method.
    strip_service_name: bool = betterproto.bool_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WeightedCluster(betterproto.Message):
    """
    Allows for specification of multiple upstream clusters along with weights
    that indicate the percentage of traffic to be forwarded to each cluster.
    The router selects an upstream cluster based on these weights.
    """

    # Specifies one or more upstream clusters associated with the route.
    clusters: List["WeightedClusterClusterWeight"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WeightedClusterClusterWeight(betterproto.Message):
    # Name of the upstream cluster.
    name: str = betterproto.string_field(1)
    # When a request matches the route, the choice of an upstream cluster is
    # determined by its weight. The sum of weights across all entries in the
    # clusters array determines the total weight.
    weight: Optional[int] = betterproto.message_field(2, wraps=betterproto.TYPE_UINT32)
    # Optional endpoint metadata match criteria used by the subset load balancer.
    # Only endpoints in the upstream cluster with metadata matching what is set
    # in this field, combined with what's provided in :ref:`RouteAction's
    # metadata_match <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1
    # .RouteAction.metadata_match>`, will be considered. Values here will take
    # precedence. Keys and values should be provided under the "envoy.lb"
    # metadata key.
    metadata_match: "_____api_v2_core__.Metadata" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ThriftProxy(betterproto.Message):
    # The name of the route configuration. Reserved for future use in
    # asynchronous route discovery.
    transport: "TransportType" = betterproto.enum_field(2)
    # The list of routes that will be matched, in order, against incoming
    # requests. The first route that matches will be used.
    protocol: "ProtocolType" = betterproto.enum_field(3)
    stat_prefix: str = betterproto.string_field(1)
    route_config: "RouteConfiguration" = betterproto.message_field(4)
    thrift_filters: List["ThriftFilter"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ThriftFilter(betterproto.Message):
    # Route matching parameters.
    name: str = betterproto.string_field(1)
    # Route request to some upstream cluster.
    config: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(
        2, group="config_type"
    )
    typed_config: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(
        3, group="config_type"
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.config:
            warnings.warn("ThriftFilter.config is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class ThriftProtocolOptions(betterproto.Message):
    # If specified, the route must exactly match the request method name. As a
    # special case, an empty string matches any request method name.
    transport: "TransportType" = betterproto.enum_field(1)
    # If specified, the route must have the service name as the request method
    # name prefix. As a special case, an empty string matches any service name.
    # Only relevant when service multiplexing.
    protocol: "ProtocolType" = betterproto.enum_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


from ......api.v2 import core as _____api_v2_core__
from ......api.v2 import route as _____api_v2_route__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
