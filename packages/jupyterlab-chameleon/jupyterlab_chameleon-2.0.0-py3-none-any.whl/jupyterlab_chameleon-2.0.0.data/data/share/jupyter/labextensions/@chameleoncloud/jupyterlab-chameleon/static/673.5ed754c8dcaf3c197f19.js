(self.webpackChunk_chameleoncloud_jupyterlab_chameleon=self.webpackChunk_chameleoncloud_jupyterlab_chameleon||[]).push([[673],{673:(t,e,a)=>{"use strict";a.r(e),a.d(e,{default:()=>$});var r=a(475),i=a(441),s=a(70),n=a(989),c=a(394),o=a.n(c),l=a(919),d=a(389),h=a(530),u=a(850),m=a(510);class p extends n.DirListing.Renderer{constructor(t){super(),this._artifactRegistry=t}populateHeaderNode(t){super.populateHeaderNode(t),this._headerIndicator||(this._headerIndicator=document.createElement("div"),this._headerIndicator.className="chi-Something")}updateItemNode(t,e,a){super.updateItemNode(t,e,a);const r=this._artifactRegistry.getArtifactSync(e.path);if(r&&r.id){t.setAttribute("data-artifact-id",r.id);const e=[`Artifact ID: ${r.id}`,`Artifact repository: ${r.deposition_repo}`,`Artifact ownership: ${r.ownership}`].join("\n");t.title+=`\n${e}`}else delete t.dataset.artifactId}}var f,g=a(290),y=a(275);class w{constructor(){this._serverSettings=g.ServerConnection.makeSettings(),this._artifacts=[],this._artifactsFetched=!1}async createArtifact(t){const e=await g.ServerConnection.makeRequest(f.getUrl(this._serverSettings),{method:"POST",body:JSON.stringify({path:t})},this._serverSettings),a=await f.handleCreateResponse(e);return this._updateArtifacts(a),a}async commitArtifact(t){const e=await g.ServerConnection.makeRequest(f.getUrl(this._serverSettings),{method:"PUT",body:JSON.stringify(t)},this._serverSettings),a=Object.assign(Object.assign({},t),{deposition_id:null});this._updateArtifacts(a),await f.handleUpdateResponse(e)}async newArtifactVersion(t){const e=await g.ServerConnection.makeRequest(f.getUrl(this._serverSettings),{method:"POST",body:JSON.stringify(t)},this._serverSettings),a=await f.handleCreateResponse(e);return this._updateArtifacts(a),a}async getArtifacts(){if(!this._artifactsFetched){this._artifactsFetchPromise||(this._artifactsFetchPromise=g.ServerConnection.makeRequest(f.getUrl(this._serverSettings),{method:"GET"},this._serverSettings).then(f.handleListResponse));try{this._artifacts=await this._artifactsFetchPromise,this._artifactsFetched=!0}finally{delete this._artifactsFetchPromise}}return this._artifacts}async getArtifact(t){return(await this.getArtifacts()).find((e=>e.path===t))}getArtifactSync(t){return this._artifacts.find((e=>e.path===t))}hasArtifactSync(t){return!!this.getArtifactSync(t)}_updateArtifacts(t){const e=this._artifacts.findIndex((({path:e})=>e===t.path));this._artifacts=e>=0?this._artifacts.slice(0,e).concat([t],this._artifacts.slice(e+1)):this._artifacts.concat([t])}}!function(t){function e(t){return Object.assign(Object.assign({},t),{path:t.path.replace(/^\.\//,"")})}t.normalizeArtifact=e,t.getUrl=function(t){const e=[t.baseUrl,"chameleon","artifacts"];return y.URLExt.join.call(y.URLExt,...e)},t.handleListResponse=async function(t){const{artifacts:a}=await t.json();if(!a||!Array.isArray(a))throw new Error("Malformed response");return a.map(e)},t.handleUpdateResponse=async function(t){if(t.status>299){const e=`HTTP error ${t.status} occurred updating the artifact`;throw new g.ServerConnection.ResponseError(t,e)}},t.handleCreateResponse=async function(t){if(t.status>299){const e="An error occurred creating the artifact";throw new g.ServerConnection.ResponseError(t,e)}return e(await t.json())}}(f||(f={}));const _=new(a(797).Token)("@jupyterlab_zenodo:IZenodoRegistry");var E,b=a(271);!function(t){t.CONFIRM_FORM="confirm-form",t.EMBED_FORM="embed-form",t.WAITING="waiting",t.SUCCESS="success"}(E||(E={}));class v extends b.Component{render(){return b.createElement("div",null,b.createElement("h2",null,"Package new artifact"),b.createElement("p",null,"Packaging your work as an ",b.createElement("i",null,"artifact")," makes it easier to share your Notebook(s) and related files with others. A packaged experiment:"),b.createElement("ul",null,b.createElement("li",null,"can by “replayed” by any Chameleon user"),b.createElement("li",null,"is displayed in"," ",b.createElement("a",{href:this.props.urlFactory.indexUrl(),rel:"noreferrer",target:"_blank"},"Chameleon Trovi")," ","(artifact sharing system)"),b.createElement("li",null,"is initially private to you, but can be shared, either with specific projects, or all users"),b.createElement("li",null,"supports versioning, if you ever want to make changes")),b.createElement("p",null,"To learn more about Trovi, and artifact packaging, please refer to the"," ",b.createElement("a",{href:"https://chameleoncloud.readthedocs.io",rel:"noreferrer",target:"_blank"},"Chameleon documentation"),"."))}}class S extends b.Component{render(){return b.createElement("div",null,b.createElement("h2",null,"Your artifact was successfully packaged."),this.props.artifact&&b.createElement("p",null,"You can view your artifact at any time on"," ",b.createElement("a",{href:this.props.urlFactory.detailUrl(this.props.artifact.id),target:"_blank",rel:"noreferrer"},"Trovi"),"."),b.createElement("p",null,"You may now close this window."))}}class k extends b.Component{render(){return b.createElement("div",null,b.createElement("h2",null,"Create new artifact version"),b.createElement("p",null,"When you create a new version of an existing package, your package’s files are re-uploaded and then saved as a new launchable artifact. Creating a new version makes sense if you make adjustments to your code or Notebooks, perhaps fixing a bug or adding additional capabilities or functionality."),b.createElement("p",null,"If you want to start a new packaged artifact, you can do so by moving the files you want included in the package to their own directory, outside of any already-published package directories."),b.createElement("p",null,"All package versions are displayed in Trovi along with your existing artifact title, description, and other metadata. You can optionally edit this metadata before saving your new version."))}}class I extends b.Component{render(){return b.createElement("div",null,b.createElement("h2",null,"A new version of your artifact was created."),this.props.artifact&&b.createElement("p",null,"You can view your artifact at any time on"," ",b.createElement("a",{href:this.props.urlFactory.detailUrl(this.props.artifact.id),target:"_blank",rel:"noreferrer"},"Trovi"),"."),b.createElement("p",null,"You may now close this window."))}}class A extends b.Component{constructor(t){let e;switch(super(t),this._allStates=Object.values(E),this.props.workflow){case"upload":e=E.CONFIRM_FORM;break;case"edit":e=E.EMBED_FORM}this.state={artifact:this.props.initialArtifact,currentState:e,errorMessage:null},this.onSubmit=this.onSubmit.bind(this),this.onMessage=this.onMessage.bind(this)}componentDidMount(){window.addEventListener("message",this.onMessage)}async onMessage(t){if(!this.props.urlFactory.isExternalUrl(t.origin))return;t.preventDefault();const e=t.data;if("save_result"===e.message){if(!e.body)throw new Error("Invalid post message payload");if("success"===e.body.status){const t={currentState:E.SUCCESS};if("upload"===this.props.workflow&&(!this.state.artifact.id||"own"!==this.state.artifact.ownership)){const a=Object.assign(Object.assign({},this.state.artifact),{id:e.body.id,ownership:"own"});try{await this.props.artifactRegistry.commitArtifact(a),t.artifact=a}catch(e){t.errorMessage=`Failed to sync state of artifact: ${e.message}`}}this.setState(t)}else this.props.onCancel()}else console.log(`Ignoring postMessage type "${e.message}"`)}async onSubmit(t){t.preventDefault(),this.setState({currentState:E.WAITING});try{let t;if(t=this.state.artifact.id?await this.props.artifactRegistry.newArtifactVersion(this.state.artifact):await this.props.artifactRegistry.createArtifact(this.state.artifact.path),!t.deposition_id)throw new Error("Missing artifact ID");this.setState({currentState:E.EMBED_FORM,artifact:t})}catch(t){this.setState({currentState:E.CONFIRM_FORM,errorMessage:`Failed to package artifact: ${t.message}`})}}embedUrl(){const t=this.state.artifact;if(!t)return;const{id:e,deposition_id:a,deposition_repo:r}=t;return e?a?this.props.urlFactory.newVersionUrl(e,a,r):this.props.urlFactory.updateUrl(e):a?this.props.urlFactory.createUrl(a,r):void 0}render(){const t={display:"none"},e={display:"block"},a=this._allStates.reduce(((a,r)=>(a[r]=this.state.currentState===r?e:t,a)),{});let r,i;return this.props.initialArtifact.id?(r=b.createElement(k,{urlFactory:this.props.urlFactory}),i=b.createElement(I,{urlFactory:this.props.urlFactory,artifact:this.state.artifact})):(r=b.createElement(v,{urlFactory:this.props.urlFactory}),i=b.createElement(S,{urlFactory:this.props.urlFactory,artifact:this.state.artifact})),b.createElement("div",{className:"chi-Expand"},b.createElement("div",{className:"chi-ArtifactSharing-Form",style:a[E.CONFIRM_FORM]},b.createElement("form",{onSubmit:this.onSubmit},this.state.errorMessage&&b.createElement("div",{className:"chi-ArtifactSharing-ErrorMessage"},this.state.errorMessage),r,b.createElement("div",{className:"chi-ArtifactSharing-FormActions"},b.createElement("button",{className:"jp-mod-styled jp-mod-accept",type:"submit"},"Upload: ",b.createElement("code",null,this.state.artifact.path,"/"))))),b.createElement("div",{className:"chi-Expand",style:a[E.EMBED_FORM]},this.state.currentState===E.EMBED_FORM&&b.createElement("iframe",{className:"chi-ArtifactSharing-embed",src:this.embedUrl()})),b.createElement("div",{className:"chi-ArtifactSharing-Form",style:a[E.WAITING]},b.createElement("div",{className:"jp-Spinner"},b.createElement("div",{className:"jp-SpinnerContent"}),b.createElement("div",{className:"chi-ArtifactSharing-LoadingMessage"},"Please wait while your files are uploaded…"))),b.createElement("div",{className:"chi-ArtifactSharing-Form",style:a[E.SUCCESS]},this.state.errorMessage&&b.createElement("div",{className:"chi-ArtifactSharing-ErrorMessage"},this.state.errorMessage),i))}}class R extends i.ReactWidget{constructor(t,e,a,r){super(),this.id="artifact-sharing-Widget",this._artifact=t,this._workflow=e,this._urlFactory=a,this._artifactRegistry=r}render(){return b.createElement(A,{initialArtifact:this._artifact,workflow:this._workflow,urlFactory:this._urlFactory,artifactRegistry:this._artifactRegistry,onCancel:this.dispose.bind(this)})}}const F="@chameleoncloud/jupyterlab-chameleon",C=`${F}:artifact-sharing`,U=`${F}:file-browser-factory`,M=`${F}:artifact-registry`;class x{constructor(t){this._settings=t}indexUrl(){return this._baseUrl}detailUrl(t){return this._makeUrl("externalDetailEndpoint").replace("{externalId}",t)}createUrl(t,e){return this._makeUrl("externalCreateEndpoint").replace("{depositionId}",t).replace("{depositionRepo}",e)}updateUrl(t){return this._makeUrl("externalUpdateEndpoint").replace("{externalId}",t)}newVersionUrl(t,e,a){return this._makeUrl("externalNewVersionEndpoint").replace("{externalId}",t).replace("{depositionId}",e).replace("{depositionRepo}",a)}isExternalUrl(t){return 0===this._baseUrl.indexOf(t)}get _baseUrl(){return this._settings.get("externalBaseUrl").composite}_makeUrl(t){const e=this._settings.get(t).composite;return this._baseUrl+e}}const N={id:C,requires:[d.ISettingRegistry,i.ICommandPalette,r.ILayoutRestorer,l.IMainMenu,n.IFileBrowserFactory,_],activate(t,e,a,r,s,n,c){Promise.all([e.load(C),t.restored,c.getArtifacts()]).then((async([e])=>{const o=n.defaultBrowser,l=new i.WidgetTracker({namespace:"artifact-sharing"}),d=new j(o,c),h=function(t,e,a,r,s){let n;return async c=>{const o=await s.currentItemArtifact();if(!n||n.isDisposed){const t=new x(e),a=new R(o,c,t,r);a.title.label="upload"===c?"Package artifact":"Edit artifact",n=new i.MainAreaWidget({content:a}),n.id="artifact-sharing"}n.isAttached||t.shell.add(n,"main"),a.has(n)||await a.add(n),n.update(),t.shell.activateById(n.id)}}(t,e,l,c,d),u=()=>{const t=d.currentItem();return d.canBeArtifact(t)&&d.isOwnedArtifact(t)};t.commands.addCommand(O.create,{label:"Package as new artifact",isEnabled:()=>{const t=d.currentItem();return d.canBeArtifact(t)&&!d.isOwnedArtifact(t)},async execute(){await h("upload")}}),t.commands.addCommand(O.newVersion,{label:"Create new artifact version",isEnabled:u,async execute(){await h("upload")}}),t.commands.addCommand(O.edit,{label:"Edit artifact",isEnabled:u,async execute(){await h("edit")}}),function(t,e){const a=new m.Menu({commands:t.commands});a.addItem({command:O.create}),a.addItem({command:O.edit}),a.addItem({command:O.newVersion}),a.title.label="Share",e.addMenu(a,{rank:20})}(t,s),function(t){const e=".jp-DirListing-item[data-isdir=true][data-artifact-id]";t.contextMenu.addItem({command:O.create,selector:".jp-DirListing-item[data-isdir=true]:not([data-artifact-id])",rank:1}),t.contextMenu.addItem({command:O.edit,selector:e,rank:1}),t.contextMenu.addItem({command:O.newVersion,selector:e,rank:2})}(t),function(t){const e="Sharing";t.addItem({command:O.create,category:e}),t.addItem({command:O.edit,category:e}),t.addItem({command:O.newVersion,category:e})}(a),await r.restore(l,{command:O.create,name:()=>"artifact-sharing"})})).catch((t=>{console.error(t.message)}))},autoStart:!0};var O;!function(t){t.create="artifact-sharing:create",t.edit="artifact-sharing:edit",t.newVersion="artifact-sharing:newVersion"}(O||(O={}));class j{constructor(t,e){this._browser=t,this._artifactRegistry=e}canBeArtifact(t){return t&&"directory"===t.type}isOwnedArtifact(t){const e=this._artifactRegistry.getArtifactSync(t.path);return e&&"own"===e.ownership}async currentItemArtifact(){const t=this.currentItem();if(!t||"directory"!==t.type)return null;let e=await this._artifactRegistry.getArtifact(t.path);return e||(e={path:t.path}),e}currentItem(){const t=(0,u.toArray)(this._browser.selectedItems());return t.length>1?null:1===t.length?t[0]:this._fakeCurrentRootItem()}_fakeCurrentRootItem(){const{path:t}=this._browser.model;return{content:null,created:null,format:"json",last_modified:null,mimetype:null,name:t,path:t,type:"directory",writable:!0}}}const T=[N,{id:U,provides:n.IFileBrowserFactory,requires:[s.IDocumentManager,_],optional:[h.IStateDB,r.IRouter,r.JupyterFrontEnd.ITreeResolver],activate:async(t,e,a,r,i,s)=>(n.DirListing.defaultRenderer=new p(a),o().find((({id:t})=>"@jupyterlab/filebrowser-extension:factory"===t)).activate(t,e,r,i,s))},{id:M,provides:_,requires:[],activate:t=>new w}];class D{constructor(){this._heartbeatTimer=null,this._interval=6e4,this._serverSettings=g.ServerConnection.makeSettings()}start(){window.clearTimeout(this._heartbeatTimer),this._heartbeatTimer=window.setInterval((async()=>{await this._beat()}),this._interval),this._beat()}async _beat(){const t=await g.ServerConnection.makeRequest(P.getUrl(this._serverSettings),{method:"GET"},this._serverSettings),e=await t.json();200===t.status?console.debug(`Session ok until ${e.expires_at}`):401===t.status&&await this._reauthenticate(e.reauthenticate_link)}async _reauthenticate(t){const e=new i.Dialog({title:"Your Chameleon session has timed out.",body:"We will attempt to automatically reconnect you.",buttons:[i.Dialog.okButton({label:"Continue"})]}),a=await e.launch();e.dispose(),a.button.accept&&(document.location.href=t)}}var P;!function(t){t.getUrl=function(t){const e=[t.baseUrl,"chameleon","heartbeat"];return y.URLExt.join.call(y.URLExt,...e)}}(P||(P={}));const B={activate(t){Promise.all([t.restored]).then((async()=>{(new D).start()})).catch((t=>{console.error(t)}))},id:"@chameleoncloud/jupyterlab-chameleon:sessionHeartbeatPlugin",autoStart:!0},L=T;L.push(B);const $=L}}]);