(self.webpackChunkjupyterlab_hubshare=self.webpackChunkjupyterlab_hubshare||[]).push([[937],{937:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var o=n(989),a=n(271),r=n.n(a),s=n(441),i=n(290),c=n(275);class h extends s.ReactWidget{constructor(e,t,n){super(),this.name=t,this.path=e,this.importFunc=n}render(){const e=i.ServerConnection.makeSettings(),t=encodeURIComponent(this.path),n=c.URLExt.join(e.baseUrl,"jupyterlab_hubshare",`preview?path=${t}`);return r().createElement("div",{style:{width:"100%",height:"100%"}},r().createElement("div",null,r().createElement("input",{type:"button",value:"Import",onClick:()=>this.importFunc(this.path)})),r().createElement("iframe",{style:{width:"100%",height:"100%"},src:n}))}}class l extends s.MainAreaWidget{constructor(e,t,n){super({content:new h(e,t,n)}),this.id="HubShare-preview",this.title.label=`Preview: ${t}`,this.title.closable=!0}}async function p(e="",t={}){const n=i.ServerConnection.makeSettings(),o=c.URLExt.join(n.baseUrl,"jupyterlab_hubshare",e);let a;try{a=await i.ServerConnection.makeRequest(o,t,n)}catch(e){throw new i.ServerConnection.NetworkError(e)}let r=await a.text();if(r.length>0)try{r=JSON.parse(r)}catch(e){console.log("Not a JSON response body.",a)}if(!a.ok)throw new i.ServerConnection.ResponseError(a,r.message||r);return r}const d={id:"jupyterlab_hubshare:plugin",autoStart:!0,requires:[o.IFileBrowserFactory],activate:(e,t)=>{console.log("JupyterLab extension jupyterlab_hubshare is activated!");let n=null;const{tracker:o}=t;e.commands.addCommand("HubShare:preview",{caption:"Preview Shared Notebook",execute:t=>{null!==n&&n.close(),n=new l(String(t.path),String(t.name),(t=>{console.log(t),e.commands.execute("HubShare:import",{path:t})})),n.isAttached||e.shell.add(n,"main"),e.shell.activateById(n.id)}}),e.commands.addCommand("HubShare:import",{caption:"import notebook",execute:o=>{const a=String(o.path);p("content",{method:"PUT",body:JSON.stringify({path:a})}).then((o=>{const a=t.defaultBrowser.model.path;return new Promise((t=>{e.commands.execute("docmanager:new-untitled",{path:a,type:"notebook"}).then((t=>(n.close(),e.commands.execute("docmanager:open",{factory:"Notebook",path:t.path})))).then((e=>e.context.ready.then((()=>{e.model.fromJSON(o.content),t(e)})))).then((()=>e.commands.execute("docmanager:save")))}))}))}}),e.commands.addCommand("HubShare:share-link",{label:"Copy Sharable link",execute:()=>{const e=o.currentWidget;if(!e)return;const t=e.selectedItems().next().path;console.log(t),p("share-url",{method:"PUT",body:JSON.stringify({path:t})}).then((e=>{let t=e.share_path;console.log(e),t.startsWith("http://")&&t.startsWith("https://")||(t=new URL(t,window.location.href).href),console.log(t),s.Clipboard.copyToSystem(t)}))},iconClass:"jp-MaterialIcon jp-LinkIcon"}),e.contextMenu.addItem({command:"HubShare:share-link",selector:'.jp-DirListing-item[data-file-type="notebook"]',rank:3});const a=new URLSearchParams(window.location.search);if(a.get("path")&&"share"===a.get("from")){const t=a.get("path"),n=t.split("/").pop();console.log(`Found preview path: ${t}`),Promise.all([e.restored]).then((()=>{e.commands.execute("HubShare:preview",{path:t,name:n})}))}}}}}]);