
# This file is automatically generated. Do not edit.


from ply import yacc

# Required to build parser
from compiler.lex import tokens  # noqa


import compiler.yacc.grammar.lines
import compiler.yacc.grammar.asm
import compiler.yacc.grammar.defFun
import compiler.yacc.grammar.error
import compiler.yacc.grammar.ifElseIf
import compiler.yacc.grammar.jump


def p_lines_one(p):
    '''lines : line'''
    compiler.yacc.grammar.lines.lines_one(p)


def p_lines_lines(p):
    '''lines : lines lines'''
    compiler.yacc.grammar.lines.lines_lines(p)


def p_lines_empty(p):
    '''line : noLine'''
    compiler.yacc.grammar.lines.lines_empty(p)


def p_noLine(p):
    '''noLine : EndLine'''
    compiler.yacc.grammar.lines.noLine(p)


def p_lineAsm(p):
    '''line : ID asmValideInstructions EndLine'''
    compiler.yacc.grammar.asm.lineAsm(p)


def p_lineEnd(p):
    '''line : ID EndLine'''
    compiler.yacc.grammar.asm.lineEnd(p)


def p_asmFollowInstructions_one(p):
    '''asmValideInstructions : info'''
    compiler.yacc.grammar.asm.asmFollowInstructions_one(p)


def p_asmFollowInstructions_many(p):
    '''asmValideInstructions : asmValideInstructions info'''
    compiler.yacc.grammar.asm.asmFollowInstructions_many(p)


def p_info_id(p):
    '''info : ID'''
    compiler.yacc.grammar.asm.info_id(p)


def p_info(p):
    '''info : Number
            | String
            | ArobasedInfo
    '''
    compiler.yacc.grammar.asm.info(p)


def p_runFunc(p):
    '''lines : ID OpenParenthesis argumentsCall CloseParenthesis'''
    compiler.yacc.grammar.defFun.runFunc(p)


def p_argumentsCall(p):
    '''argumentsCall : ID'''
    compiler.yacc.grammar.defFun.argumentsCall(p)


def p_argumentsCall_many(p):
    '''argumentsCall : argumentsCall Comma ID'''
    compiler.yacc.grammar.defFun.argumentsCall_many(p)


def p_argumentsCall_empty(p):
    '''argumentsCall : '''
    compiler.yacc.grammar.defFun.argumentsCall_empty(p)


def p_defFun(p):
    '''noLine : DefFun ID funScope OpenParenthesis arguments CloseParenthesis OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.defFun.defFun(p)


def p_funScope(p):
    '''funScope :'''
    compiler.yacc.grammar.defFun.funScope(p)


def p_args(p):
    '''arguments : ID'''
    compiler.yacc.grammar.defFun.args(p)


def p_args_many(p):
    '''arguments : arguments Comma ID'''
    compiler.yacc.grammar.defFun.args_many(p)


def p_args_empty(p):
    '''arguments : '''
    compiler.yacc.grammar.defFun.args_empty(p)


def p_error(p):
    '''None'''
    compiler.yacc.grammar.error.error(p)


def p_linesFromIf(p):
    '''lines : ifBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIf(p)


def p_linesFromIfElse(p):
    '''lines : ifBlock elseBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElse(p)


def p_linesFromIfElseElseIf(p):
    '''lines : ifBlock elifs'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElseElseIf(p)


def p_linesFromIfElseElseIfElse(p):
    '''lines : ifBlock elifs elseBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElseElseIfElse(p)


def p_elifs_one(p):
    '''elifs : elseIfBlock'''
    compiler.yacc.grammar.ifElseIf.elifs_one(p)


def p_elifs_many(p):
    '''elifs : elifs elseIfBlock'''
    compiler.yacc.grammar.ifElseIf.elifs_many(p)


def p_elseIfBlock(p):
    '''elseIfBlock : Else ifBlock'''
    compiler.yacc.grammar.ifElseIf.elseIfBlock(p)


def p_elseInstr(p):
    '''elseBlock : Else OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.elseInstr(p)


def p_ifBlock(p):
    '''ifBlock : If asmCondition OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.ifBlock(p)


def p_elifBlock(p):
    '''elseIfBlock : ElseIf asmCondition OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.elifBlock(p)


def p_ref(p):
    '''line : RefJump EndLine'''
    compiler.yacc.grammar.jump.ref(p)


def p_lineJump(p):
    '''line : jump'''
    compiler.yacc.grammar.jump.lineJump(p)


def p_jump_asmCondition(p):
    '''jump : Jump ID asmCondition EndLine'''
    compiler.yacc.grammar.jump.jump_asmCondition(p)


def p_comparison(p):
    '''asmCondition : info Comparison info'''
    compiler.yacc.grammar.jump.comparison(p)


def p_jump_always(p):
    '''jump : Jump ID EndLine'''
    compiler.yacc.grammar.jump.jump_always(p)


def p_jump_asmNoRef(p):
    '''line : Jump Number asmCondition EndLine'''
    compiler.yacc.grammar.jump.jump_asmNoRef(p)


def p_asmCondition(p):
    '''asmCondition : ID info info'''
    compiler.yacc.grammar.jump.asmCondition(p)


parser = yacc.yacc()
