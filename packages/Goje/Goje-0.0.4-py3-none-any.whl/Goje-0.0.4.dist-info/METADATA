Metadata-Version: 2.1
Name: Goje
Version: 0.0.4
Summary: Unofficial Library for Scrapping Rotten Tomato.
Home-page: https://faze.li
Author: Ali Fazeli
Author-email: a.fazeli95@gmail.com
License: MIT
Keywords: scrapper
Platform: UNKNOWN
Classifier: Development Status :: 6 - Mature
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Internet
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Text Processing
Classifier: Topic :: Utilities
Requires-Dist: requests
Requires-Dist: beautifulsoup4
Requires-Dist: lxml

Unofficial Library for Scrapping `Rotten Tomato <http://rottentomatoes.com/>`__
===============================================================================

Goje, in Persian (گوجه) means tomato. *Goje* is another library for
scrapping Movie Metadata from `Rotten
Tomato <http://rottentomatoes.com>`__ movie database. it is mainly
developed based on native python libraries. and believe me it is blazing
fast!

Installation
------------

``pip install Goje``

Usage
-----

Currently Goje supports 3 main functions:

+-----------------------------------+-----------------------------------+
| Method Name                       | Functionality                     |
+===================================+===================================+
| GojeScra                          | return all the Rotten Tomato      |
| per.extract_extract_movie_links() | Movie Links based on a given year |
|                                   | range                             |
+-----------------------------------+-----------------------------------+
| GojeScraper.extract_metadata()    | scrape, extract and return all    |
|                                   | movie information upon a given    |
|                                   | Movie URL                         |
+-----------------------------------+-----------------------------------+
| GojeScraper.extract_reviews()     | extract all the reviews of a      |
|                                   | Movie, based on a given Rotten    |
|                                   | Tomato movie URL and specified    |
|                                   | review page                       |
+-----------------------------------+-----------------------------------+

GojeScraper.extract_extract_movie_links()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

   from goje_scrapper import GojeScraper

   movie_scraper = GojeScraper()
   print(movie_scraper.extract_movie_links(2021,2022))

GojeScraper.extract_metadata()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

   from goje_scrapper import GojeScraper

   # give a Rotten Tomato Movie URL
   movie_url = 'https://www.rottentomatoes.com/m/a_separation_2011'
   # Instantiate Goje via given URL
   movie_scraper = GojeScraper(movie_url=movie_url)
   # Scrape Movie Meta Data
   movie_scraper.extract_metadata()
   print(movie_scraper.metadata)

GojeScraper.extract_reviews() (single page review)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

   from goje_scrapper import GojeScraper

   # give a Rotten Tomato Movie URL
   movie_url = 'https://www.rottentomatoes.com/m/a_separation_2011'
   # Instantiate Goje via given URL
   movie_scraper = GojeScraper(movie_url=movie_url)
   # When you want to extract one page of reviews
   all_reviews = movie_scraper.extract_reviews(page_number=1)
   print(all_reviews)

GojeScraper.extract_reviews() (All reviews)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

   from goje_scrapper import GojeScraper

   # give a Rotten Tomato Movie URL
   movie_url = 'https://www.rottentomatoes.com/m/a_separation_2011'
   # Instantiate Goje via given URL
   movie_scraper = GojeScraper(movie_url=movie_url)
   # When you want to grab every review in rotten tomato
   review_list = list()
   try:
       movie_scraper.number_of_review_pages()

       for i in range(1,movie_scraper.number_of_review_pages()):
           review_list.append(movie_scraper.extract_reviews(page_number=movie_scraper.number_of_review_pages()))
           print("page {0} is scrapped!".format(i))
   except IndexError:
       review_list.append(movie_scraper.extract_reviews())

   print(review_list)

Contribute, Issues and Stuff
----------------------------

Feel free to open an issue in Github repository of Goje.


