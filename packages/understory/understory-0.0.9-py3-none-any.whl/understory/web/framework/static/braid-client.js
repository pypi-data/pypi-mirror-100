var BraidClient;BraidClient=(()=>{var e={10:e=>{e.exports=class{constructor(...e){"."===e&&(e=window.location),this.endpoint=e,this.initialReconnectDelay=1e3,this.currentReconnectDelay=this.initialReconnectDelay,this.maxReconnectDelay=16e3,this.subscribe=this.subscribe.bind(this),this.publish=this.publish.bind(this)}currentState(){return fetch(this.endpoint,{credentials:"same-origin",headers:{accept:"application/json"}}).then((e=>e.json())).then((e=>e))}subscribe(e){const t=()=>{console.log(`Reconnecting to braid at: ${this.endpoint}`),setTimeout((()=>{this.currentReconnectDelay<this.maxReconnectDelay&&(this.currentReconnectDelay*=2),this.subscribe(e)}),this.currentReconnectDelay+Math.floor(3e3*Math.random()))};fetch(this.endpoint,{headers:{credentials:"same-origin",subscribe:"keep-alive"}}).then((n=>{const i=n.body.getReader(),o=new TextDecoder("utf-8");let s="";i.read().then((function t({done:n,value:c}){if(n)return void console.log("BRAID: end of stream");s+=o.decode(c);const r={},a=s.split("\n\n");if(a[0].split("\n").forEach((e=>{const t=e.slice(0,e.indexOf(":")).toLowerCase(),n=e.slice(e.indexOf(":")+1);r[t]=n})),Number(r["content-length"])===a[1].length){s="";const t=r["content-range"].split("=")[1],n=JSON.parse(a[1]);console.log("BRAID: patch received: ",t,n),e(t,n)}return i.read().then(t)})).catch((e=>{console.error("BRAID:",e),t()}))})).catch((e=>{console.error("BRAID:",e),t()}))}publish(e,t){const n=JSON.stringify(t);fetch(this.endpoint,{method:"PUT",headers:{credentials:"same-origin",patches:1},body:`Content-Length: ${n.length}\nContent-Range: json=${e}\n\n${n}`}).then((()=>{console.log("BRAID: patch sent: ",e,t)}))}}}},t={};return function n(i){if(t[i])return t[i].exports;var o=t[i]={exports:{}};return e[i](o,o.exports,n),o.exports}(10)})();