Metadata-Version: 2.1
Name: deepchain-apps
Version: 0.0.17
Summary: Define a personnal scorer for the user of DeepChain.bio
Home-page: UNKNOWN
Author: Instadeep
Author-email: a.delfosse@instadeep.com
License: UNKNOWN
Description: # `deepchain-apps` : Package for creating a personnal app to deploy on the DeepChain platform
        
        ## Getting started with Scorer
        
        This template provide an example of application that you can submit.
        The final app must have the following architecture:
        
        - my_application
          - src/
            - scorer.py
            - Optionnal : requirements.txt (for extra packages)
          - checkpoint/
            - Optionnal : model.[h5/pt]
        
        The main scorer class must be named ’Scorer’
        
        ## CLI
        
        The CLI provides 3 main commands:
        
        - login : you need to supply the token provide on the plateform (PAT: personnal access token).
        
        > deepchain login
        
        - create : create a folder with a template scorer file
        
        > deepchain create my_application
        
        - deploy : the code and checkpoint are deployed on the plateform, you can select your app in the interface on the plateform.
          - with checkpoint upload
            >deepchain deploy my_application --checkpoint
          - Only the code
            >deepchain deploy my_application
        
        The application will be deploy in DeepChain plateform.
        
        ## Embedding
        
        Some embeddings are provided in the `TransformersApp` module
        > from deepchainapps.components import TransformersApp
        
        The model are furnished, but not mandatory, if you want to make an embedding of your protein sequence.
        Only the ESM (evolutionary scale modeling) model is provided, with different architecture.
        Here for some full details of the architecture (https://github.com/facebookresearch/esm)
        
        - 'esm1_t6_43M_UR50S'
        - 'esm1_t12_85M_UR50S'
        - 'esm_msa1_t12_100M_UR50S'
        - 'esm1b_t33_650M_UR50S'
        - 'esm1_t34_670M_UR100'
        - 'esm1_t34_670M_UR50D'
        - 'esm1_t34_670M_UR50S'
        
        !! The embedding will run on a GPU on the plateform. But for a testing phase on your personal computer (CPU), you should choose the smaller architecture.
        
Platform: UNKNOWN
Requires-Python: >=3.7
Description-Content-Type: text/markdown
