# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:

  twine-package:
    docker:
      - image: python:3.8-buster
    steps:
      - checkout
      - run:
          name: twine-package
          command: |
            pip install wheel
            pip install -r requirements-twine.txt

  test:
    docker:
      - image: python:3.8-buster
    steps:
      # adicionar o token do codecov em uma environment variable do circleci chamada de CODECOV_TOKEN
      - checkout
      - run:
          name: tests
          command: |
            pip install wheel
            pip install -r requirements.txt
            python -m unittest discover -b
            coverage run -m unittest discover -b
            bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN

  build:
    docker:
      - image: python:3.8-buster
    steps:
      - checkout
      - run:
          name: build package
          command: |
              pip install wheel
              pip install -r requirements.txt
              python -m build
      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist

  deploy:
    docker:
      - image: python:3.8-buster
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - run:
          name: pypi upload
          command: |
              pip install -r requirements-twine.txt
              python -m twine upload -u $PYPI_USER -p $PYPI_TOKEN dist/*

# Orchestrate our job run sequence
workflows:
  build_and_deploy:
    jobs:
      - twine-package
      - test:
          filters: # required since `deploy` has tag filters AND requires `test`
            tags:
              only: /.*/
      - build:
          filters: # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - deploy:
          requires:
          - test
          - build
          filters:
            # execute only when tags are created
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
