# -*- coding: utf-8 -*-

"""
clicksendapi

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from clicksendapi.api_helper import APIHelper
from clicksendapi.configuration import Server
from clicksendapi.controllers.base_controller import BaseController
from clicksendapi.http.auth.basic_auth import BasicAuth


class ContactController(BaseController):

    """A Controller to access Endpoints in the clicksendapi API."""

    def __init__(self, config, call_back=None):
        super(ContactController, self).__init__(config, call_back)

    def view_contact_list(self,
                          list_id,
                          page=None,
                          limit=None,
                          updated_after=None):
        """Does a GET request to /lists/{list_id}/contacts.

        TODO: type endpoint description here.

        Args:
            list_id (string): Contact list ID
            page (int, optional): page number
            limit (string, optional): Number of records per page
            updated_after (int, optional): Get all contacts updated after a
                given timestamp

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/lists/{list_id}/contacts'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'list_id': {'value': list_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'limit': limit,
            'updated_after': updated_after
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def create_new_contact(self,
                           list_id,
                           contact_info,
                           page=None,
                           limit=None):
        """Does a POST request to /lists/{list_id}/contacts.

        TODO: type endpoint description here.

        Args:
            list_id (string): List id
            contact_info (NewContactInfo): info to create new contact
            page (int, optional): page number
            limit (int, optional): Number of records per page

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/lists/{list_id}/contacts'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'list_id': {'value': list_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.DEFAULT)
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'limit': limit
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(contact_info))
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def delete_contact(self,
                       list_id,
                       contact_id):
        """Does a DELETE request to /lists/{list_id}/contacts/{contact_id}.

        TODO: type endpoint description here.

        Args:
            list_id (int): List ID
            contact_id (int): Contact ID

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/lists/{list_id}/contacts/{contact_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'list_id': {'value': list_id, 'encode': True},
            'contact_id': {'value': contact_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def remove_opted_out_contacts(self,
                                  list_id,
                                  opt_out_list_id):
        """Does a PUT request to /lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}.

        TODO: type endpoint description here.

        Args:
            list_id (int): Your list id
            opt_out_list_id (int): Your opt out list id

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'list_id': {'value': list_id, 'encode': True},
            'opt_out_list_id': {'value': opt_out_list_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers)
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
