[tool.poetry]
name = "get-pwbrowser"
version = "0.1.1"
description = "instantiate a playwright chromium browser"
authors = ["freemt"]

[tool.poetry.dependencies]
python = "^3.7"
logzero = "^1.6.3"
playwright = "^1.9.2"
tbump = "^6.3.1"
pydantic = {extras = ["dotenv"], version = "^1.8.1"}
pyquery = "^1.4.3"

[tool.poetry.dev-dependencies]
pytest = "^5.2"
ipython = "^7.21.0"
linetimer = "^0.1.4"
chardet = "^4.0.0"
flake8 = "^3.9.0"
pytest-playwright = "^0.0.12"
pytest-asyncio = "^0.14.0"
nest-asyncio = "^1.5.1"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.1.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "*/__init__.py"
[[tool.tbump.file]]
src = "tests/*.py"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
