import argparse
from os import path
from typing import Dict, List, Optional
from shutil import copytree, rmtree
import sys

import pandas as pd
import yaml

from awarenessometer.labeled_study import LabeledStudy
from awarenessometer.pre_post_study import PrePostStudy
from awarenessometer.report_creator import ReportCreator
from awarenessometer.data_preprocessor import DataPreprocessor


def _load_yaml(data_path: str, filename: str) -> Dict:
    with open(path.join(data_path, filename), 'r') as stream:
        data = yaml.safe_load(stream)
    return data


def _load_csv(data_path: str, filename: str) -> pd.DataFrame:
    return pd.read_csv(path.join(data_path, filename))


def _get_amount_of_pre_post_participants(series_data: Dict, pseudonym_links: Dict) -> int:
    full_pseudonym_links = DataPreprocessor.complete_pseudonym_links(pseudonym_links)
    subjects1 = series_data['pre']['participants']
    subjects2 = series_data['post']['participants']
    for subject in subjects1:
        post_id = full_pseudonym_links.get(subject, None)
        if post_id in subjects2:
            subjects2.remove(post_id)
    return len(subjects1) + len(subjects2)


def _parse_args(args: List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog='awareness-o-meter')
    parser.add_argument('study_type',
                        choices=['pre-post', 'labeled'],
                        help='The type of study you want to analyze, one of [%(choices)s].')
    parser.add_argument('data_path',
                        type=str,
                        help='The path to the input files generated by the artifact-o-mat.')
    parser.add_argument('out_path',
                        type=str,
                        help='The path where the report should be stored.')
    parser.add_argument('--potential-victims',
                        type=int,
                        help='Number of employees with a visual display workstation, defaults to '
                             'the number of subjects in the study.')
    parser.add_argument('--min-seconds-exposed',
                        type=int,
                        default=60,
                        help='Number of seconds a subject has to be exposed to an artifact to be '
                             'included in the results. Default: 60.')
    parser.add_argument('--author',
                        type=str,
                        help='Name of the author')
    return parser.parse_args(args)


def _create_pre_post_study(data_path: str,  # pylint:disable=too-many-locals
                           img_dir: str,
                           no_vdu_employees: Optional[int],
                           min_seconds_exposed: int) -> PrePostStudy:
    iv_participants_pre = _load_csv(data_path, 'intervention_pre.csv')
    iv_participants_post = _load_csv(data_path, 'intervention_post.csv')
    series_pre = _load_yaml(data_path, 'series_pre.yml')
    series_post = _load_yaml(data_path, 'series_post.yml')
    report_pre = _load_csv(data_path, 'report_pre.csv')
    report_post = _load_csv(data_path, 'report_post.csv')
    pseudonym_links = _load_yaml(data_path, 'pseudonym_links.yml')

    series_pre_df = DataPreprocessor.series_to_df(series_pre, min_seconds_exposed)
    series_post_df = DataPreprocessor.series_to_df(series_post, min_seconds_exposed)
    subject_df = (
        DataPreprocessor.compute_pre_post_subject_df(series_pre_df,
                                                     series_post_df,
                                                     iv_participants_pre,
                                                     iv_participants_post,
                                                     report_pre,
                                                     report_post,
                                                     pseudonym_links)
    )
    series_data = {
        'pre': DataPreprocessor.extract_series_data(series_pre),
        'post': DataPreprocessor.extract_series_data(series_post)
    }

    if no_vdu_employees is None:
        no_vdu_employees = _get_amount_of_pre_post_participants(series_data, pseudonym_links)

    extended_reports = {
        'pre': DataPreprocessor.extend_report(report_pre, series_pre_df),
        'post': DataPreprocessor.extend_report(report_post, series_post_df)
    }

    artifacts = series_data['pre']['artifacts'] + series_data['post']['artifacts']
    good_eval_matrix = DataPreprocessor.get_good_evaluations(list(extended_reports.values()),
                                                             artifacts,
                                                             [iv_participants_pre,
                                                              iv_participants_post])
    positive_action_matrix = DataPreprocessor.get_positive_actions(
        list(extended_reports.values()),
        artifacts,
        [iv_participants_pre, iv_participants_post]
    )

    matrices = {
        'good_evals': good_eval_matrix,
        'positive_actions': positive_action_matrix
    }

    series_info = {
        'series_data': series_data,
        'subject_df': subject_df,
        'reports': extended_reports,
        'matrices': matrices
    }

    study = PrePostStudy(no_vdu_employees, series_info, img_dir)
    return study


def _create_labeled_study(data_path: str,
                          img_dir: str,
                          no_vdu_employees: Optional[int],
                          min_seconds_exposed: int) -> LabeledStudy:
    iv_participants = _load_csv(data_path, 'intervention.csv')
    series = _load_yaml(data_path, 'series.yml')
    series_df = DataPreprocessor.series_to_df(series, min_seconds_exposed)
    report = _load_csv(data_path, 'report.csv')
    extended_report = DataPreprocessor.extend_report(report, series_df)

    subject_df = DataPreprocessor.compute_labeled_subject_df(series_df, iv_participants, report)

    series_data = DataPreprocessor.extract_series_data(series)
    if no_vdu_employees is None:
        no_vdu_employees = len(series_data['participants'])

    matrices = {
        'good_evals': DataPreprocessor.get_good_evaluations([extended_report],
                                                            series_data['artifacts'],
                                                            [iv_participants]),
        'positive_actions': DataPreprocessor.get_positive_actions([extended_report],
                                                                  series_data['artifacts'],
                                                                  [iv_participants])
    }

    study_info = {
        'series_data': series_data,
        'subject_df': subject_df,
        'report': extended_report,
        'matrices': matrices
    }

    study = LabeledStudy(no_vdu_employees, study_info, img_dir)
    return study


def _copy_img_dir(args: argparse.Namespace) -> None:
    data_path = path.abspath(args.data_path)
    in_img_dir = path.join(data_path, 'img')

    out_path = path.abspath(path.dirname(args.out_path))
    out_img_dir = path.join(out_path, 'img')

    if path.isdir(out_img_dir):
        rmtree(out_img_dir)
    copytree(in_img_dir, out_img_dir)


def create_report() -> None:
    args = _parse_args(sys.argv[1:])
    reporter = ReportCreator(args.out_path)
    _copy_img_dir(args)
    data_path = path.abspath(args.data_path)
    img_dir = path.abspath(path.join(path.dirname(args.out_path), 'img'))

    if args.study_type == 'pre-post':
        # mypy does not handle assignmens within branches well yet
        # see https://github.com/python/mypy/issues/6233
        study = _create_pre_post_study(data_path,  # type: ignore
                                       img_dir,
                                       args.potential_victims,
                                       args.min_seconds_exposed)
    else:
        study = _create_labeled_study(data_path,  # type: ignore
                                      img_dir,
                                      args.potential_victims,
                                      args.min_seconds_exposed)

    reporter.create_study_report(study, args.author)
