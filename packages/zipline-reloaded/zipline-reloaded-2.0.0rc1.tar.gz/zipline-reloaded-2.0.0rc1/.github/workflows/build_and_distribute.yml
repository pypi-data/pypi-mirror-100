name: Build Distribution

on: [ push ]

jobs:
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
#        os: [ ubuntu-latest, macos-latest ]
        os: [ ubuntu-latest ]
#        python: [ 37, 38, 39 ]
        python: [ 38 ]
        bitness: [ 64 ]
        #        manylinux_image: [ manylinux1, manylinux2010, manylinux2014 ]
        manylinux_image: [ manylinux2010 ]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          #          - os: windows-latest
          #            bitness: 64
          #            platform_id: win_amd64
          #          - os: windows-latest
          #            bitness: 32
          #            platform_id: win32
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
#          - os: ubuntu-latest
#            bitness: 32
#            platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
#        exclude:
#          - os: macos-latest
#            bitness: 32
#          - os: macos-latest
#            python: 39
          #          - os: windows-latest
          #            manylinux_image: manylinux2010
          #          - os: windows-latest
          #            manylinux_image: manylinux2014
          #          - os: macos-latest
          #            manylinux_image: manylinux2001
          #          - os: macos-latest
          #            manylinux_image: manylinux2010

    steps:
      - name: Checkout zipline
        uses: actions/checkout@v2
      #        with:
      #          submodules: 'recursive'

      - name: Setup Python
        uses: actions/setup-python@v2

#      - name: where are we
#        run: pwd

#      - name: list some files
#        run: ls -lrt

      - name: list zipline
        run: ls -lrt zipline

      - uses: hmarr/debug-action@v2

#      - name: build extensions
#        run: python setup.py build_ext
#
#      - name: Build and test wheels
#        uses: joerick/cibuildwheel@v1.10.0
#        env:
##          CIBW_ENVIRONMENT: "DISABLE_BLOSC_AVX2=true DISABLE_BCOLZ_AVX2=true"
#          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
#          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
#          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
#          CIBW_TEST_EXTRAS: test
#          CIBW_TEST_COMMAND: pip list; nosetests -w {package}/tests --with-coverage --cover-package {package}/zipline
#          CIBW_BEFORE_TEST_LINUX: >
#            yum install wget;
#            wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz;
#            tar xvfz ta-lib-0.4.0-src.tar.gz;
#            cd ta-lib;
#            ./configure;
#            make;
#            make install;
#            ldconfig;
#            pip install -U pip
#          CIBW_BEFORE_TEST_MACOS: >
#            brew install hdf5;
#            brew install ta-lib;
#            pip install -U pip
#
#      - name: Store artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          path: wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Build sdist
        run: |
          pip install -U pip setuptools build
          python -m build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    # upload to PyPI on every push (for now)
    if: github.event_name == 'push'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
#          password: ${{ secrets.TESTPYPI_TOKEN }}
          password: ${{ secrets.PYPI_TOKEN }}
#          repository_url: https://test.pypi.org/legacy/
