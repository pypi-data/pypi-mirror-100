# Generated from PBXProj.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0087")
        buf.write("\u060f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\3\2\3\2\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\5")
        buf.write("\7\u0163\n\7\3\7\3\7\5\7\u0167\n\7\3\7\5\7\u016a\n\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u0170\n\7\3\7\5\7\u0173\n\7\3\7\3\7")
        buf.write("\5\7\u0177\n\7\3\7\5\7\u017a\n\7\3\7\5\7\u017d\n\7\3\7")
        buf.write("\3\7\5\7\u0181\n\7\3\7\5\7\u0184\n\7\3\7\3\7\3\7\5\7\u0189")
        buf.write("\n\7\3\7\5\7\u018c\n\7\3\7\5\7\u018f\n\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\t\6\t\u019a\n\t\r\t\16\t\u019b\3")
        buf.write("\n\6\n\u019f\n\n\r\n\16\n\u01a0\3\13\6\13\u01a4\n\13\r")
        buf.write("\13\16\13\u01a5\3\f\6\f\u01a9\n\f\r\f\16\f\u01aa\3\r\6")
        buf.write("\r\u01ae\n\r\r\r\16\r\u01af\3\16\6\16\u01b3\n\16\r\16")
        buf.write("\16\16\u01b4\3\17\6\17\u01b8\n\17\r\17\16\17\u01b9\3\20")
        buf.write("\6\20\u01bd\n\20\r\20\16\20\u01be\3\21\6\21\u01c2\n\21")
        buf.write("\r\21\16\21\u01c3\3\22\6\22\u01c7\n\22\r\22\16\22\u01c8")
        buf.write("\3\23\6\23\u01cc\n\23\r\23\16\23\u01cd\3\24\6\24\u01d1")
        buf.write("\n\24\r\24\16\24\u01d2\3\25\6\25\u01d6\n\25\r\25\16\25")
        buf.write("\u01d7\3\26\6\26\u01db\n\26\r\26\16\26\u01dc\3\27\6\27")
        buf.write("\u01e0\n\27\r\27\16\27\u01e1\3\30\6\30\u01e5\n\30\r\30")
        buf.write("\16\30\u01e6\3\31\6\31\u01ea\n\31\r\31\16\31\u01eb\3\32")
        buf.write("\6\32\u01ef\n\32\r\32\16\32\u01f0\3\33\6\33\u01f4\n\33")
        buf.write("\r\33\16\33\u01f5\3\34\6\34\u01f9\n\34\r\34\16\34\u01fa")
        buf.write("\3\35\6\35\u01fe\n\35\r\35\16\35\u01ff\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3\37\3\37\5\37\u0213\n\37\3\37\5\37\u0216\n\37\3")
        buf.write("\37\5\37\u0219\n\37\3\37\5\37\u021c\n\37\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\5!\u0235\n!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\5")
        buf.write("\"\u0240\n\"\3\"\5\"\u0243\n\"\3\"\5\"\u0246\n\"\3\"\5")
        buf.write("\"\u0249\n\"\3\"\5\"\u024c\n\"\3\"\5\"\u024f\n\"\3\"\5")
        buf.write("\"\u0252\n\"\3\"\5\"\u0255\n\"\3\"\5\"\u0258\n\"\3\"\5")
        buf.write("\"\u025b\n\"\3\"\5\"\u025e\n\"\3\"\3\"\3\"\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\5$\u0273\n$\3$\5")
        buf.write("$\u0276\n$\3$\5$\u0279\n$\3$\3$\5$\u027d\n$\3$\5$\u0280")
        buf.write("\n$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\5&\u0299\n&\3&\5&\u029c\n&\3&\3&\3")
        buf.write("&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\5\'\u02b0\n\'\3\'\5\'\u02b3\n\'\3\'\3\'\5\'\u02b7")
        buf.write("\n\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\5*\u02da\n*\3*\3*\5*\u02de\n*\3*\5*\u02e1\n*\3*\3*\3")
        buf.write("*\3*\3*\5*\u02e8\n*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3,\3,\3,\3,\3,\5,\u02fc\n,\3,\5,\u02ff\n,\3,\5,\u0302")
        buf.write("\n,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\5-\u030f\n-\3-\3")
        buf.write("-\3-\3-\3.\3.\3.\3.\3.\5.\u031a\n.\3.\3.\3.\3.\3.\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\5/\u0328\n/\3/\3/\3/\3\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\38\38\38\38\3")
        buf.write("8\39\39\39\39\39\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3")
        buf.write("<\3<\3<\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3")
        buf.write("@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\3C\3C\3C\3")
        buf.write("C\3C\3D\3D\3D\3D\3D\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3G\3")
        buf.write("G\3G\3G\3G\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3J\3J\3J\3J\3")
        buf.write("J\3K\3K\3K\3K\3K\3L\3L\3L\3L\3L\3M\3M\3M\3M\3M\3N\3N\3")
        buf.write("N\3N\3N\3O\3O\3O\3O\3O\3P\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3")
        buf.write("R\3R\3R\3R\3R\3S\3S\3S\3S\3S\3T\3T\3T\3T\3T\3U\3U\3U\3")
        buf.write("U\3U\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3X\3X\3X\3X\3X\3Y\3")
        buf.write("Y\3Y\3Y\7Y\u040d\nY\fY\16Y\u0410\13Y\3Y\3Y\3Y\3Z\3Z\3")
        buf.write("Z\3Z\3Z\3[\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\3")
        buf.write("]\3]\3^\3^\3^\3^\3^\3_\3_\3_\3_\3_\3`\3`\3`\3`\3`\3a\3")
        buf.write("a\3a\3a\3a\3b\3b\3b\7b\u0440\nb\fb\16b\u0443\13b\3b\3")
        buf.write("b\3c\3c\3c\3c\7c\u044b\nc\fc\16c\u044e\13c\3c\3c\3d\3")
        buf.write("d\3d\7d\u0455\nd\fd\16d\u0458\13d\3d\3d\3e\3e\3e\3e\3")
        buf.write("e\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3h\3h\3h\3h\3h\3i\3i\3")
        buf.write("i\3i\3i\3j\3j\3j\3j\3j\3k\3k\3k\3k\3k\3l\3l\3l\3l\3l\3")
        buf.write("m\3m\3m\3m\3m\3n\3n\3n\3n\3n\3o\3o\3o\3o\5o\u0492\no\3")
        buf.write("o\5o\u0495\no\3o\5o\u0498\no\3o\5o\u049b\no\3o\5o\u049e")
        buf.write("\no\3o\5o\u04a1\no\3o\5o\u04a4\no\3o\5o\u04a7\no\3o\5")
        buf.write("o\u04aa\no\3o\3o\3o\3p\3p\3p\3p\3p\3q\3q\3q\3q\3q\3r\3")
        buf.write("r\3r\3r\3r\3s\3s\3s\3s\3s\3t\3t\3t\3t\3t\3u\3u\3u\3u\3")
        buf.write("u\3v\3v\3v\3v\3v\3w\3w\3w\3w\7w\u04d6\nw\fw\16w\u04d9")
        buf.write("\13w\3w\3w\3w\3x\3x\3x\3x\5x\u04e2\nx\3x\5x\u04e5\nx\3")
        buf.write("x\5x\u04e8\nx\3x\5x\u04eb\nx\3x\5x\u04ee\nx\3x\5x\u04f1")
        buf.write("\nx\3x\5x\u04f4\nx\3x\3x\3x\3y\3y\3y\3y\3y\3z\3z\3z\3")
        buf.write("z\3z\3{\3{\3{\3{\3{\3|\3|\3|\3|\3|\3}\3}\3}\3}\3}\3~\3")
        buf.write("~\3~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\5\u0085\u0541\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\7\u0094\u058d\n\u0094\f\u0094\16\u0094\u0590\13\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097")
        buf.write("\7\u0097\u05a0\n\u0097\f\u0097\16\u0097\u05a3\13\u0097")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\7\u0099\u05cd")
        buf.write("\n\u0099\f\u0099\16\u0099\u05d0\13\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\5\u0099\u05d5\n\u0099\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\7\u009d\u05ea\n\u009d\f\u009d\16\u009d")
        buf.write("\u05ed\13\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\7\u009e\u05f6\n\u009e\f\u009e\16\u009e")
        buf.write("\u05f9\13\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\2\2\u00a3\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6")
        buf.write("\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108")
        buf.write("\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a")
        buf.write("\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c")
        buf.write("\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e")
        buf.write("\u0140\u0142\2\4\3\2\u0082\u0083\4\2zz\u0082\u0084\2\u05d2")
        buf.write("\2\u0144\3\2\2\2\4\u0146\3\2\2\2\6\u014e\3\2\2\2\b\u0153")
        buf.write("\3\2\2\2\n\u0159\3\2\2\2\f\u015e\3\2\2\2\16\u0193\3\2")
        buf.write("\2\2\20\u0199\3\2\2\2\22\u019e\3\2\2\2\24\u01a3\3\2\2")
        buf.write("\2\26\u01a8\3\2\2\2\30\u01ad\3\2\2\2\32\u01b2\3\2\2\2")
        buf.write("\34\u01b7\3\2\2\2\36\u01bc\3\2\2\2 \u01c1\3\2\2\2\"\u01c6")
        buf.write("\3\2\2\2$\u01cb\3\2\2\2&\u01d0\3\2\2\2(\u01d5\3\2\2\2")
        buf.write("*\u01da\3\2\2\2,\u01df\3\2\2\2.\u01e4\3\2\2\2\60\u01e9")
        buf.write("\3\2\2\2\62\u01ee\3\2\2\2\64\u01f3\3\2\2\2\66\u01f8\3")
        buf.write("\2\2\28\u01fd\3\2\2\2:\u0201\3\2\2\2<\u020d\3\2\2\2>\u0220")
        buf.write("\3\2\2\2@\u022b\3\2\2\2B\u023a\3\2\2\2D\u0262\3\2\2\2")
        buf.write("F\u026c\3\2\2\2H\u0284\3\2\2\2J\u028e\3\2\2\2L\u02a3\3")
        buf.write("\2\2\2N\u02bd\3\2\2\2P\u02c8\3\2\2\2R\u02d2\3\2\2\2T\u02ec")
        buf.write("\3\2\2\2V\u02f6\3\2\2\2X\u0307\3\2\2\2Z\u0314\3\2\2\2")
        buf.write("\\\u0320\3\2\2\2^\u032c\3\2\2\2`\u0335\3\2\2\2b\u033e")
        buf.write("\3\2\2\2d\u034a\3\2\2\2f\u034f\3\2\2\2h\u0354\3\2\2\2")
        buf.write("j\u0359\3\2\2\2l\u035e\3\2\2\2n\u0363\3\2\2\2p\u0368\3")
        buf.write("\2\2\2r\u036d\3\2\2\2t\u0372\3\2\2\2v\u0377\3\2\2\2x\u037c")
        buf.write("\3\2\2\2z\u0381\3\2\2\2|\u0386\3\2\2\2~\u038b\3\2\2\2")
        buf.write("\u0080\u0390\3\2\2\2\u0082\u0395\3\2\2\2\u0084\u039a\3")
        buf.write("\2\2\2\u0086\u039f\3\2\2\2\u0088\u03a4\3\2\2\2\u008a\u03a9")
        buf.write("\3\2\2\2\u008c\u03ae\3\2\2\2\u008e\u03b3\3\2\2\2\u0090")
        buf.write("\u03b8\3\2\2\2\u0092\u03bd\3\2\2\2\u0094\u03c2\3\2\2\2")
        buf.write("\u0096\u03c7\3\2\2\2\u0098\u03cc\3\2\2\2\u009a\u03d1\3")
        buf.write("\2\2\2\u009c\u03d6\3\2\2\2\u009e\u03db\3\2\2\2\u00a0\u03e0")
        buf.write("\3\2\2\2\u00a2\u03e5\3\2\2\2\u00a4\u03ea\3\2\2\2\u00a6")
        buf.write("\u03ef\3\2\2\2\u00a8\u03f4\3\2\2\2\u00aa\u03f9\3\2\2\2")
        buf.write("\u00ac\u03fe\3\2\2\2\u00ae\u0403\3\2\2\2\u00b0\u0408\3")
        buf.write("\2\2\2\u00b2\u0414\3\2\2\2\u00b4\u0419\3\2\2\2\u00b6\u041e")
        buf.write("\3\2\2\2\u00b8\u0423\3\2\2\2\u00ba\u0428\3\2\2\2\u00bc")
        buf.write("\u042d\3\2\2\2\u00be\u0432\3\2\2\2\u00c0\u0437\3\2\2\2")
        buf.write("\u00c2\u043c\3\2\2\2\u00c4\u0446\3\2\2\2\u00c6\u0451\3")
        buf.write("\2\2\2\u00c8\u045b\3\2\2\2\u00ca\u0460\3\2\2\2\u00cc\u0465")
        buf.write("\3\2\2\2\u00ce\u046a\3\2\2\2\u00d0\u046f\3\2\2\2\u00d2")
        buf.write("\u0474\3\2\2\2\u00d4\u0479\3\2\2\2\u00d6\u047e\3\2\2\2")
        buf.write("\u00d8\u0483\3\2\2\2\u00da\u0488\3\2\2\2\u00dc\u048d\3")
        buf.write("\2\2\2\u00de\u04ae\3\2\2\2\u00e0\u04b3\3\2\2\2\u00e2\u04b8")
        buf.write("\3\2\2\2\u00e4\u04bd\3\2\2\2\u00e6\u04c2\3\2\2\2\u00e8")
        buf.write("\u04c7\3\2\2\2\u00ea\u04cc\3\2\2\2\u00ec\u04d1\3\2\2\2")
        buf.write("\u00ee\u04dd\3\2\2\2\u00f0\u04f8\3\2\2\2\u00f2\u04fd\3")
        buf.write("\2\2\2\u00f4\u0502\3\2\2\2\u00f6\u0507\3\2\2\2\u00f8\u050c")
        buf.write("\3\2\2\2\u00fa\u0511\3\2\2\2\u00fc\u0516\3\2\2\2\u00fe")
        buf.write("\u051b\3\2\2\2\u0100\u0520\3\2\2\2\u0102\u0525\3\2\2\2")
        buf.write("\u0104\u052a\3\2\2\2\u0106\u052f\3\2\2\2\u0108\u0540\3")
        buf.write("\2\2\2\u010a\u0542\3\2\2\2\u010c\u0547\3\2\2\2\u010e\u054c")
        buf.write("\3\2\2\2\u0110\u0551\3\2\2\2\u0112\u0556\3\2\2\2\u0114")
        buf.write("\u055b\3\2\2\2\u0116\u0560\3\2\2\2\u0118\u0565\3\2\2\2")
        buf.write("\u011a\u056a\3\2\2\2\u011c\u056f\3\2\2\2\u011e\u0574\3")
        buf.write("\2\2\2\u0120\u0579\3\2\2\2\u0122\u057e\3\2\2\2\u0124\u0583")
        buf.write("\3\2\2\2\u0126\u0588\3\2\2\2\u0128\u0594\3\2\2\2\u012a")
        buf.write("\u0599\3\2\2\2\u012c\u05a1\3\2\2\2\u012e\u05a4\3\2\2\2")
        buf.write("\u0130\u05d4\3\2\2\2\u0132\u05d6\3\2\2\2\u0134\u05db\3")
        buf.write("\2\2\2\u0136\u05e0\3\2\2\2\u0138\u05e5\3\2\2\2\u013a\u05f1")
        buf.write("\3\2\2\2\u013c\u05fd\3\2\2\2\u013e\u0602\3\2\2\2\u0140")
        buf.write("\u0607\3\2\2\2\u0142\u060c\3\2\2\2\u0144\u0145\5\4\3\2")
        buf.write("\u0145\3\3\2\2\2\u0146\u0147\7\3\2\2\u0147\u0148\5\6\4")
        buf.write("\2\u0148\u0149\5\b\5\2\u0149\u014a\5\n\6\2\u014a\u014b")
        buf.write("\5\f\7\2\u014b\u014c\5\16\b\2\u014c\u014d\7\4\2\2\u014d")
        buf.write("\5\3\2\2\2\u014e\u014f\7\5\2\2\u014f\u0150\7\6\2\2\u0150")
        buf.write("\u0151\7z\2\2\u0151\u0152\7\7\2\2\u0152\7\3\2\2\2\u0153")
        buf.write("\u0154\7v\2\2\u0154\u0155\7\6\2\2\u0155\u0156\7\3\2\2")
        buf.write("\u0156\u0157\7\4\2\2\u0157\u0158\7\7\2\2\u0158\t\3\2\2")
        buf.write("\2\u0159\u015a\7\b\2\2\u015a\u015b\7\6\2\2\u015b\u015c")
        buf.write("\7z\2\2\u015c\u015d\7\7\2\2\u015d\13\3\2\2\2\u015e\u015f")
        buf.write("\7x\2\2\u015f\u0160\7\6\2\2\u0160\u0162\7\3\2\2\u0161")
        buf.write("\u0163\5\20\t\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2")
        buf.write("\2\u0163\u0164\3\2\2\2\u0164\u0166\5\22\n\2\u0165\u0167")
        buf.write("\5\24\13\2\u0166\u0165\3\2\2\2\u0166\u0167\3\2\2\2\u0167")
        buf.write("\u0169\3\2\2\2\u0168\u016a\5\26\f\2\u0169\u0168\3\2\2")
        buf.write("\2\u0169\u016a\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016c")
        buf.write("\5\30\r\2\u016c\u016d\5\32\16\2\u016d\u016f\5\34\17\2")
        buf.write("\u016e\u0170\5\36\20\2\u016f\u016e\3\2\2\2\u016f\u0170")
        buf.write("\3\2\2\2\u0170\u0172\3\2\2\2\u0171\u0173\5 \21\2\u0172")
        buf.write("\u0171\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174\3\2\2\2")
        buf.write("\u0174\u0176\5\"\22\2\u0175\u0177\5$\23\2\u0176\u0175")
        buf.write("\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179\3\2\2\2\u0178")
        buf.write("\u017a\5&\24\2\u0179\u0178\3\2\2\2\u0179\u017a\3\2\2\2")
        buf.write("\u017a\u017c\3\2\2\2\u017b\u017d\5(\25\2\u017c\u017b\3")
        buf.write("\2\2\2\u017c\u017d\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u0180")
        buf.write("\5*\26\2\u017f\u0181\5,\27\2\u0180\u017f\3\2\2\2\u0180")
        buf.write("\u0181\3\2\2\2\u0181\u0183\3\2\2\2\u0182\u0184\5.\30\2")
        buf.write("\u0183\u0182\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\3")
        buf.write("\2\2\2\u0185\u0186\5\60\31\2\u0186\u0188\5\62\32\2\u0187")
        buf.write("\u0189\5\64\33\2\u0188\u0187\3\2\2\2\u0188\u0189\3\2\2")
        buf.write("\2\u0189\u018b\3\2\2\2\u018a\u018c\5\66\34\2\u018b\u018a")
        buf.write("\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018e\3\2\2\2\u018d")
        buf.write("\u018f\58\35\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2")
        buf.write("\u018f\u0190\3\2\2\2\u0190\u0191\7\4\2\2\u0191\u0192\7")
        buf.write("\7\2\2\u0192\r\3\2\2\2\u0193\u0194\7y\2\2\u0194\u0195")
        buf.write("\7\6\2\2\u0195\u0196\7\u0081\2\2\u0196\u0197\7\7\2\2\u0197")
        buf.write("\17\3\2\2\2\u0198\u019a\5:\36\2\u0199\u0198\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2")
        buf.write("\u019c\21\3\2\2\2\u019d\u019f\5<\37\2\u019e\u019d\3\2")
        buf.write("\2\2\u019f\u01a0\3\2\2\2\u01a0\u019e\3\2\2\2\u01a0\u01a1")
        buf.write("\3\2\2\2\u01a1\23\3\2\2\2\u01a2\u01a4\5> \2\u01a3\u01a2")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5")
        buf.write("\u01a6\3\2\2\2\u01a6\25\3\2\2\2\u01a7\u01a9\5@!\2\u01a8")
        buf.write("\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01a8\3\2\2\2")
        buf.write("\u01aa\u01ab\3\2\2\2\u01ab\27\3\2\2\2\u01ac\u01ae\5B\"")
        buf.write("\2\u01ad\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01ad")
        buf.write("\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\31\3\2\2\2\u01b1\u01b3")
        buf.write("\5D#\2\u01b2\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b2")
        buf.write("\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\33\3\2\2\2\u01b6\u01b8")
        buf.write("\5F$\2\u01b7\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01b7")
        buf.write("\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\35\3\2\2\2\u01bb\u01bd")
        buf.write("\5H%\2\u01bc\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bc")
        buf.write("\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\37\3\2\2\2\u01c0\u01c2")
        buf.write("\5J&\2\u01c1\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c1")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4!\3\2\2\2\u01c5\u01c7")
        buf.write("\5L\'\2\u01c6\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8")
        buf.write("\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9#\3\2\2\2\u01ca")
        buf.write("\u01cc\5N(\2\u01cb\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd")
        buf.write("\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce%\3\2\2\2\u01cf")
        buf.write("\u01d1\5P)\2\u01d0\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2")
        buf.write("\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\'\3\2\2\2\u01d4")
        buf.write("\u01d6\5R*\2\u01d5\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7")
        buf.write("\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8)\3\2\2\2\u01d9")
        buf.write("\u01db\5T+\2\u01da\u01d9\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc")
        buf.write("\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd+\3\2\2\2\u01de")
        buf.write("\u01e0\5V,\2\u01df\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1")
        buf.write("\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2-\3\2\2\2\u01e3")
        buf.write("\u01e5\5X-\2\u01e4\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7/\3\2\2\2\u01e8")
        buf.write("\u01ea\5Z.\2\u01e9\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb")
        buf.write("\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\61\3\2\2\2\u01ed")
        buf.write("\u01ef\5\\/\2\u01ee\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2")
        buf.write("\u01f0\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\63\3\2")
        buf.write("\2\2\u01f2\u01f4\5^\60\2\u01f3\u01f2\3\2\2\2\u01f4\u01f5")
        buf.write("\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6")
        buf.write("\65\3\2\2\2\u01f7\u01f9\5`\61\2\u01f8\u01f7\3\2\2\2\u01f9")
        buf.write("\u01fa\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2")
        buf.write("\u01fb\67\3\2\2\2\u01fc\u01fe\5b\62\2\u01fd\u01fc\3\2")
        buf.write("\2\2\u01fe\u01ff\3\2\2\2\u01ff\u01fd\3\2\2\2\u01ff\u0200")
        buf.write("\3\2\2\2\u02009\3\2\2\2\u0201\u0202\7\u0081\2\2\u0202")
        buf.write("\u0203\7\6\2\2\u0203\u0204\7\3\2\2\u0204\u0205\5d\63\2")
        buf.write("\u0205\u0206\5\u00c8e\2\u0206\u0207\5\u00caf\2\u0207\u0208")
        buf.write("\5\u00ceh\2\u0208\u0209\5\u00b6\\\2\u0209\u020a\5\u00d0")
        buf.write("i\2\u020a\u020b\7\4\2\2\u020b\u020c\7\7\2\2\u020c;\3\2")
        buf.write("\2\2\u020d\u020e\7\u0081\2\2\u020e\u020f\7\6\2\2\u020f")
        buf.write("\u0210\7\3\2\2\u0210\u0212\5f\64\2\u0211\u0213\5\u008e")
        buf.write("H\2\u0212\u0211\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215")
        buf.write("\3\2\2\2\u0214\u0216\5\u00a8U\2\u0215\u0214\3\2\2\2\u0215")
        buf.write("\u0216\3\2\2\2\u0216\u0218\3\2\2\2\u0217\u0219\5\u0090")
        buf.write("I\2\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b")
        buf.write("\3\2\2\2\u021a\u021c\5\u0138\u009d\2\u021b\u021a\3\2\2")
        buf.write("\2\u021b\u021c\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021e")
        buf.write("\7\4\2\2\u021e\u021f\7\7\2\2\u021f=\3\2\2\2\u0220\u0221")
        buf.write("\7\u0081\2\2\u0221\u0222\7\6\2\2\u0222\u0223\7\3\2\2\u0223")
        buf.write("\u0224\5h\65\2\u0224\u0225\5\u0092J\2\u0225\u0226\5\u0094")
        buf.write("K\2\u0226\u0227\5\u0096L\2\u0227\u0228\5\u0098M\2\u0228")
        buf.write("\u0229\7\4\2\2\u0229\u022a\7\7\2\2\u022a?\3\2\2\2\u022b")
        buf.write("\u022c\7\u0081\2\2\u022c\u022d\7\6\2\2\u022d\u022e\7\3")
        buf.write("\2\2\u022e\u022f\5j\66\2\u022f\u0230\5\u00bc_\2\u0230")
        buf.write("\u0231\5\u0128\u0095\2\u0231\u0232\5\u012a\u0096\2\u0232")
        buf.write("\u0234\5\u00be`\2\u0233\u0235\5\u00b6\\\2\u0234\u0233")
        buf.write("\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u0237\5\u00c0a\2\u0237\u0238\7\4\2\2\u0238\u0239\7\7")
        buf.write("\2\2\u0239A\3\2\2\2\u023a\u023b\7\u0081\2\2\u023b\u023c")
        buf.write("\7\6\2\2\u023c\u023d\7\3\2\2\u023d\u023f\5l\67\2\u023e")
        buf.write("\u0240\5\u009cO\2\u023f\u023e\3\2\2\2\u023f\u0240\3\2")
        buf.write("\2\2\u0240\u0242\3\2\2\2\u0241\u0243\5\u009aN\2\u0242")
        buf.write("\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0245\3\2\2\2")
        buf.write("\u0244\u0246\5\u00a0Q\2\u0245\u0244\3\2\2\2\u0245\u0246")
        buf.write("\3\2\2\2\u0246\u0248\3\2\2\2\u0247\u0249\5\u009eP\2\u0248")
        buf.write("\u0247\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024b\3\2\2\2")
        buf.write("\u024a\u024c\5\u00d6l\2\u024b\u024a\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u024e\3\2\2\2\u024d\u024f\5\u00b6\\\2\u024e")
        buf.write("\u024d\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0251\3\2\2\2")
        buf.write("\u0250\u0252\5\u00b8]\2\u0251\u0250\3\2\2\2\u0251\u0252")
        buf.write("\3\2\2\2\u0252\u0254\3\2\2\2\u0253\u0255\5\u00dan\2\u0254")
        buf.write("\u0253\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0257\3\2\2\2")
        buf.write("\u0256\u0258\5\u00ba^\2\u0257\u0256\3\2\2\2\u0257\u0258")
        buf.write("\3\2\2\2\u0258\u025a\3\2\2\2\u0259\u025b\5\u00d8m\2\u025a")
        buf.write("\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025d\3\2\2\2")
        buf.write("\u025c\u025e\5\u00a6T\2\u025d\u025c\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260\7\4\2\2\u0260")
        buf.write("\u0261\7\7\2\2\u0261C\3\2\2\2\u0262\u0263\7\u0081\2\2")
        buf.write("\u0263\u0264\7\6\2\2\u0264\u0265\7\3\2\2\u0265\u0266\5")
        buf.write("n8\2\u0266\u0267\5\u00bc_\2\u0267\u0268\5\u00be`\2\u0268")
        buf.write("\u0269\5\u00c0a\2\u0269\u026a\7\4\2\2\u026a\u026b\7\7")
        buf.write("\2\2\u026bE\3\2\2\2\u026c\u026d\7\u0081\2\2\u026d\u026e")
        buf.write("\7\6\2\2\u026e\u026f\7\3\2\2\u026f\u0270\5p9\2\u0270\u0272")
        buf.write("\5\u00aaV\2\u0271\u0273\5\u00a2R\2\u0272\u0271\3\2\2\2")
        buf.write("\u0272\u0273\3\2\2\2\u0273\u0275\3\2\2\2\u0274\u0276\5")
        buf.write("\u00b6\\\2\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2\2\u0276")
        buf.write("\u0278\3\2\2\2\u0277\u0279\5\u00b8]\2\u0278\u0277\3\2")
        buf.write("\2\2\u0278\u0279\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027c")
        buf.write("\5\u00ba^\2\u027b\u027d\5\u00a4S\2\u027c\u027b\3\2\2\2")
        buf.write("\u027c\u027d\3\2\2\2\u027d\u027f\3\2\2\2\u027e\u0280\5")
        buf.write("\u00a6T\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0282\7\4\2\2\u0282\u0283\7\7\2\2")
        buf.write("\u0283G\3\2\2\2\u0284\u0285\7\u0081\2\2\u0285\u0286\7")
        buf.write("\6\2\2\u0286\u0287\7\3\2\2\u0287\u0288\5r:\2\u0288\u0289")
        buf.write("\5\u00bc_\2\u0289\u028a\5\u00be`\2\u028a\u028b\5\u00c0")
        buf.write("a\2\u028b\u028c\7\4\2\2\u028c\u028d\7\7\2\2\u028dI\3\2")
        buf.write("\2\2\u028e\u028f\7\u0081\2\2\u028f\u0290\7\6\2\2\u0290")
        buf.write("\u0291\7\3\2\2\u0291\u0292\5t;\2\u0292\u0293\5\u00c8e")
        buf.write("\2\u0293\u0294\5\u00caf\2\u0294\u0295\5\u00ccg\2\u0295")
        buf.write("\u0296\5\u00ceh\2\u0296\u0298\5\u00b6\\\2\u0297\u0299")
        buf.write("\5\u00acW\2\u0298\u0297\3\2\2\2\u0298\u0299\3\2\2\2\u0299")
        buf.write("\u029b\3\2\2\2\u029a\u029c\5\u00b4[\2\u029b\u029a\3\2")
        buf.write("\2\2\u029b\u029c\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029e")
        buf.write("\5\u00d0i\2\u029e\u029f\5\u00d2j\2\u029f\u02a0\5\u00d4")
        buf.write("k\2\u02a0\u02a1\7\4\2\2\u02a1\u02a2\7\7\2\2\u02a2K\3\2")
        buf.write("\2\2\u02a3\u02a4\7\u0081\2\2\u02a4\u02a5\7\6\2\2\u02a5")
        buf.write("\u02a6\7\3\2\2\u02a6\u02a7\5v<\2\u02a7\u02a8\5\u00dco")
        buf.write("\2\u02a8\u02a9\5\u00c8e\2\u02a9\u02aa\5\u00f8}\2\u02aa")
        buf.write("\u02ab\5\u00fa~\2\u02ab\u02ac\5\u00fc\177\2\u02ac\u02ad")
        buf.write("\5\u00fe\u0080\2\u02ad\u02af\5\u0100\u0081\2\u02ae\u02b0")
        buf.write("\5\u0104\u0083\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2")
        buf.write("\2\u02b0\u02b2\3\2\2\2\u02b1\u02b3\5\u0102\u0082\2\u02b2")
        buf.write("\u02b1\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b4\3\2\2\2")
        buf.write("\u02b4\u02b6\5\u0106\u0084\2\u02b5\u02b7\5\u0108\u0085")
        buf.write("\2\u02b6\u02b5\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b8")
        buf.write("\3\2\2\2\u02b8\u02b9\5\u010a\u0086\2\u02b9\u02ba\5\u010c")
        buf.write("\u0087\2\u02ba\u02bb\7\4\2\2\u02bb\u02bc\7\7\2\2\u02bc")
        buf.write("M\3\2\2\2\u02bd\u02be\7\u0081\2\2\u02be\u02bf\7\6\2\2")
        buf.write("\u02bf\u02c0\7\3\2\2\u02c0\u02c1\5x=\2\u02c1\u02c2\5\u0120")
        buf.write("\u0091\2\u02c2\u02c3\5\u00b8]\2\u02c3\u02c4\5\u0122\u0092")
        buf.write("\2\u02c4\u02c5\5\u00ba^\2\u02c5\u02c6\7\4\2\2\u02c6\u02c7")
        buf.write("\7\7\2\2\u02c7O\3\2\2\2\u02c8\u02c9\7\u0081\2\2\u02c9")
        buf.write("\u02ca\7\6\2\2\u02ca\u02cb\7\3\2\2\u02cb\u02cc\5z>\2\u02cc")
        buf.write("\u02cd\5\u00bc_\2\u02cd\u02ce\5\u00be`\2\u02ce\u02cf\5")
        buf.write("\u00c0a\2\u02cf\u02d0\7\4\2\2\u02d0\u02d1\7\7\2\2\u02d1")
        buf.write("Q\3\2\2\2\u02d2\u02d3\7\u0081\2\2\u02d3\u02d4\7\6\2\2")
        buf.write("\u02d4\u02d5\7\3\2\2\u02d5\u02d6\5|?\2\u02d6\u02d7\5\u00bc")
        buf.write("_\2\u02d7\u02d9\5\u00be`\2\u02d8\u02da\5\u010e\u0088\2")
        buf.write("\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\3")
        buf.write("\2\2\2\u02db\u02dd\5\u0110\u0089\2\u02dc\u02de\5\u00b6")
        buf.write("\\\2\u02dd\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02e0")
        buf.write("\3\2\2\2\u02df\u02e1\5\u0112\u008a\2\u02e0\u02df\3\2\2")
        buf.write("\2\u02e0\u02e1\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3")
        buf.write("\5\u0114\u008b\2\u02e3\u02e4\5\u00c0a\2\u02e4\u02e5\5")
        buf.write("\u0116\u008c\2\u02e5\u02e7\5\u0118\u008d\2\u02e6\u02e8")
        buf.write("\5\u011a\u008e\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8\3\2\2")
        buf.write("\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\7\4\2\2\u02ea\u02eb")
        buf.write("\7\7\2\2\u02ebS\3\2\2\2\u02ec\u02ed\7\u0081\2\2\u02ed")
        buf.write("\u02ee\7\6\2\2\u02ee\u02ef\7\3\2\2\u02ef\u02f0\5~@\2\u02f0")
        buf.write("\u02f1\5\u00bc_\2\u02f1\u02f2\5\u00be`\2\u02f2\u02f3\5")
        buf.write("\u00c0a\2\u02f3\u02f4\7\4\2\2\u02f4\u02f5\7\7\2\2\u02f5")
        buf.write("U\3\2\2\2\u02f6\u02f7\7\u0081\2\2\u02f7\u02f8\7\6\2\2")
        buf.write("\u02f8\u02f9\7\3\2\2\u02f9\u02fb\5\u0080A\2\u02fa\u02fc")
        buf.write("\5\u00b6\\\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc")
        buf.write("\u02fe\3\2\2\2\u02fd\u02ff\5\u00a8U\2\u02fe\u02fd\3\2")
        buf.write("\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0301\3\2\2\2\u0300\u0302")
        buf.write("\5\u011c\u008f\2\u0301\u0300\3\2\2\2\u0301\u0302\3\2\2")
        buf.write("\2\u0302\u0303\3\2\2\2\u0303\u0304\5\u011e\u0090\2\u0304")
        buf.write("\u0305\7\4\2\2\u0305\u0306\7\7\2\2\u0306W\3\2\2\2\u0307")
        buf.write("\u0308\7\u0081\2\2\u0308\u0309\7\6\2\2\u0309\u030a\7\3")
        buf.write("\2\2\u030a\u030b\5\u0082B\2\u030b\u030c\5\u00aaV\2\u030c")
        buf.write("\u030e\5\u00b6\\\2\u030d\u030f\5\u00b8]\2\u030e\u030d")
        buf.write("\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write("\u0311\5\u00ba^\2\u0311\u0312\7\4\2\2\u0312\u0313\7\7")
        buf.write("\2\2\u0313Y\3\2\2\2\u0314\u0315\7\u0081\2\2\u0315\u0316")
        buf.write("\7\6\2\2\u0316\u0317\7\3\2\2\u0317\u0319\5\u0084C\2\u0318")
        buf.write("\u031a\5\u0124\u0093\2\u0319\u0318\3\2\2\2\u0319\u031a")
        buf.write("\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c\5\u0126\u0094")
        buf.write("\2\u031c\u031d\5\u00b6\\\2\u031d\u031e\7\4\2\2\u031e\u031f")
        buf.write("\7\7\2\2\u031f[\3\2\2\2\u0320\u0321\7\u0081\2\2\u0321")
        buf.write("\u0322\7\6\2\2\u0322\u0323\7\3\2\2\u0323\u0324\5\u0086")
        buf.write("D\2\u0324\u0325\5\u0132\u009a\2\u0325\u0327\5\u0134\u009b")
        buf.write("\2\u0326\u0328\5\u0136\u009c\2\u0327\u0326\3\2\2\2\u0327")
        buf.write("\u0328\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032a\7\4\2\2")
        buf.write("\u032a\u032b\7\7\2\2\u032b]\3\2\2\2\u032c\u032d\7\u0081")
        buf.write("\2\2\u032d\u032e\7\6\2\2\u032e\u032f\7\3\2\2\u032f\u0330")
        buf.write("\5\u0088E\2\u0330\u0331\5\u00aeX\2\u0331\u0332\5\u00b0")
        buf.write("Y\2\u0332\u0333\7\4\2\2\u0333\u0334\7\7\2\2\u0334_\3\2")
        buf.write("\2\2\u0335\u0336\7\u0081\2\2\u0336\u0337\7\6\2\2\u0337")
        buf.write("\u0338\7\3\2\2\u0338\u0339\5\u008aF\2\u0339\u033a\5\u00b2")
        buf.write("Z\2\u033a\u033b\5\u00d0i\2\u033b\u033c\7\4\2\2\u033c\u033d")
        buf.write("\7\7\2\2\u033da\3\2\2\2\u033e\u033f\7\u0081\2\2\u033f")
        buf.write("\u0340\7\6\2\2\u0340\u0341\7\3\2\2\u0341\u0342\5\u008c")
        buf.write("G\2\u0342\u0343\5\u00aaV\2\u0343\u0344\5\u013c\u009f\2")
        buf.write("\u0344\u0345\5\u00b8]\2\u0345\u0346\5\u00ba^\2\u0346\u0347")
        buf.write("\5\u013e\u00a0\2\u0347\u0348\7\4\2\2\u0348\u0349\7\7\2")
        buf.write("\2\u0349c\3\2\2\2\u034a\u034b\7w\2\2\u034b\u034c\7\6\2")
        buf.write("\2\u034c\u034d\7\t\2\2\u034d\u034e\7\7\2\2\u034ee\3\2")
        buf.write("\2\2\u034f\u0350\7w\2\2\u0350\u0351\7\6\2\2\u0351\u0352")
        buf.write("\7\n\2\2\u0352\u0353\7\7\2\2\u0353g\3\2\2\2\u0354\u0355")
        buf.write("\7w\2\2\u0355\u0356\7\6\2\2\u0356\u0357\7\13\2\2\u0357")
        buf.write("\u0358\7\7\2\2\u0358i\3\2\2\2\u0359\u035a\7w\2\2\u035a")
        buf.write("\u035b\7\6\2\2\u035b\u035c\7\f\2\2\u035c\u035d\7\7\2\2")
        buf.write("\u035dk\3\2\2\2\u035e\u035f\7w\2\2\u035f\u0360\7\6\2\2")
        buf.write("\u0360\u0361\7\r\2\2\u0361\u0362\7\7\2\2\u0362m\3\2\2")
        buf.write("\2\u0363\u0364\7w\2\2\u0364\u0365\7\6\2\2\u0365\u0366")
        buf.write("\7\16\2\2\u0366\u0367\7\7\2\2\u0367o\3\2\2\2\u0368\u0369")
        buf.write("\7w\2\2\u0369\u036a\7\6\2\2\u036a\u036b\7\17\2\2\u036b")
        buf.write("\u036c\7\7\2\2\u036cq\3\2\2\2\u036d\u036e\7w\2\2\u036e")
        buf.write("\u036f\7\6\2\2\u036f\u0370\7\20\2\2\u0370\u0371\7\7\2")
        buf.write("\2\u0371s\3\2\2\2\u0372\u0373\7w\2\2\u0373\u0374\7\6\2")
        buf.write("\2\u0374\u0375\7\21\2\2\u0375\u0376\7\7\2\2\u0376u\3\2")
        buf.write("\2\2\u0377\u0378\7w\2\2\u0378\u0379\7\6\2\2\u0379\u037a")
        buf.write("\7\22\2\2\u037a\u037b\7\7\2\2\u037bw\3\2\2\2\u037c\u037d")
        buf.write("\7w\2\2\u037d\u037e\7\6\2\2\u037e\u037f\7\23\2\2\u037f")
        buf.write("\u0380\7\7\2\2\u0380y\3\2\2\2\u0381\u0382\7w\2\2\u0382")
        buf.write("\u0383\7\6\2\2\u0383\u0384\7\24\2\2\u0384\u0385\7\7\2")
        buf.write("\2\u0385{\3\2\2\2\u0386\u0387\7w\2\2\u0387\u0388\7\6\2")
        buf.write("\2\u0388\u0389\7\25\2\2\u0389\u038a\7\7\2\2\u038a}\3\2")
        buf.write("\2\2\u038b\u038c\7w\2\2\u038c\u038d\7\6\2\2\u038d\u038e")
        buf.write("\7\26\2\2\u038e\u038f\7\7\2\2\u038f\177\3\2\2\2\u0390")
        buf.write("\u0391\7w\2\2\u0391\u0392\7\6\2\2\u0392\u0393\7\27\2\2")
        buf.write("\u0393\u0394\7\7\2\2\u0394\u0081\3\2\2\2\u0395\u0396\7")
        buf.write("w\2\2\u0396\u0397\7\6\2\2\u0397\u0398\7\30\2\2\u0398\u0399")
        buf.write("\7\7\2\2\u0399\u0083\3\2\2\2\u039a\u039b\7w\2\2\u039b")
        buf.write("\u039c\7\6\2\2\u039c\u039d\7\31\2\2\u039d\u039e\7\7\2")
        buf.write("\2\u039e\u0085\3\2\2\2\u039f\u03a0\7w\2\2\u03a0\u03a1")
        buf.write("\7\6\2\2\u03a1\u03a2\7\32\2\2\u03a2\u03a3\7\7\2\2\u03a3")
        buf.write("\u0087\3\2\2\2\u03a4\u03a5\7w\2\2\u03a5\u03a6\7\6\2\2")
        buf.write("\u03a6\u03a7\7\33\2\2\u03a7\u03a8\7\7\2\2\u03a8\u0089")
        buf.write("\3\2\2\2\u03a9\u03aa\7w\2\2\u03aa\u03ab\7\6\2\2\u03ab")
        buf.write("\u03ac\7\34\2\2\u03ac\u03ad\7\7\2\2\u03ad\u008b\3\2\2")
        buf.write("\2\u03ae\u03af\7w\2\2\u03af\u03b0\7\6\2\2\u03b0\u03b1")
        buf.write("\7\35\2\2\u03b1\u03b2\7\7\2\2\u03b2\u008d\3\2\2\2\u03b3")
        buf.write("\u03b4\7\36\2\2\u03b4\u03b5\7\6\2\2\u03b5\u03b6\7\u0081")
        buf.write("\2\2\u03b6\u03b7\7\7\2\2\u03b7\u008f\3\2\2\2\u03b8\u03b9")
        buf.write("\7\37\2\2\u03b9\u03ba\7\6\2\2\u03ba\u03bb\7\u0081\2\2")
        buf.write("\u03bb\u03bc\7\7\2\2\u03bc\u0091\3\2\2\2\u03bd\u03be\7")
        buf.write(" \2\2\u03be\u03bf\7\6\2\2\u03bf\u03c0\7\u0081\2\2\u03c0")
        buf.write("\u03c1\7\7\2\2\u03c1\u0093\3\2\2\2\u03c2\u03c3\7!\2\2")
        buf.write("\u03c3\u03c4\7\6\2\2\u03c4\u03c5\7z\2\2\u03c5\u03c6\7")
        buf.write("\7\2\2\u03c6\u0095\3\2\2\2\u03c7\u03c8\7\"\2\2\u03c8\u03c9")
        buf.write("\7\6\2\2\u03c9\u03ca\7\u0081\2\2\u03ca\u03cb\7\7\2\2\u03cb")
        buf.write("\u0097\3\2\2\2\u03cc\u03cd\7#\2\2\u03cd\u03ce\7\6\2\2")
        buf.write("\u03ce\u03cf\5\u0142\u00a2\2\u03cf\u03d0\7\7\2\2\u03d0")
        buf.write("\u0099\3\2\2\2\u03d1\u03d2\7$\2\2\u03d2\u03d3\7\6\2\2")
        buf.write("\u03d3\u03d4\7z\2\2\u03d4\u03d5\7\7\2\2\u03d5\u009b\3")
        buf.write("\2\2\2\u03d6\u03d7\7%\2\2\u03d7\u03d8\7\6\2\2\u03d8\u03d9")
        buf.write("\5\u0142\u00a2\2\u03d9\u03da\7\7\2\2\u03da\u009d\3\2\2")
        buf.write("\2\u03db\u03dc\7&\2\2\u03dc\u03dd\7\6\2\2\u03dd\u03de")
        buf.write("\5\u0142\u00a2\2\u03de\u03df\7\7\2\2\u03df\u009f\3\2\2")
        buf.write("\2\u03e0\u03e1\7\'\2\2\u03e1\u03e2\7\6\2\2\u03e2\u03e3")
        buf.write("\7z\2\2\u03e3\u03e4\7\7\2\2\u03e4\u00a1\3\2\2\2\u03e5")
        buf.write("\u03e6\7(\2\2\u03e6\u03e7\7\6\2\2\u03e7\u03e8\7z\2\2\u03e8")
        buf.write("\u03e9\7\7\2\2\u03e9\u00a3\3\2\2\2\u03ea\u03eb\7)\2\2")
        buf.write("\u03eb\u03ec\7\6\2\2\u03ec\u03ed\7z\2\2\u03ed\u03ee\7")
        buf.write("\7\2\2\u03ee\u00a5\3\2\2\2\u03ef\u03f0\7*\2\2\u03f0\u03f1")
        buf.write("\7\6\2\2\u03f1\u03f2\7z\2\2\u03f2\u03f3\7\7\2\2\u03f3")
        buf.write("\u00a7\3\2\2\2\u03f4\u03f5\7+\2\2\u03f5\u03f6\7\6\2\2")
        buf.write("\u03f6\u03f7\t\2\2\2\u03f7\u03f8\7\7\2\2\u03f8\u00a9\3")
        buf.write("\2\2\2\u03f9\u03fa\7,\2\2\u03fa\u03fb\7\6\2\2\u03fb\u03fc")
        buf.write("\5\u00c2b\2\u03fc\u03fd\7\7\2\2\u03fd\u00ab\3\2\2\2\u03fe")
        buf.write("\u03ff\7-\2\2\u03ff\u0400\7\6\2\2\u0400\u0401\7\u0082")
        buf.write("\2\2\u0401\u0402\7\7\2\2\u0402\u00ad\3\2\2\2\u0403\u0404")
        buf.write("\7.\2\2\u0404\u0405\7\6\2\2\u0405\u0406\7\u0082\2\2\u0406")
        buf.write("\u0407\7\7\2\2\u0407\u00af\3\2\2\2\u0408\u0409\7/\2\2")
        buf.write("\u0409\u040a\7\6\2\2\u040a\u040e\7\3\2\2\u040b\u040d\5")
        buf.write("\u0130\u0099\2\u040c\u040b\3\2\2\2\u040d\u0410\3\2\2\2")
        buf.write("\u040e\u040c\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411\3")
        buf.write("\2\2\2\u0410\u040e\3\2\2\2\u0411\u0412\7\4\2\2\u0412\u0413")
        buf.write("\7\7\2\2\u0413\u00b1\3\2\2\2\u0414\u0415\7\60\2\2\u0415")
        buf.write("\u0416\7\6\2\2\u0416\u0417\7\u0081\2\2\u0417\u0418\7\7")
        buf.write("\2\2\u0418\u00b3\3\2\2\2\u0419\u041a\7\61\2\2\u041a\u041b")
        buf.write("\7\6\2\2\u041b\u041c\5\u00c2b\2\u041c\u041d\7\7\2\2\u041d")
        buf.write("\u00b5\3\2\2\2\u041e\u041f\7\62\2\2\u041f\u0420\7\6\2")
        buf.write("\2\u0420\u0421\t\2\2\2\u0421\u0422\7\7\2\2\u0422\u00b7")
        buf.write("\3\2\2\2\u0423\u0424\7\63\2\2\u0424\u0425\7\6\2\2\u0425")
        buf.write("\u0426\t\2\2\2\u0426\u0427\7\7\2\2\u0427\u00b9\3\2\2\2")
        buf.write("\u0428\u0429\7\64\2\2\u0429\u042a\7\6\2\2\u042a\u042b")
        buf.write("\t\2\2\2\u042b\u042c\7\7\2\2\u042c\u00bb\3\2\2\2\u042d")
        buf.write("\u042e\7\65\2\2\u042e\u042f\7\6\2\2\u042f\u0430\7z\2\2")
        buf.write("\u0430\u0431\7\7\2\2\u0431\u00bd\3\2\2\2\u0432\u0433\7")
        buf.write("\66\2\2\u0433\u0434\7\6\2\2\u0434\u0435\5\u00c2b\2\u0435")
        buf.write("\u0436\7\7\2\2\u0436\u00bf\3\2\2\2\u0437\u0438\7\67\2")
        buf.write("\2\u0438\u0439\7\6\2\2\u0439\u043a\7z\2\2\u043a\u043b")
        buf.write("\7\7\2\2\u043b\u00c1\3\2\2\2\u043c\u0441\78\2\2\u043d")
        buf.write("\u043e\7\u0081\2\2\u043e\u0440\79\2\2\u043f\u043d\3\2")
        buf.write("\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3\2\2\2\u0441\u0442")
        buf.write("\3\2\2\2\u0442\u0444\3\2\2\2\u0443\u0441\3\2\2\2\u0444")
        buf.write("\u0445\7:\2\2\u0445\u00c3\3\2\2\2\u0446\u044c\78\2\2\u0447")
        buf.write("\u0448\5\u0142\u00a2\2\u0448\u0449\79\2\2\u0449\u044b")
        buf.write("\3\2\2\2\u044a\u0447\3\2\2\2\u044b\u044e\3\2\2\2\u044c")
        buf.write("\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044f\3\2\2\2")
        buf.write("\u044e\u044c\3\2\2\2\u044f\u0450\7:\2\2\u0450\u00c5\3")
        buf.write("\2\2\2\u0451\u0456\78\2\2\u0452\u0453\7\u0083\2\2\u0453")
        buf.write("\u0455\79\2\2\u0454\u0452\3\2\2\2\u0455\u0458\3\2\2\2")
        buf.write("\u0456\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0459\3")
        buf.write("\2\2\2\u0458\u0456\3\2\2\2\u0459\u045a\7:\2\2\u045a\u00c7")
        buf.write("\3\2\2\2\u045b\u045c\7;\2\2\u045c\u045d\7\6\2\2\u045d")
        buf.write("\u045e\7\u0081\2\2\u045e\u045f\7\7\2\2\u045f\u00c9\3\2")
        buf.write("\2\2\u0460\u0461\7<\2\2\u0461\u0462\7\6\2\2\u0462\u0463")
        buf.write("\5\u00c2b\2\u0463\u0464\7\7\2\2\u0464\u00cb\3\2\2\2\u0465")
        buf.write("\u0466\7=\2\2\u0466\u0467\7\6\2\2\u0467\u0468\5\u00c2")
        buf.write("b\2\u0468\u0469\7\7\2\2\u0469\u00cd\3\2\2\2\u046a\u046b")
        buf.write("\7>\2\2\u046b\u046c\7\6\2\2\u046c\u046d\5\u00c2b\2\u046d")
        buf.write("\u046e\7\7\2\2\u046e\u00cf\3\2\2\2\u046f\u0470\7?\2\2")
        buf.write("\u0470\u0471\7\6\2\2\u0471\u0472\5\u0142\u00a2\2\u0472")
        buf.write("\u0473\7\7\2\2\u0473\u00d1\3\2\2\2\u0474\u0475\7@\2\2")
        buf.write("\u0475\u0476\7\6\2\2\u0476\u0477\7\u0081\2\2\u0477\u0478")
        buf.write("\7\7\2\2\u0478\u00d3\3\2\2\2\u0479\u047a\7A\2\2\u047a")
        buf.write("\u047b\7\6\2\2\u047b\u047c\7\u0082\2\2\u047c\u047d\7\7")
        buf.write("\2\2\u047d\u00d5\3\2\2\2\u047e\u047f\7B\2\2\u047f\u0480")
        buf.write("\7\6\2\2\u0480\u0481\7z\2\2\u0481\u0482\7\7\2\2\u0482")
        buf.write("\u00d7\3\2\2\2\u0483\u0484\7C\2\2\u0484\u0485\7\6\2\2")
        buf.write("\u0485\u0486\5\u0142\u00a2\2\u0486\u0487\7\7\2\2\u0487")
        buf.write("\u00d9\3\2\2\2\u0488\u0489\7D\2\2\u0489\u048a\7\6\2\2")
        buf.write("\u048a\u048b\5\u0142\u00a2\2\u048b\u048c\7\7\2\2\u048c")
        buf.write("\u00db\3\2\2\2\u048d\u048e\7E\2\2\u048e\u048f\7\6\2\2")
        buf.write("\u048f\u0491\7\3\2\2\u0490\u0492\5\u0140\u00a1\2\u0491")
        buf.write("\u0490\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0494\3\2\2\2")
        buf.write("\u0493\u0495\5\u00e0q\2\u0494\u0493\3\2\2\2\u0494\u0495")
        buf.write("\3\2\2\2\u0495\u0497\3\2\2\2\u0496\u0498\5\u00dep\2\u0497")
        buf.write("\u0496\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049a\3\2\2\2")
        buf.write("\u0499\u049b\5\u00e2r\2\u049a\u0499\3\2\2\2\u049a\u049b")
        buf.write("\3\2\2\2\u049b\u049d\3\2\2\2\u049c\u049e\5\u00e4s\2\u049d")
        buf.write("\u049c\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0\3\2\2\2")
        buf.write("\u049f\u04a1\5\u00e6t\2\u04a0\u049f\3\2\2\2\u04a0\u04a1")
        buf.write("\3\2\2\2\u04a1\u04a3\3\2\2\2\u04a2\u04a4\5\u00e8u\2\u04a3")
        buf.write("\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6\3\2\2\2")
        buf.write("\u04a5\u04a7\5\u00eav\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7")
        buf.write("\3\2\2\2\u04a7\u04a9\3\2\2\2\u04a8\u04aa\5\u00ecw\2\u04a9")
        buf.write("\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab\3\2\2\2")
        buf.write("\u04ab\u04ac\7\4\2\2\u04ac\u04ad\7\7\2\2\u04ad\u00dd\3")
        buf.write("\2\2\2\u04ae\u04af\7F\2\2\u04af\u04b0\7\6\2\2\u04b0\u04b1")
        buf.write("\7z\2\2\u04b1\u04b2\7\7\2\2\u04b2\u00df\3\2\2\2\u04b3")
        buf.write("\u04b4\7G\2\2\u04b4\u04b5\7\6\2\2\u04b5\u04b6\7\u0083")
        buf.write("\2\2\u04b6\u04b7\7\7\2\2\u04b7\u00e1\3\2\2\2\u04b8\u04b9")
        buf.write("\7H\2\2\u04b9\u04ba\7\6\2\2\u04ba\u04bb\7z\2\2\u04bb\u04bc")
        buf.write("\7\7\2\2\u04bc\u00e3\3\2\2\2\u04bd\u04be\7I\2\2\u04be")
        buf.write("\u04bf\7\6\2\2\u04bf\u04c0\7\u0083\2\2\u04c0\u04c1\7\7")
        buf.write("\2\2\u04c1\u00e5\3\2\2\2\u04c2\u04c3\7J\2\2\u04c3\u04c4")
        buf.write("\7\6\2\2\u04c4\u04c5\7z\2\2\u04c5\u04c6\7\7\2\2\u04c6")
        buf.write("\u00e7\3\2\2\2\u04c7\u04c8\7K\2\2\u04c8\u04c9\7\6\2\2")
        buf.write("\u04c9\u04ca\7z\2\2\u04ca\u04cb\7\7\2\2\u04cb\u00e9\3")
        buf.write("\2\2\2\u04cc\u04cd\7L\2\2\u04cd\u04ce\7\6\2\2\u04ce\u04cf")
        buf.write("\5\u0142\u00a2\2\u04cf\u04d0\7\7\2\2\u04d0\u00eb\3\2\2")
        buf.write("\2\u04d1\u04d2\7M\2\2\u04d2\u04d3\7\6\2\2\u04d3\u04d7")
        buf.write("\7\3\2\2\u04d4\u04d6\5\u00eex\2\u04d5\u04d4\3\2\2\2\u04d6")
        buf.write("\u04d9\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d7\u04d8\3\2\2\2")
        buf.write("\u04d8\u04da\3\2\2\2\u04d9\u04d7\3\2\2\2\u04da\u04db\7")
        buf.write("\4\2\2\u04db\u04dc\7\7\2\2\u04dc\u00ed\3\2\2\2\u04dd\u04de")
        buf.write("\7\u0081\2\2\u04de\u04df\7\6\2\2\u04df\u04e1\7\3\2\2\u04e0")
        buf.write("\u04e2\5\u00f0y\2\u04e1\u04e0\3\2\2\2\u04e1\u04e2\3\2")
        buf.write("\2\2\u04e2\u04e4\3\2\2\2\u04e3\u04e5\5\u00f2z\2\u04e4")
        buf.write("\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e7\3\2\2\2")
        buf.write("\u04e6\u04e8\5\u00f4{\2\u04e7\u04e6\3\2\2\2\u04e7\u04e8")
        buf.write("\3\2\2\2\u04e8\u04ea\3\2\2\2\u04e9\u04eb\5\u00dep\2\u04ea")
        buf.write("\u04e9\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ed\3\2\2\2")
        buf.write("\u04ec\u04ee\5\u00f6|\2\u04ed\u04ec\3\2\2\2\u04ed\u04ee")
        buf.write("\3\2\2\2\u04ee\u04f0\3\2\2\2\u04ef\u04f1\5\u013a\u009e")
        buf.write("\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3")
        buf.write("\3\2\2\2\u04f2\u04f4\5\u00f2z\2\u04f3\u04f2\3\2\2\2\u04f3")
        buf.write("\u04f4\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\7\4\2\2")
        buf.write("\u04f6\u04f7\7\7\2\2\u04f7\u00ef\3\2\2\2\u04f8\u04f9\7")
        buf.write("N\2\2\u04f9\u04fa\7\6\2\2\u04fa\u04fb\7\u0083\2\2\u04fb")
        buf.write("\u04fc\7\7\2\2\u04fc\u00f1\3\2\2\2\u04fd\u04fe\7O\2\2")
        buf.write("\u04fe\u04ff\7\6\2\2\u04ff\u0500\7\u0081\2\2\u0500\u0501")
        buf.write("\7\7\2\2\u0501\u00f3\3\2\2\2\u0502\u0503\7P\2\2\u0503")
        buf.write("\u0504\7\6\2\2\u0504\u0505\7\u0083\2\2\u0505\u0506\7\7")
        buf.write("\2\2\u0506\u00f5\3\2\2\2\u0507\u0508\7Q\2\2\u0508\u0509")
        buf.write("\7\6\2\2\u0509\u050a\7\u0083\2\2\u050a\u050b\7\7\2\2\u050b")
        buf.write("\u00f7\3\2\2\2\u050c\u050d\7R\2\2\u050d\u050e\7\6\2\2")
        buf.write("\u050e\u050f\7\u0082\2\2\u050f\u0510\7\7\2\2\u0510\u00f9")
        buf.write("\3\2\2\2\u0511\u0512\7S\2\2\u0512\u0513\7\6\2\2\u0513")
        buf.write("\u0514\7\u0083\2\2\u0514\u0515\7\7\2\2\u0515\u00fb\3\2")
        buf.write("\2\2\u0516\u0517\7T\2\2\u0517\u0518\7\6\2\2\u0518\u0519")
        buf.write("\7z\2\2\u0519\u051a\7\7\2\2\u051a\u00fd\3\2\2\2\u051b")
        buf.write("\u051c\7U\2\2\u051c\u051d\7\6\2\2\u051d\u051e\5\u00c4")
        buf.write("c\2\u051e\u051f\7\7\2\2\u051f\u00ff\3\2\2\2\u0520\u0521")
        buf.write("\7V\2\2\u0521\u0522\7\6\2\2\u0522\u0523\7\u0081\2\2\u0523")
        buf.write("\u0524\7\7\2\2\u0524\u0101\3\2\2\2\u0525\u0526\7W\2\2")
        buf.write("\u0526\u0527\7\6\2\2\u0527\u0528\7\u0081\2\2\u0528\u0529")
        buf.write("\7\7\2\2\u0529\u0103\3\2\2\2\u052a\u052b\7X\2\2\u052b")
        buf.write("\u052c\7\6\2\2\u052c\u052d\5\u00c2b\2\u052d\u052e\7\7")
        buf.write("\2\2\u052e\u0105\3\2\2\2\u052f\u0530\7Y\2\2\u0530\u0531")
        buf.write("\7\6\2\2\u0531\u0532\t\2\2\2\u0532\u0533\7\7\2\2\u0533")
        buf.write("\u0107\3\2\2\2\u0534\u0535\7Z\2\2\u0535\u0536\7\6\2\2")
        buf.write("\u0536\u0537\5\u0142\u00a2\2\u0537\u0538\7\7\2\2\u0538")
        buf.write("\u0541\3\2\2\2\u0539\u053a\7Z\2\2\u053a\u053b\7\6\2\2")
        buf.write("\u053b\u053c\78\2\2\u053c\u053d\5\u012c\u0097\2\u053d")
        buf.write("\u053e\7:\2\2\u053e\u053f\7\7\2\2\u053f\u0541\3\2\2\2")
        buf.write("\u0540\u0534\3\2\2\2\u0540\u0539\3\2\2\2\u0541\u0109\3")
        buf.write("\2\2\2\u0542\u0543\7[\2\2\u0543\u0544\7\6\2\2\u0544\u0545")
        buf.write("\t\2\2\2\u0545\u0546\7\7\2\2\u0546\u010b\3\2\2\2\u0547")
        buf.write("\u0548\7\\\2\2\u0548\u0549\7\6\2\2\u0549\u054a\5\u00c2")
        buf.write("b\2\u054a\u054b\7\7\2\2\u054b\u010d\3\2\2\2\u054c\u054d")
        buf.write("\7]\2\2\u054d\u054e\7\6\2\2\u054e\u054f\5\u00c4c\2\u054f")
        buf.write("\u0550\7\7\2\2\u0550\u010f\3\2\2\2\u0551\u0552\7^\2\2")
        buf.write("\u0552\u0553\7\6\2\2\u0553\u0554\5\u00c4c\2\u0554\u0555")
        buf.write("\7\7\2\2\u0555\u0111\3\2\2\2\u0556\u0557\7_\2\2\u0557")
        buf.write("\u0558\7\6\2\2\u0558\u0559\5\u00c4c\2\u0559\u055a\7\7")
        buf.write("\2\2\u055a\u0113\3\2\2\2\u055b\u055c\7`\2\2\u055c\u055d")
        buf.write("\7\6\2\2\u055d\u055e\5\u00c4c\2\u055e\u055f\7\7\2\2\u055f")
        buf.write("\u0115\3\2\2\2\u0560\u0561\7a\2\2\u0561\u0562\7\6\2\2")
        buf.write("\u0562\u0563\7\u0083\2\2\u0563\u0564\7\7\2\2\u0564\u0117")
        buf.write("\3\2\2\2\u0565\u0566\7b\2\2\u0566\u0567\7\6\2\2\u0567")
        buf.write("\u0568\t\2\2\2\u0568\u0569\7\7\2\2\u0569\u0119\3\2\2\2")
        buf.write("\u056a\u056b\7c\2\2\u056b\u056c\7\6\2\2\u056c\u056d\7")
        buf.write("z\2\2\u056d\u056e\7\7\2\2\u056e\u011b\3\2\2\2\u056f\u0570")
        buf.write("\7d\2\2\u0570\u0571\7\6\2\2\u0571\u0572\7\u0081\2\2\u0572")
        buf.write("\u0573\7\7\2\2\u0573\u011d\3\2\2\2\u0574\u0575\7e\2\2")
        buf.write("\u0575\u0576\7\6\2\2\u0576\u0577\7\u0081\2\2\u0577\u0578")
        buf.write("\7\7\2\2\u0578\u011f\3\2\2\2\u0579\u057a\7f\2\2\u057a")
        buf.write("\u057b\7\6\2\2\u057b\u057c\5\u0142\u00a2\2\u057c\u057d")
        buf.write("\7\7\2\2\u057d\u0121\3\2\2\2\u057e\u057f\7g\2\2\u057f")
        buf.write("\u0580\7\6\2\2\u0580\u0581\7\u0081\2\2\u0581\u0582\7\7")
        buf.write("\2\2\u0582\u0123\3\2\2\2\u0583\u0584\7h\2\2\u0584\u0585")
        buf.write("\7\6\2\2\u0585\u0586\7\u0081\2\2\u0586\u0587\7\7\2\2\u0587")
        buf.write("\u0125\3\2\2\2\u0588\u0589\7i\2\2\u0589\u058a\7\6\2\2")
        buf.write("\u058a\u058e\7\3\2\2\u058b\u058d\5\u0130\u0099\2\u058c")
        buf.write("\u058b\3\2\2\2\u058d\u0590\3\2\2\2\u058e\u058c\3\2\2\2")
        buf.write("\u058e\u058f\3\2\2\2\u058f\u0591\3\2\2\2\u0590\u058e\3")
        buf.write("\2\2\2\u0591\u0592\7\4\2\2\u0592\u0593\7\7\2\2\u0593\u0127")
        buf.write("\3\2\2\2\u0594\u0595\7j\2\2\u0595\u0596\7\6\2\2\u0596")
        buf.write("\u0597\t\2\2\2\u0597\u0598\7\7\2\2\u0598\u0129\3\2\2\2")
        buf.write("\u0599\u059a\7k\2\2\u059a\u059b\7\6\2\2\u059b\u059c\7")
        buf.write("z\2\2\u059c\u059d\7\7\2\2\u059d\u012b\3\2\2\2\u059e\u05a0")
        buf.write("\5\u012e\u0098\2\u059f\u059e\3\2\2\2\u05a0\u05a3\3\2\2")
        buf.write("\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u012d")
        buf.write("\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a4\u05a5\7\3\2\2\u05a5")
        buf.write("\u05a6\7l\2\2\u05a6\u05a7\7\6\2\2\u05a7\u05a8\7\u0081")
        buf.write("\2\2\u05a8\u05a9\7\7\2\2\u05a9\u05aa\7m\2\2\u05aa\u05ab")
        buf.write("\7\6\2\2\u05ab\u05ac\7\u0081\2\2\u05ac\u05ad\7\7\2\2\u05ad")
        buf.write("\u05ae\7\4\2\2\u05ae\u05af\79\2\2\u05af\u012f\3\2\2\2")
        buf.write("\u05b0\u05b1\5\u0142\u00a2\2\u05b1\u05b2\7\6\2\2\u05b2")
        buf.write("\u05b3\5\u0142\u00a2\2\u05b3\u05b4\7\7\2\2\u05b4\u05d5")
        buf.write("\3\2\2\2\u05b5\u05b6\5\u0142\u00a2\2\u05b6\u05b7\7\6\2")
        buf.write("\2\u05b7\u05b8\7z\2\2\u05b8\u05b9\7\7\2\2\u05b9\u05d5")
        buf.write("\3\2\2\2\u05ba\u05bb\5\u0142\u00a2\2\u05bb\u05bc\7\6\2")
        buf.write("\2\u05bc\u05bd\7|\2\2\u05bd\u05be\7\7\2\2\u05be\u05d5")
        buf.write("\3\2\2\2\u05bf\u05c0\5\u0142\u00a2\2\u05c0\u05c1\7\6\2")
        buf.write("\2\u05c1\u05c2\7\3\2\2\u05c2\u05c3\5\u0130\u0099\2\u05c3")
        buf.write("\u05c4\7\4\2\2\u05c4\u05c5\7\7\2\2\u05c5\u05d5\3\2\2\2")
        buf.write("\u05c6\u05c7\5\u0142\u00a2\2\u05c7\u05c8\7\6\2\2\u05c8")
        buf.write("\u05ce\78\2\2\u05c9\u05ca\5\u0142\u00a2\2\u05ca\u05cb")
        buf.write("\79\2\2\u05cb\u05cd\3\2\2\2\u05cc\u05c9\3\2\2\2\u05cd")
        buf.write("\u05d0\3\2\2\2\u05ce\u05cc\3\2\2\2\u05ce\u05cf\3\2\2\2")
        buf.write("\u05cf\u05d1\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d1\u05d2\7")
        buf.write(":\2\2\u05d2\u05d3\7\7\2\2\u05d3\u05d5\3\2\2\2\u05d4\u05b0")
        buf.write("\3\2\2\2\u05d4\u05b5\3\2\2\2\u05d4\u05ba\3\2\2\2\u05d4")
        buf.write("\u05bf\3\2\2\2\u05d4\u05c6\3\2\2\2\u05d5\u0131\3\2\2\2")
        buf.write("\u05d6\u05d7\7n\2\2\u05d7\u05d8\7\6\2\2\u05d8\u05d9\5")
        buf.write("\u00c2b\2\u05d9\u05da\7\7\2\2\u05da\u0133\3\2\2\2\u05db")
        buf.write("\u05dc\7o\2\2\u05dc\u05dd\7\6\2\2\u05dd\u05de\7z\2\2\u05de")
        buf.write("\u05df\7\7\2\2\u05df\u0135\3\2\2\2\u05e0\u05e1\7p\2\2")
        buf.write("\u05e1\u05e2\7\6\2\2\u05e2\u05e3\t\2\2\2\u05e3\u05e4\7")
        buf.write("\7\2\2\u05e4\u0137\3\2\2\2\u05e5\u05e6\7q\2\2\u05e6\u05e7")
        buf.write("\7\6\2\2\u05e7\u05eb\7\3\2\2\u05e8\u05ea\5\u0130\u0099")
        buf.write("\2\u05e9\u05e8\3\2\2\2\u05ea\u05ed\3\2\2\2\u05eb\u05e9")
        buf.write("\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05ee\3\2\2\2\u05ed")
        buf.write("\u05eb\3\2\2\2\u05ee\u05ef\7\4\2\2\u05ef\u05f0\7\7\2\2")
        buf.write("\u05f0\u0139\3\2\2\2\u05f1\u05f2\7r\2\2\u05f2\u05f3\7")
        buf.write("\6\2\2\u05f3\u05f7\7\3\2\2\u05f4\u05f6\5\u0130\u0099\2")
        buf.write("\u05f5\u05f4\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7\u05f5\3")
        buf.write("\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05fa\3\2\2\2\u05f9\u05f7")
        buf.write("\3\2\2\2\u05fa\u05fb\7\4\2\2\u05fb\u05fc\7\7\2\2\u05fc")
        buf.write("\u013b\3\2\2\2\u05fd\u05fe\7s\2\2\u05fe\u05ff\7\6\2\2")
        buf.write("\u05ff\u0600\7\u0081\2\2\u0600\u0601\7\7\2\2\u0601\u013d")
        buf.write("\3\2\2\2\u0602\u0603\7t\2\2\u0603\u0604\7\6\2\2\u0604")
        buf.write("\u0605\7\u0083\2\2\u0605\u0606\7\7\2\2\u0606\u013f\3\2")
        buf.write("\2\2\u0607\u0608\7u\2\2\u0608\u0609\7\6\2\2\u0609\u060a")
        buf.write("\5\u0142\u00a2\2\u060a\u060b\7\7\2\2\u060b\u0141\3\2\2")
        buf.write("\2\u060c\u060d\t\3\2\2\u060d\u0143\3\2\2\2d\u0162\u0166")
        buf.write("\u0169\u016f\u0172\u0176\u0179\u017c\u0180\u0183\u0188")
        buf.write("\u018b\u018e\u019b\u01a0\u01a5\u01aa\u01af\u01b4\u01b9")
        buf.write("\u01be\u01c3\u01c8\u01cd\u01d2\u01d7\u01dc\u01e1\u01e6")
        buf.write("\u01eb\u01f0\u01f5\u01fa\u01ff\u0212\u0215\u0218\u021b")
        buf.write("\u0234\u023f\u0242\u0245\u0248\u024b\u024e\u0251\u0254")
        buf.write("\u0257\u025a\u025d\u0272\u0275\u0278\u027c\u027f\u0298")
        buf.write("\u029b\u02af\u02b2\u02b6\u02d9\u02dd\u02e0\u02e7\u02fb")
        buf.write("\u02fe\u0301\u030e\u0319\u0327\u040e\u0441\u044c\u0456")
        buf.write("\u0491\u0494\u0497\u049a\u049d\u04a0\u04a3\u04a6\u04a9")
        buf.write("\u04d7\u04e1\u04e4\u04e7\u04ea\u04ed\u04f0\u04f3\u0540")
        buf.write("\u058e\u05a1\u05ce\u05d4\u05eb\u05f7")
        return buf.getvalue()


class PBXProjParser ( Parser ):

    grammarFileName = "PBXProj.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'archiveVersion'", "'='", 
                     "';'", "'objectVersion'", "'PBXAggregateTarget'", "'PBXBuildFile'", 
                     "'PBXContainerItemProxy'", "'PBXCopyFilesBuildPhase'", 
                     "'PBXFileReference'", "'PBXFrameworksBuildPhase'", 
                     "'PBXGroup'", "'PBXHeadersBuildPhase'", "'PBXNativeTarget'", 
                     "'PBXProject'", "'PBXReferenceProxy'", "'PBXResourcesBuildPhase'", 
                     "'PBXShellScriptBuildPhase'", "'PBXSourcesBuildPhase'", 
                     "'PBXTargetDependency'", "'PBXVariantGroup'", "'XCBuildConfiguration'", 
                     "'XCConfigurationList'", "'XCRemoteSwiftPackageReference'", 
                     "'XCSwiftPackageProductDependency'", "'XCVersionGroup'", 
                     "'fileRef'", "'productRef'", "'containerPortal'", "'proxyType'", 
                     "'remoteGlobalIDString'", "'remoteInfo'", "'fileEncoding'", 
                     "'explicitFileType'", "'lastKnownFileType'", "'includeInIndex'", 
                     "'indentWidth'", "'tabWidth'", "'usesTabs'", "'platformFilter'", 
                     "'children'", "'productInstallPath'", "'repositoryURL'", 
                     "'requirement'", "'package'", "'packageProductDependencies'", 
                     "'name'", "'path'", "'sourceTree'", "'buildActionMask'", 
                     "'files'", "'runOnlyForDeploymentPostprocessing'", 
                     "'('", "','", "')'", "'buildConfigurationList'", "'buildPhases'", 
                     "'buildRules'", "'dependencies'", "'productName'", 
                     "'productReference'", "'productType'", "'lineEnding'", 
                     "'xcLanguageSpecificationIdentifier'", "'plistStructureDefinitionIdentifier'", 
                     "'attributes'", "'LastSwiftMigration'", "'DefaultBuildSystemTypeForWorkspace'", 
                     "'LastSwiftUpdateCheck'", "'BuildIndependentTargetsInParallel'", 
                     "'LastTestingUpgradeCheck'", "'LastUpgradeCheck'", 
                     "'ORGANIZATIONNAME'", "'TargetAttributes'", "'CreatedOnToolsVersion'", 
                     "'TestTargetID'", "'DevelopmentTeam'", "'ProvisioningStyle'", 
                     "'compatibilityVersion'", "'developmentRegion'", "'hasScannedForEncodings'", 
                     "'knownRegions'", "'mainGroup'", "'productRefGroup'", 
                     "'packageReferences'", "'projectDirPath'", "'projectReferences'", 
                     "'projectRoot'", "'targets'", "'inputFileListPaths'", 
                     "'inputPaths'", "'outputFileListPaths'", "'outputPaths'", 
                     "'shellPath'", "'shellScript'", "'showEnvVarsInLog'", 
                     "'target'", "'targetProxy'", "'fileType'", "'remoteRef'", 
                     "'baseConfigurationReference'", "'buildSettings'", 
                     "'dstPath'", "'dstSubfolderSpec'", "'ProductGroup'", 
                     "'ProjectRef'", "'buildConfigurations'", "'defaultConfigurationIsVisible'", 
                     "'defaultConfigurationName'", "'settings'", "'SystemCapabilities'", 
                     "'currentVersion'", "'versionGroupType'", "'CLASSPREFIX'", 
                     "'classes'", "'isa'", "'objects'", "'rootObject'", 
                     "<INVALID>", "'.'", "<INVALID>", "<INVALID>", "'-'", 
                     "'_'", "'/'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "CLASSES", "ISA", "OBJECTS", "ROOT_OBJECT", "NUMBER", 
                      "DOT", "ALPHA_NUMERIC", "ALPHA_NUMERIC_CAP", "DASH", 
                      "UNDERSCORE", "SLASH", "REFERENCE", "QUOTED_STRING", 
                      "NON_QUOTED_STRING", "VARIABLE", "WS", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_start = 0
    RULE_root_element = 1
    RULE_archive_version = 2
    RULE_classes = 3
    RULE_object_version = 4
    RULE_objects = 5
    RULE_root_object = 6
    RULE_pbx_aggregate_target_section = 7
    RULE_pbx_build_file_section = 8
    RULE_pbx_container_item_proxy_section = 9
    RULE_pbx_copy_files_build_phase_section = 10
    RULE_pbx_file_reference_section = 11
    RULE_pbx_frameworks_build_phase_section = 12
    RULE_pbx_group_section = 13
    RULE_pbx_headers_build_phase_section = 14
    RULE_pbx_native_target_section = 15
    RULE_pbx_project_section = 16
    RULE_pbx_reference_proxy_section = 17
    RULE_pbx_resources_build_phase_section = 18
    RULE_pbx_shell_script_build_phase_section = 19
    RULE_pbx_sources_build_phase_section = 20
    RULE_pbx_target_dependency_section = 21
    RULE_pbx_variant_group_section = 22
    RULE_xc_build_configuration_section = 23
    RULE_xc_configuration_list_section = 24
    RULE_xc_remote_swift_package_reference_section = 25
    RULE_xc_swift_package_product_dependency_section = 26
    RULE_xc_version_group_section = 27
    RULE_pbx_aggregate_target = 28
    RULE_pbx_build_file = 29
    RULE_pbx_container_item_proxy = 30
    RULE_pbx_copy_files_build_phase = 31
    RULE_pbx_file_reference = 32
    RULE_pbx_frameworks_build_phase = 33
    RULE_pbx_group = 34
    RULE_pbx_headers_build_phase = 35
    RULE_pbx_native_target = 36
    RULE_pbx_project = 37
    RULE_pbx_reference_proxy = 38
    RULE_pbx_resources_build_phase = 39
    RULE_pbx_shell_script_build_phase = 40
    RULE_pbx_sources_build_phase = 41
    RULE_pbx_target_dependency = 42
    RULE_pbx_variant_group = 43
    RULE_xc_build_configuration = 44
    RULE_xc_configuration_list = 45
    RULE_xc_remote_swift_package_reference = 46
    RULE_xc_swift_package_product_dependency = 47
    RULE_xc_version_group = 48
    RULE_isa_pbx_aggregate_target = 49
    RULE_isa_pbx_build_file = 50
    RULE_isa_pbx_container_item_proxy = 51
    RULE_isa_pbx_copy_files_build_phase = 52
    RULE_isa_pbx_file_reference = 53
    RULE_isa_pbx_frameworks_build_phase = 54
    RULE_isa_pbx_group = 55
    RULE_isa_pbx_header_build_phase = 56
    RULE_isa_pbx_native_target = 57
    RULE_isa_pbx_project = 58
    RULE_isa_pbx_reference_proxy = 59
    RULE_isa_pbx_resources_build_phase = 60
    RULE_isa_pbx_shell_script_build_phase = 61
    RULE_isa_pbx_sources_build_phase = 62
    RULE_isa_pbx_target_dependency = 63
    RULE_isa_pbx_variant_group = 64
    RULE_isa_xc_build_configuration = 65
    RULE_isa_xc_configuration_list = 66
    RULE_isa_xc_remote_swift_package_reference = 67
    RULE_isa_xc_swift_package_product_dependency = 68
    RULE_isa_xc_version_group = 69
    RULE_file_ref = 70
    RULE_product_ref = 71
    RULE_container_portal = 72
    RULE_proxy_type = 73
    RULE_remote_global_id_string = 74
    RULE_remote_info = 75
    RULE_file_encoding = 76
    RULE_explicit_file_type = 77
    RULE_last_known_file_type = 78
    RULE_include_in_index = 79
    RULE_indent_width = 80
    RULE_tab_width = 81
    RULE_uses_tabs = 82
    RULE_platform_filter = 83
    RULE_children = 84
    RULE_product_install_path = 85
    RULE_repository_url = 86
    RULE_requirement = 87
    RULE_xc_package = 88
    RULE_package_product_dependencies = 89
    RULE_name = 90
    RULE_path = 91
    RULE_source_tree = 92
    RULE_build_action_mask = 93
    RULE_files = 94
    RULE_run_only_for_deployment_postprocessing = 95
    RULE_reference_list = 96
    RULE_any_string_list = 97
    RULE_non_quoted_strings_list = 98
    RULE_build_configuration_list = 99
    RULE_build_phases = 100
    RULE_build_rules = 101
    RULE_dependencies = 102
    RULE_product_name = 103
    RULE_product_reference = 104
    RULE_product_type = 105
    RULE_line_ending = 106
    RULE_xc_language_specification_identifier = 107
    RULE_plist_structure_definition_identifier = 108
    RULE_attributes = 109
    RULE_last_swift_migration = 110
    RULE_default_build_system_type_for_workspace = 111
    RULE_last_swift_update_check = 112
    RULE_build_targets_in_parallel = 113
    RULE_last_testing_upgrade_check = 114
    RULE_last_upgrade_check = 115
    RULE_organization_name = 116
    RULE_target_attributes = 117
    RULE_target_attribute = 118
    RULE_created_on_tools_version = 119
    RULE_test_target_id = 120
    RULE_development_team = 121
    RULE_provisioning_style = 122
    RULE_compatibility_version = 123
    RULE_development_region = 124
    RULE_has_scanned_for_encodings = 125
    RULE_known_regions = 126
    RULE_main_group = 127
    RULE_product_ref_group = 128
    RULE_package_references = 129
    RULE_project_dir_path = 130
    RULE_project_references = 131
    RULE_project_root = 132
    RULE_targets = 133
    RULE_input_file_list_paths = 134
    RULE_input_paths = 135
    RULE_output_file_list_paths = 136
    RULE_output_paths = 137
    RULE_shell_path = 138
    RULE_shell_script = 139
    RULE_show_env_vars_in_log = 140
    RULE_target = 141
    RULE_target_proxy = 142
    RULE_file_type = 143
    RULE_remote_ref = 144
    RULE_base_configuration_reference = 145
    RULE_build_settings = 146
    RULE_dst_path = 147
    RULE_dst_subfolder_spec = 148
    RULE_project_references_list = 149
    RULE_project_references_list_element = 150
    RULE_key_value = 151
    RULE_build_configurations = 152
    RULE_default_configuration_is_visible = 153
    RULE_default_configuration_name = 154
    RULE_settings = 155
    RULE_system_capabilities = 156
    RULE_current_version = 157
    RULE_version_group_type = 158
    RULE_class_prefix = 159
    RULE_any_string = 160

    ruleNames =  [ "start", "root_element", "archive_version", "classes", 
                   "object_version", "objects", "root_object", "pbx_aggregate_target_section", 
                   "pbx_build_file_section", "pbx_container_item_proxy_section", 
                   "pbx_copy_files_build_phase_section", "pbx_file_reference_section", 
                   "pbx_frameworks_build_phase_section", "pbx_group_section", 
                   "pbx_headers_build_phase_section", "pbx_native_target_section", 
                   "pbx_project_section", "pbx_reference_proxy_section", 
                   "pbx_resources_build_phase_section", "pbx_shell_script_build_phase_section", 
                   "pbx_sources_build_phase_section", "pbx_target_dependency_section", 
                   "pbx_variant_group_section", "xc_build_configuration_section", 
                   "xc_configuration_list_section", "xc_remote_swift_package_reference_section", 
                   "xc_swift_package_product_dependency_section", "xc_version_group_section", 
                   "pbx_aggregate_target", "pbx_build_file", "pbx_container_item_proxy", 
                   "pbx_copy_files_build_phase", "pbx_file_reference", "pbx_frameworks_build_phase", 
                   "pbx_group", "pbx_headers_build_phase", "pbx_native_target", 
                   "pbx_project", "pbx_reference_proxy", "pbx_resources_build_phase", 
                   "pbx_shell_script_build_phase", "pbx_sources_build_phase", 
                   "pbx_target_dependency", "pbx_variant_group", "xc_build_configuration", 
                   "xc_configuration_list", "xc_remote_swift_package_reference", 
                   "xc_swift_package_product_dependency", "xc_version_group", 
                   "isa_pbx_aggregate_target", "isa_pbx_build_file", "isa_pbx_container_item_proxy", 
                   "isa_pbx_copy_files_build_phase", "isa_pbx_file_reference", 
                   "isa_pbx_frameworks_build_phase", "isa_pbx_group", "isa_pbx_header_build_phase", 
                   "isa_pbx_native_target", "isa_pbx_project", "isa_pbx_reference_proxy", 
                   "isa_pbx_resources_build_phase", "isa_pbx_shell_script_build_phase", 
                   "isa_pbx_sources_build_phase", "isa_pbx_target_dependency", 
                   "isa_pbx_variant_group", "isa_xc_build_configuration", 
                   "isa_xc_configuration_list", "isa_xc_remote_swift_package_reference", 
                   "isa_xc_swift_package_product_dependency", "isa_xc_version_group", 
                   "file_ref", "product_ref", "container_portal", "proxy_type", 
                   "remote_global_id_string", "remote_info", "file_encoding", 
                   "explicit_file_type", "last_known_file_type", "include_in_index", 
                   "indent_width", "tab_width", "uses_tabs", "platform_filter", 
                   "children", "product_install_path", "repository_url", 
                   "requirement", "xc_package", "package_product_dependencies", 
                   "name", "path", "source_tree", "build_action_mask", "files", 
                   "run_only_for_deployment_postprocessing", "reference_list", 
                   "any_string_list", "non_quoted_strings_list", "build_configuration_list", 
                   "build_phases", "build_rules", "dependencies", "product_name", 
                   "product_reference", "product_type", "line_ending", "xc_language_specification_identifier", 
                   "plist_structure_definition_identifier", "attributes", 
                   "last_swift_migration", "default_build_system_type_for_workspace", 
                   "last_swift_update_check", "build_targets_in_parallel", 
                   "last_testing_upgrade_check", "last_upgrade_check", "organization_name", 
                   "target_attributes", "target_attribute", "created_on_tools_version", 
                   "test_target_id", "development_team", "provisioning_style", 
                   "compatibility_version", "development_region", "has_scanned_for_encodings", 
                   "known_regions", "main_group", "product_ref_group", "package_references", 
                   "project_dir_path", "project_references", "project_root", 
                   "targets", "input_file_list_paths", "input_paths", "output_file_list_paths", 
                   "output_paths", "shell_path", "shell_script", "show_env_vars_in_log", 
                   "target", "target_proxy", "file_type", "remote_ref", 
                   "base_configuration_reference", "build_settings", "dst_path", 
                   "dst_subfolder_spec", "project_references_list", "project_references_list_element", 
                   "key_value", "build_configurations", "default_configuration_is_visible", 
                   "default_configuration_name", "settings", "system_capabilities", 
                   "current_version", "version_group_type", "class_prefix", 
                   "any_string" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    CLASSES=116
    ISA=117
    OBJECTS=118
    ROOT_OBJECT=119
    NUMBER=120
    DOT=121
    ALPHA_NUMERIC=122
    ALPHA_NUMERIC_CAP=123
    DASH=124
    UNDERSCORE=125
    SLASH=126
    REFERENCE=127
    QUOTED_STRING=128
    NON_QUOTED_STRING=129
    VARIABLE=130
    WS=131
    COMMENT=132
    LINE_COMMENT=133

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def root_element(self):
            return self.getTypedRuleContext(PBXProjParser.Root_elementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = PBXProjParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.root_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def archive_version(self):
            return self.getTypedRuleContext(PBXProjParser.Archive_versionContext,0)


        def classes(self):
            return self.getTypedRuleContext(PBXProjParser.ClassesContext,0)


        def object_version(self):
            return self.getTypedRuleContext(PBXProjParser.Object_versionContext,0)


        def objects(self):
            return self.getTypedRuleContext(PBXProjParser.ObjectsContext,0)


        def root_object(self):
            return self.getTypedRuleContext(PBXProjParser.Root_objectContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_root_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_element" ):
                listener.enterRoot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_element" ):
                listener.exitRoot_element(self)




    def root_element(self):

        localctx = PBXProjParser.Root_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_root_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(PBXProjParser.T__0)
            self.state = 325
            self.archive_version()
            self.state = 326
            self.classes()
            self.state = 327
            self.object_version()
            self.state = 328
            self.objects()
            self.state = 329
            self.root_object()
            self.state = 330
            self.match(PBXProjParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Archive_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_archive_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchive_version" ):
                listener.enterArchive_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchive_version" ):
                listener.exitArchive_version(self)




    def archive_version(self):

        localctx = PBXProjParser.Archive_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_archive_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(PBXProjParser.T__2)
            self.state = 333
            self.match(PBXProjParser.T__3)
            self.state = 334
            self.match(PBXProjParser.NUMBER)
            self.state = 335
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasses" ):
                listener.enterClasses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasses" ):
                listener.exitClasses(self)




    def classes(self):

        localctx = PBXProjParser.ClassesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(PBXProjParser.CLASSES)
            self.state = 338
            self.match(PBXProjParser.T__3)
            self.state = 339
            self.match(PBXProjParser.T__0)
            self.state = 340
            self.match(PBXProjParser.T__1)
            self.state = 341
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_object_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_version" ):
                listener.enterObject_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_version" ):
                listener.exitObject_version(self)




    def object_version(self):

        localctx = PBXProjParser.Object_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_object_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(PBXProjParser.T__5)
            self.state = 344
            self.match(PBXProjParser.T__3)
            self.state = 345
            self.match(PBXProjParser.NUMBER)
            self.state = 346
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def pbx_build_file_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_file_sectionContext,0)


        def pbx_file_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_reference_sectionContext,0)


        def pbx_frameworks_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phase_sectionContext,0)


        def pbx_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_group_sectionContext,0)


        def pbx_project_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_project_sectionContext,0)


        def pbx_sources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phase_sectionContext,0)


        def xc_build_configuration_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_build_configuration_sectionContext,0)


        def xc_configuration_list_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_configuration_list_sectionContext,0)


        def pbx_aggregate_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_target_sectionContext,0)


        def pbx_container_item_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxy_sectionContext,0)


        def pbx_copy_files_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phase_sectionContext,0)


        def pbx_headers_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phase_sectionContext,0)


        def pbx_native_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_native_target_sectionContext,0)


        def pbx_reference_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxy_sectionContext,0)


        def pbx_resources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phase_sectionContext,0)


        def pbx_shell_script_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phase_sectionContext,0)


        def pbx_target_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependency_sectionContext,0)


        def pbx_variant_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_variant_group_sectionContext,0)


        def xc_remote_swift_package_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_reference_sectionContext,0)


        def xc_swift_package_product_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependency_sectionContext,0)


        def xc_version_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_version_group_sectionContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_objects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjects" ):
                listener.enterObjects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjects" ):
                listener.exitObjects(self)




    def objects(self):

        localctx = PBXProjParser.ObjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_objects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(PBXProjParser.OBJECTS)
            self.state = 349
            self.match(PBXProjParser.T__3)
            self.state = 350
            self.match(PBXProjParser.T__0)
            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 351
                self.pbx_aggregate_target_section()


            self.state = 354
            self.pbx_build_file_section()
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 355
                self.pbx_container_item_proxy_section()


            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 358
                self.pbx_copy_files_build_phase_section()


            self.state = 361
            self.pbx_file_reference_section()
            self.state = 362
            self.pbx_frameworks_build_phase_section()
            self.state = 363
            self.pbx_group_section()
            self.state = 365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 364
                self.pbx_headers_build_phase_section()


            self.state = 368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 367
                self.pbx_native_target_section()


            self.state = 370
            self.pbx_project_section()
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 371
                self.pbx_reference_proxy_section()


            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 374
                self.pbx_resources_build_phase_section()


            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 377
                self.pbx_shell_script_build_phase_section()


            self.state = 380
            self.pbx_sources_build_phase_section()
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 381
                self.pbx_target_dependency_section()


            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 384
                self.pbx_variant_group_section()


            self.state = 387
            self.xc_build_configuration_section()
            self.state = 388
            self.xc_configuration_list_section()
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 389
                self.xc_remote_swift_package_reference_section()


            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 392
                self.xc_swift_package_product_dependency_section()


            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.REFERENCE:
                self.state = 395
                self.xc_version_group_section()


            self.state = 398
            self.match(PBXProjParser.T__1)
            self.state = 399
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_root_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_object" ):
                listener.enterRoot_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_object" ):
                listener.exitRoot_object(self)




    def root_object(self):

        localctx = PBXProjParser.Root_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_root_object)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(PBXProjParser.ROOT_OBJECT)
            self.state = 402
            self.match(PBXProjParser.T__3)
            self.state = 403
            self.match(PBXProjParser.REFERENCE)
            self.state = 404
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_aggregate_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_aggregate_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target_section" ):
                listener.enterPbx_aggregate_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target_section" ):
                listener.exitPbx_aggregate_target_section(self)




    def pbx_aggregate_target_section(self):

        localctx = PBXProjParser.Pbx_aggregate_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_pbx_aggregate_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 406
                    self.pbx_aggregate_target()

                else:
                    raise NoViableAltException(self)
                self.state = 409 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_file_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_file(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_fileContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_fileContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file_section" ):
                listener.enterPbx_build_file_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file_section" ):
                listener.exitPbx_build_file_section(self)




    def pbx_build_file_section(self):

        localctx = PBXProjParser.Pbx_build_file_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pbx_build_file_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 411
                    self.pbx_build_file()

                else:
                    raise NoViableAltException(self)
                self.state = 414 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_container_item_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_container_item_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy_section" ):
                listener.enterPbx_container_item_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy_section" ):
                listener.exitPbx_container_item_proxy_section(self)




    def pbx_container_item_proxy_section(self):

        localctx = PBXProjParser.Pbx_container_item_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pbx_container_item_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 416
                    self.pbx_container_item_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 419 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_copy_files_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_copy_files_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase_section" ):
                listener.enterPbx_copy_files_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase_section" ):
                listener.exitPbx_copy_files_build_phase_section(self)




    def pbx_copy_files_build_phase_section(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_pbx_copy_files_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 421
                    self.pbx_copy_files_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 424 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference_section" ):
                listener.enterPbx_file_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference_section" ):
                listener.exitPbx_file_reference_section(self)




    def pbx_file_reference_section(self):

        localctx = PBXProjParser.Pbx_file_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_pbx_file_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 426
                    self.pbx_file_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 429 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_frameworks_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_frameworks_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase_section" ):
                listener.enterPbx_frameworks_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase_section" ):
                listener.exitPbx_frameworks_build_phase_section(self)




    def pbx_frameworks_build_phase_section(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pbx_frameworks_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 431
                    self.pbx_frameworks_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 434 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group_section" ):
                listener.enterPbx_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group_section" ):
                listener.exitPbx_group_section(self)




    def pbx_group_section(self):

        localctx = PBXProjParser.Pbx_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pbx_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 436
                    self.pbx_group()

                else:
                    raise NoViableAltException(self)
                self.state = 439 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_headers_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_headers_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase_section" ):
                listener.enterPbx_headers_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase_section" ):
                listener.exitPbx_headers_build_phase_section(self)




    def pbx_headers_build_phase_section(self):

        localctx = PBXProjParser.Pbx_headers_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pbx_headers_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 441
                    self.pbx_headers_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 444 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_native_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_native_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_native_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target_section" ):
                listener.enterPbx_native_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target_section" ):
                listener.exitPbx_native_target_section(self)




    def pbx_native_target_section(self):

        localctx = PBXProjParser.Pbx_native_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pbx_native_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 446
                    self.pbx_native_target()

                else:
                    raise NoViableAltException(self)
                self.state = 449 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_project_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_project(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_projectContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_projectContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project_section" ):
                listener.enterPbx_project_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project_section" ):
                listener.exitPbx_project_section(self)




    def pbx_project_section(self):

        localctx = PBXProjParser.Pbx_project_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pbx_project_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 451
                    self.pbx_project()

                else:
                    raise NoViableAltException(self)
                self.state = 454 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_reference_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_reference_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy_section" ):
                listener.enterPbx_reference_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy_section" ):
                listener.exitPbx_reference_proxy_section(self)




    def pbx_reference_proxy_section(self):

        localctx = PBXProjParser.Pbx_reference_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pbx_reference_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 456
                    self.pbx_reference_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 459 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_resources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_resources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase_section" ):
                listener.enterPbx_resources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase_section" ):
                listener.exitPbx_resources_build_phase_section(self)




    def pbx_resources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_resources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pbx_resources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 461
                    self.pbx_resources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 464 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_shell_script_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_shell_script_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase_section" ):
                listener.enterPbx_shell_script_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase_section" ):
                listener.exitPbx_shell_script_build_phase_section(self)




    def pbx_shell_script_build_phase_section(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pbx_shell_script_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 466
                    self.pbx_shell_script_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 469 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_sources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_sources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase_section" ):
                listener.enterPbx_sources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase_section" ):
                listener.exitPbx_sources_build_phase_section(self)




    def pbx_sources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_sources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pbx_sources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 471
                    self.pbx_sources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 474 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_target_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_target_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency_section" ):
                listener.enterPbx_target_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency_section" ):
                listener.exitPbx_target_dependency_section(self)




    def pbx_target_dependency_section(self):

        localctx = PBXProjParser.Pbx_target_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pbx_target_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 476
                    self.pbx_target_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 479 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_variant_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_variant_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_variant_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group_section" ):
                listener.enterPbx_variant_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group_section" ):
                listener.exitPbx_variant_group_section(self)




    def pbx_variant_group_section(self):

        localctx = PBXProjParser.Pbx_variant_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pbx_variant_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 481
                    self.pbx_variant_group()

                else:
                    raise NoViableAltException(self)
                self.state = 484 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configuration_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_build_configuration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_build_configurationContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_build_configurationContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration_section" ):
                listener.enterXc_build_configuration_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration_section" ):
                listener.exitXc_build_configuration_section(self)




    def xc_build_configuration_section(self):

        localctx = PBXProjParser.Xc_build_configuration_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_xc_build_configuration_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 486
                    self.xc_build_configuration()

                else:
                    raise NoViableAltException(self)
                self.state = 489 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_list_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_configuration_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_configuration_listContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_configuration_listContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list_section" ):
                listener.enterXc_configuration_list_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list_section" ):
                listener.exitXc_configuration_list_section(self)




    def xc_configuration_list_section(self):

        localctx = PBXProjParser.Xc_configuration_list_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_xc_configuration_list_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 491
                    self.xc_configuration_list()

                else:
                    raise NoViableAltException(self)
                self.state = 494 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_remote_swift_package_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_remote_swift_package_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference_section" ):
                listener.enterXc_remote_swift_package_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference_section" ):
                listener.exitXc_remote_swift_package_reference_section(self)




    def xc_remote_swift_package_reference_section(self):

        localctx = PBXProjParser.Xc_remote_swift_package_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_xc_remote_swift_package_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 496
                    self.xc_remote_swift_package_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 499 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_swift_package_product_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_swift_package_product_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency_section" ):
                listener.enterXc_swift_package_product_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency_section" ):
                listener.exitXc_swift_package_product_dependency_section(self)




    def xc_swift_package_product_dependency_section(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_xc_swift_package_product_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 501
                    self.xc_swift_package_product_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 504 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_version_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_version_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_version_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group_section" ):
                listener.enterXc_version_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group_section" ):
                listener.exitXc_version_group_section(self)




    def xc_version_group_section(self):

        localctx = PBXProjParser.Xc_version_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_xc_version_group_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 506
                self.xc_version_group()
                self.state = 509 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PBXProjParser.REFERENCE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_aggregate_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_aggregate_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target" ):
                listener.enterPbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target" ):
                listener.exitPbx_aggregate_target(self)




    def pbx_aggregate_target(self):

        localctx = PBXProjParser.Pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(PBXProjParser.REFERENCE)
            self.state = 512
            self.match(PBXProjParser.T__3)
            self.state = 513
            self.match(PBXProjParser.T__0)
            self.state = 514
            self.isa_pbx_aggregate_target()
            self.state = 515
            self.build_configuration_list()
            self.state = 516
            self.build_phases()
            self.state = 517
            self.dependencies()
            self.state = 518
            self.name()
            self.state = 519
            self.product_name()
            self.state = 520
            self.match(PBXProjParser.T__1)
            self.state = 521
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_file(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_fileContext,0)


        def file_ref(self):
            return self.getTypedRuleContext(PBXProjParser.File_refContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def product_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Product_refContext,0)


        def settings(self):
            return self.getTypedRuleContext(PBXProjParser.SettingsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file" ):
                listener.enterPbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file" ):
                listener.exitPbx_build_file(self)




    def pbx_build_file(self):

        localctx = PBXProjParser.Pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pbx_build_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(PBXProjParser.REFERENCE)
            self.state = 524
            self.match(PBXProjParser.T__3)
            self.state = 525
            self.match(PBXProjParser.T__0)
            self.state = 526
            self.isa_pbx_build_file()
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__27:
                self.state = 527
                self.file_ref()


            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__40:
                self.state = 530
                self.platform_filter()


            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__28:
                self.state = 533
                self.product_ref()


            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__110:
                self.state = 536
                self.settings()


            self.state = 539
            self.match(PBXProjParser.T__1)
            self.state = 540
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_container_item_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_container_item_proxyContext,0)


        def container_portal(self):
            return self.getTypedRuleContext(PBXProjParser.Container_portalContext,0)


        def proxy_type(self):
            return self.getTypedRuleContext(PBXProjParser.Proxy_typeContext,0)


        def remote_global_id_string(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_global_id_stringContext,0)


        def remote_info(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_infoContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy" ):
                listener.enterPbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy" ):
                listener.exitPbx_container_item_proxy(self)




    def pbx_container_item_proxy(self):

        localctx = PBXProjParser.Pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(PBXProjParser.REFERENCE)
            self.state = 543
            self.match(PBXProjParser.T__3)
            self.state = 544
            self.match(PBXProjParser.T__0)
            self.state = 545
            self.isa_pbx_container_item_proxy()
            self.state = 546
            self.container_portal()
            self.state = 547
            self.proxy_type()
            self.state = 548
            self.remote_global_id_string()
            self.state = 549
            self.remote_info()
            self.state = 550
            self.match(PBXProjParser.T__1)
            self.state = 551
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_copy_files_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_copy_files_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def dst_path(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_pathContext,0)


        def dst_subfolder_spec(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_subfolder_specContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase" ):
                listener.enterPbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase" ):
                listener.exitPbx_copy_files_build_phase(self)




    def pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pbx_copy_files_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(PBXProjParser.REFERENCE)
            self.state = 554
            self.match(PBXProjParser.T__3)
            self.state = 555
            self.match(PBXProjParser.T__0)
            self.state = 556
            self.isa_pbx_copy_files_build_phase()
            self.state = 557
            self.build_action_mask()
            self.state = 558
            self.dst_path()
            self.state = 559
            self.dst_subfolder_spec()
            self.state = 560
            self.files()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__47:
                self.state = 561
                self.name()


            self.state = 564
            self.run_only_for_deployment_postprocessing()
            self.state = 565
            self.match(PBXProjParser.T__1)
            self.state = 566
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_referenceContext,0)


        def explicit_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_file_typeContext,0)


        def file_encoding(self):
            return self.getTypedRuleContext(PBXProjParser.File_encodingContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def last_known_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Last_known_file_typeContext,0)


        def line_ending(self):
            return self.getTypedRuleContext(PBXProjParser.Line_endingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def plist_structure_definition_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Plist_structure_definition_identifierContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def xc_language_specification_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_language_specification_identifierContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference" ):
                listener.enterPbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference" ):
                listener.exitPbx_file_reference(self)




    def pbx_file_reference(self):

        localctx = PBXProjParser.Pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pbx_file_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(PBXProjParser.REFERENCE)
            self.state = 569
            self.match(PBXProjParser.T__3)
            self.state = 570
            self.match(PBXProjParser.T__0)
            self.state = 571
            self.isa_pbx_file_reference()
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__34:
                self.state = 572
                self.explicit_file_type()


            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__33:
                self.state = 575
                self.file_encoding()


            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__36:
                self.state = 578
                self.include_in_index()


            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__35:
                self.state = 581
                self.last_known_file_type()


            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__63:
                self.state = 584
                self.line_ending()


            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__47:
                self.state = 587
                self.name()


            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__48:
                self.state = 590
                self.path()


            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__65:
                self.state = 593
                self.plist_structure_definition_identifier()


            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__49:
                self.state = 596
                self.source_tree()


            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__64:
                self.state = 599
                self.xc_language_specification_identifier()


            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__39:
                self.state = 602
                self.uses_tabs()


            self.state = 605
            self.match(PBXProjParser.T__1)
            self.state = 606
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_frameworks_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_frameworks_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase" ):
                listener.enterPbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase" ):
                listener.exitPbx_frameworks_build_phase(self)




    def pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(PBXProjParser.REFERENCE)
            self.state = 609
            self.match(PBXProjParser.T__3)
            self.state = 610
            self.match(PBXProjParser.T__0)
            self.state = 611
            self.isa_pbx_frameworks_build_phase()
            self.state = 612
            self.build_action_mask()
            self.state = 613
            self.files()
            self.state = 614
            self.run_only_for_deployment_postprocessing()
            self.state = 615
            self.match(PBXProjParser.T__1)
            self.state = 616
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group" ):
                listener.enterPbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group" ):
                listener.exitPbx_group(self)




    def pbx_group(self):

        localctx = PBXProjParser.Pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_pbx_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(PBXProjParser.REFERENCE)
            self.state = 619
            self.match(PBXProjParser.T__3)
            self.state = 620
            self.match(PBXProjParser.T__0)
            self.state = 621
            self.isa_pbx_group()
            self.state = 622
            self.children()
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__37:
                self.state = 623
                self.indent_width()


            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__47:
                self.state = 626
                self.name()


            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__48:
                self.state = 629
                self.path()


            self.state = 632
            self.source_tree()
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__38:
                self.state = 633
                self.tab_width()


            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__39:
                self.state = 636
                self.uses_tabs()


            self.state = 639
            self.match(PBXProjParser.T__1)
            self.state = 640
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_header_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_header_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase" ):
                listener.enterPbx_headers_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase" ):
                listener.exitPbx_headers_build_phase(self)




    def pbx_headers_build_phase(self):

        localctx = PBXProjParser.Pbx_headers_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pbx_headers_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(PBXProjParser.REFERENCE)
            self.state = 643
            self.match(PBXProjParser.T__3)
            self.state = 644
            self.match(PBXProjParser.T__0)
            self.state = 645
            self.isa_pbx_header_build_phase()
            self.state = 646
            self.build_action_mask()
            self.state = 647
            self.files()
            self.state = 648
            self.run_only_for_deployment_postprocessing()
            self.state = 649
            self.match(PBXProjParser.T__1)
            self.state = 650
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_native_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_native_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_rules(self):
            return self.getTypedRuleContext(PBXProjParser.Build_rulesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def product_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Product_referenceContext,0)


        def product_type(self):
            return self.getTypedRuleContext(PBXProjParser.Product_typeContext,0)


        def product_install_path(self):
            return self.getTypedRuleContext(PBXProjParser.Product_install_pathContext,0)


        def package_product_dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.Package_product_dependenciesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target" ):
                listener.enterPbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target" ):
                listener.exitPbx_native_target(self)




    def pbx_native_target(self):

        localctx = PBXProjParser.Pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_pbx_native_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(PBXProjParser.REFERENCE)
            self.state = 653
            self.match(PBXProjParser.T__3)
            self.state = 654
            self.match(PBXProjParser.T__0)
            self.state = 655
            self.isa_pbx_native_target()
            self.state = 656
            self.build_configuration_list()
            self.state = 657
            self.build_phases()
            self.state = 658
            self.build_rules()
            self.state = 659
            self.dependencies()
            self.state = 660
            self.name()
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__42:
                self.state = 661
                self.product_install_path()


            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__46:
                self.state = 664
                self.package_product_dependencies()


            self.state = 667
            self.product_name()
            self.state = 668
            self.product_reference()
            self.state = 669
            self.product_type()
            self.state = 670
            self.match(PBXProjParser.T__1)
            self.state = 671
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_project(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_projectContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PBXProjParser.AttributesContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def compatibility_version(self):
            return self.getTypedRuleContext(PBXProjParser.Compatibility_versionContext,0)


        def development_region(self):
            return self.getTypedRuleContext(PBXProjParser.Development_regionContext,0)


        def has_scanned_for_encodings(self):
            return self.getTypedRuleContext(PBXProjParser.Has_scanned_for_encodingsContext,0)


        def known_regions(self):
            return self.getTypedRuleContext(PBXProjParser.Known_regionsContext,0)


        def main_group(self):
            return self.getTypedRuleContext(PBXProjParser.Main_groupContext,0)


        def project_dir_path(self):
            return self.getTypedRuleContext(PBXProjParser.Project_dir_pathContext,0)


        def project_root(self):
            return self.getTypedRuleContext(PBXProjParser.Project_rootContext,0)


        def targets(self):
            return self.getTypedRuleContext(PBXProjParser.TargetsContext,0)


        def package_references(self):
            return self.getTypedRuleContext(PBXProjParser.Package_referencesContext,0)


        def product_ref_group(self):
            return self.getTypedRuleContext(PBXProjParser.Product_ref_groupContext,0)


        def project_references(self):
            return self.getTypedRuleContext(PBXProjParser.Project_referencesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project" ):
                listener.enterPbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project" ):
                listener.exitPbx_project(self)




    def pbx_project(self):

        localctx = PBXProjParser.Pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pbx_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(PBXProjParser.REFERENCE)
            self.state = 674
            self.match(PBXProjParser.T__3)
            self.state = 675
            self.match(PBXProjParser.T__0)
            self.state = 676
            self.isa_pbx_project()
            self.state = 677
            self.attributes()
            self.state = 678
            self.build_configuration_list()
            self.state = 679
            self.compatibility_version()
            self.state = 680
            self.development_region()
            self.state = 681
            self.has_scanned_for_encodings()
            self.state = 682
            self.known_regions()
            self.state = 683
            self.main_group()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__85:
                self.state = 684
                self.package_references()


            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__84:
                self.state = 687
                self.product_ref_group()


            self.state = 690
            self.project_dir_path()
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__87:
                self.state = 691
                self.project_references()


            self.state = 694
            self.project_root()
            self.state = 695
            self.targets()
            self.state = 696
            self.match(PBXProjParser.T__1)
            self.state = 697
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_reference_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_reference_proxyContext,0)


        def file_type(self):
            return self.getTypedRuleContext(PBXProjParser.File_typeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def remote_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_refContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy" ):
                listener.enterPbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy" ):
                listener.exitPbx_reference_proxy(self)




    def pbx_reference_proxy(self):

        localctx = PBXProjParser.Pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(PBXProjParser.REFERENCE)
            self.state = 700
            self.match(PBXProjParser.T__3)
            self.state = 701
            self.match(PBXProjParser.T__0)
            self.state = 702
            self.isa_pbx_reference_proxy()
            self.state = 703
            self.file_type()
            self.state = 704
            self.path()
            self.state = 705
            self.remote_ref()
            self.state = 706
            self.source_tree()
            self.state = 707
            self.match(PBXProjParser.T__1)
            self.state = 708
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_resources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_resources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase" ):
                listener.enterPbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase" ):
                listener.exitPbx_resources_build_phase(self)




    def pbx_resources_build_phase(self):

        localctx = PBXProjParser.Pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(PBXProjParser.REFERENCE)
            self.state = 711
            self.match(PBXProjParser.T__3)
            self.state = 712
            self.match(PBXProjParser.T__0)
            self.state = 713
            self.isa_pbx_resources_build_phase()
            self.state = 714
            self.build_action_mask()
            self.state = 715
            self.files()
            self.state = 716
            self.run_only_for_deployment_postprocessing()
            self.state = 717
            self.match(PBXProjParser.T__1)
            self.state = 718
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_shell_script_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_shell_script_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def input_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_pathsContext,0)


        def output_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_pathsContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def shell_path(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_pathContext,0)


        def shell_script(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_scriptContext,0)


        def input_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_file_list_pathsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def output_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_file_list_pathsContext,0)


        def show_env_vars_in_log(self):
            return self.getTypedRuleContext(PBXProjParser.Show_env_vars_in_logContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase" ):
                listener.enterPbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase" ):
                listener.exitPbx_shell_script_build_phase(self)




    def pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pbx_shell_script_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(PBXProjParser.REFERENCE)
            self.state = 721
            self.match(PBXProjParser.T__3)
            self.state = 722
            self.match(PBXProjParser.T__0)
            self.state = 723
            self.isa_pbx_shell_script_build_phase()
            self.state = 724
            self.build_action_mask()
            self.state = 725
            self.files()
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__90:
                self.state = 726
                self.input_file_list_paths()


            self.state = 729
            self.input_paths()
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__47:
                self.state = 730
                self.name()


            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__92:
                self.state = 733
                self.output_file_list_paths()


            self.state = 736
            self.output_paths()
            self.state = 737
            self.run_only_for_deployment_postprocessing()
            self.state = 738
            self.shell_path()
            self.state = 739
            self.shell_script()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__96:
                self.state = 740
                self.show_env_vars_in_log()


            self.state = 743
            self.match(PBXProjParser.T__1)
            self.state = 744
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_sources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_sources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase" ):
                listener.enterPbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase" ):
                listener.exitPbx_sources_build_phase(self)




    def pbx_sources_build_phase(self):

        localctx = PBXProjParser.Pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(PBXProjParser.REFERENCE)
            self.state = 747
            self.match(PBXProjParser.T__3)
            self.state = 748
            self.match(PBXProjParser.T__0)
            self.state = 749
            self.isa_pbx_sources_build_phase()
            self.state = 750
            self.build_action_mask()
            self.state = 751
            self.files()
            self.state = 752
            self.run_only_for_deployment_postprocessing()
            self.state = 753
            self.match(PBXProjParser.T__1)
            self.state = 754
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_target_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_target_dependencyContext,0)


        def target_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Target_proxyContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def target(self):
            return self.getTypedRuleContext(PBXProjParser.TargetContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency" ):
                listener.enterPbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency" ):
                listener.exitPbx_target_dependency(self)




    def pbx_target_dependency(self):

        localctx = PBXProjParser.Pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_pbx_target_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(PBXProjParser.REFERENCE)
            self.state = 757
            self.match(PBXProjParser.T__3)
            self.state = 758
            self.match(PBXProjParser.T__0)
            self.state = 759
            self.isa_pbx_target_dependency()
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__47:
                self.state = 760
                self.name()


            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__40:
                self.state = 763
                self.platform_filter()


            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__97:
                self.state = 766
                self.target()


            self.state = 769
            self.target_proxy()
            self.state = 770
            self.match(PBXProjParser.T__1)
            self.state = 771
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_variant_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_variant_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group" ):
                listener.enterPbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group" ):
                listener.exitPbx_variant_group(self)




    def pbx_variant_group(self):

        localctx = PBXProjParser.Pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_pbx_variant_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(PBXProjParser.REFERENCE)
            self.state = 774
            self.match(PBXProjParser.T__3)
            self.state = 775
            self.match(PBXProjParser.T__0)
            self.state = 776
            self.isa_pbx_variant_group()
            self.state = 777
            self.children()
            self.state = 778
            self.name()
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__48:
                self.state = 779
                self.path()


            self.state = 782
            self.source_tree()
            self.state = 783
            self.match(PBXProjParser.T__1)
            self.state = 784
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_build_configuration(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_build_configurationContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def base_configuration_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Base_configuration_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration" ):
                listener.enterXc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration" ):
                listener.exitXc_build_configuration(self)




    def xc_build_configuration(self):

        localctx = PBXProjParser.Xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_xc_build_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(PBXProjParser.REFERENCE)
            self.state = 787
            self.match(PBXProjParser.T__3)
            self.state = 788
            self.match(PBXProjParser.T__0)
            self.state = 789
            self.isa_xc_build_configuration()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__101:
                self.state = 790
                self.base_configuration_reference()


            self.state = 793
            self.build_settings()
            self.state = 794
            self.name()
            self.state = 795
            self.match(PBXProjParser.T__1)
            self.state = 796
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_configuration_listContext,0)


        def build_configurations(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configurationsContext,0)


        def default_configuration_is_visible(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_is_visibleContext,0)


        def default_configuration_name(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list" ):
                listener.enterXc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list" ):
                listener.exitXc_configuration_list(self)




    def xc_configuration_list(self):

        localctx = PBXProjParser.Xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_xc_configuration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(PBXProjParser.REFERENCE)
            self.state = 799
            self.match(PBXProjParser.T__3)
            self.state = 800
            self.match(PBXProjParser.T__0)
            self.state = 801
            self.isa_xc_configuration_list()
            self.state = 802
            self.build_configurations()
            self.state = 803
            self.default_configuration_is_visible()
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__109:
                self.state = 804
                self.default_configuration_name()


            self.state = 807
            self.match(PBXProjParser.T__1)
            self.state = 808
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_remote_swift_package_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_remote_swift_package_referenceContext,0)


        def repository_url(self):
            return self.getTypedRuleContext(PBXProjParser.Repository_urlContext,0)


        def requirement(self):
            return self.getTypedRuleContext(PBXProjParser.RequirementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference" ):
                listener.enterXc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference" ):
                listener.exitXc_remote_swift_package_reference(self)




    def xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(PBXProjParser.REFERENCE)
            self.state = 811
            self.match(PBXProjParser.T__3)
            self.state = 812
            self.match(PBXProjParser.T__0)
            self.state = 813
            self.isa_xc_remote_swift_package_reference()
            self.state = 814
            self.repository_url()
            self.state = 815
            self.requirement()
            self.state = 816
            self.match(PBXProjParser.T__1)
            self.state = 817
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_swift_package_product_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_swift_package_product_dependencyContext,0)


        def xc_package(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_packageContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency" ):
                listener.enterXc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency" ):
                listener.exitXc_swift_package_product_dependency(self)




    def xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_xc_swift_package_product_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(PBXProjParser.REFERENCE)
            self.state = 820
            self.match(PBXProjParser.T__3)
            self.state = 821
            self.match(PBXProjParser.T__0)
            self.state = 822
            self.isa_xc_swift_package_product_dependency()
            self.state = 823
            self.xc_package()
            self.state = 824
            self.product_name()
            self.state = 825
            self.match(PBXProjParser.T__1)
            self.state = 826
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_version_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_version_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def current_version(self):
            return self.getTypedRuleContext(PBXProjParser.Current_versionContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def version_group_type(self):
            return self.getTypedRuleContext(PBXProjParser.Version_group_typeContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group" ):
                listener.enterXc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group" ):
                listener.exitXc_version_group(self)




    def xc_version_group(self):

        localctx = PBXProjParser.Xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(PBXProjParser.REFERENCE)
            self.state = 829
            self.match(PBXProjParser.T__3)
            self.state = 830
            self.match(PBXProjParser.T__0)
            self.state = 831
            self.isa_xc_version_group()
            self.state = 832
            self.children()
            self.state = 833
            self.current_version()
            self.state = 834
            self.path()
            self.state = 835
            self.source_tree()
            self.state = 836
            self.version_group_type()
            self.state = 837
            self.match(PBXProjParser.T__1)
            self.state = 838
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_aggregate_target" ):
                listener.enterIsa_pbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_aggregate_target" ):
                listener.exitIsa_pbx_aggregate_target(self)




    def isa_pbx_aggregate_target(self):

        localctx = PBXProjParser.Isa_pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_isa_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(PBXProjParser.ISA)
            self.state = 841
            self.match(PBXProjParser.T__3)
            self.state = 842
            self.match(PBXProjParser.T__6)
            self.state = 843
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_file" ):
                listener.enterIsa_pbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_file" ):
                listener.exitIsa_pbx_build_file(self)




    def isa_pbx_build_file(self):

        localctx = PBXProjParser.Isa_pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_isa_pbx_build_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(PBXProjParser.ISA)
            self.state = 846
            self.match(PBXProjParser.T__3)
            self.state = 847
            self.match(PBXProjParser.T__7)
            self.state = 848
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_container_item_proxy" ):
                listener.enterIsa_pbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_container_item_proxy" ):
                listener.exitIsa_pbx_container_item_proxy(self)




    def isa_pbx_container_item_proxy(self):

        localctx = PBXProjParser.Isa_pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_isa_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(PBXProjParser.ISA)
            self.state = 851
            self.match(PBXProjParser.T__3)
            self.state = 852
            self.match(PBXProjParser.T__8)
            self.state = 853
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_copy_files_build_phase" ):
                listener.enterIsa_pbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_copy_files_build_phase" ):
                listener.exitIsa_pbx_copy_files_build_phase(self)




    def isa_pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_isa_pbx_copy_files_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(PBXProjParser.ISA)
            self.state = 856
            self.match(PBXProjParser.T__3)
            self.state = 857
            self.match(PBXProjParser.T__9)
            self.state = 858
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_file_reference" ):
                listener.enterIsa_pbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_file_reference" ):
                listener.exitIsa_pbx_file_reference(self)




    def isa_pbx_file_reference(self):

        localctx = PBXProjParser.Isa_pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_isa_pbx_file_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(PBXProjParser.ISA)
            self.state = 861
            self.match(PBXProjParser.T__3)
            self.state = 862
            self.match(PBXProjParser.T__10)
            self.state = 863
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_frameworks_build_phase" ):
                listener.enterIsa_pbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_frameworks_build_phase" ):
                listener.exitIsa_pbx_frameworks_build_phase(self)




    def isa_pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_isa_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(PBXProjParser.ISA)
            self.state = 866
            self.match(PBXProjParser.T__3)
            self.state = 867
            self.match(PBXProjParser.T__11)
            self.state = 868
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_group" ):
                listener.enterIsa_pbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_group" ):
                listener.exitIsa_pbx_group(self)




    def isa_pbx_group(self):

        localctx = PBXProjParser.Isa_pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_isa_pbx_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(PBXProjParser.ISA)
            self.state = 871
            self.match(PBXProjParser.T__3)
            self.state = 872
            self.match(PBXProjParser.T__12)
            self.state = 873
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_header_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_header_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_header_build_phase" ):
                listener.enterIsa_pbx_header_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_header_build_phase" ):
                listener.exitIsa_pbx_header_build_phase(self)




    def isa_pbx_header_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_header_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_isa_pbx_header_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(PBXProjParser.ISA)
            self.state = 876
            self.match(PBXProjParser.T__3)
            self.state = 877
            self.match(PBXProjParser.T__13)
            self.state = 878
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_native_target" ):
                listener.enterIsa_pbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_native_target" ):
                listener.exitIsa_pbx_native_target(self)




    def isa_pbx_native_target(self):

        localctx = PBXProjParser.Isa_pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_isa_pbx_native_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(PBXProjParser.ISA)
            self.state = 881
            self.match(PBXProjParser.T__3)
            self.state = 882
            self.match(PBXProjParser.T__14)
            self.state = 883
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_project" ):
                listener.enterIsa_pbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_project" ):
                listener.exitIsa_pbx_project(self)




    def isa_pbx_project(self):

        localctx = PBXProjParser.Isa_pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_isa_pbx_project)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(PBXProjParser.ISA)
            self.state = 886
            self.match(PBXProjParser.T__3)
            self.state = 887
            self.match(PBXProjParser.T__15)
            self.state = 888
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_reference_proxy" ):
                listener.enterIsa_pbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_reference_proxy" ):
                listener.exitIsa_pbx_reference_proxy(self)




    def isa_pbx_reference_proxy(self):

        localctx = PBXProjParser.Isa_pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_isa_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(PBXProjParser.ISA)
            self.state = 891
            self.match(PBXProjParser.T__3)
            self.state = 892
            self.match(PBXProjParser.T__16)
            self.state = 893
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_resources_build_phase" ):
                listener.enterIsa_pbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_resources_build_phase" ):
                listener.exitIsa_pbx_resources_build_phase(self)




    def isa_pbx_resources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_isa_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(PBXProjParser.ISA)
            self.state = 896
            self.match(PBXProjParser.T__3)
            self.state = 897
            self.match(PBXProjParser.T__17)
            self.state = 898
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_shell_script_build_phase" ):
                listener.enterIsa_pbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_shell_script_build_phase" ):
                listener.exitIsa_pbx_shell_script_build_phase(self)




    def isa_pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_isa_pbx_shell_script_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(PBXProjParser.ISA)
            self.state = 901
            self.match(PBXProjParser.T__3)
            self.state = 902
            self.match(PBXProjParser.T__18)
            self.state = 903
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_sources_build_phase" ):
                listener.enterIsa_pbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_sources_build_phase" ):
                listener.exitIsa_pbx_sources_build_phase(self)




    def isa_pbx_sources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_isa_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(PBXProjParser.ISA)
            self.state = 906
            self.match(PBXProjParser.T__3)
            self.state = 907
            self.match(PBXProjParser.T__19)
            self.state = 908
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_target_dependency" ):
                listener.enterIsa_pbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_target_dependency" ):
                listener.exitIsa_pbx_target_dependency(self)




    def isa_pbx_target_dependency(self):

        localctx = PBXProjParser.Isa_pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_isa_pbx_target_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(PBXProjParser.ISA)
            self.state = 911
            self.match(PBXProjParser.T__3)
            self.state = 912
            self.match(PBXProjParser.T__20)
            self.state = 913
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_variant_group" ):
                listener.enterIsa_pbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_variant_group" ):
                listener.exitIsa_pbx_variant_group(self)




    def isa_pbx_variant_group(self):

        localctx = PBXProjParser.Isa_pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_isa_pbx_variant_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(PBXProjParser.ISA)
            self.state = 916
            self.match(PBXProjParser.T__3)
            self.state = 917
            self.match(PBXProjParser.T__21)
            self.state = 918
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_build_configuration" ):
                listener.enterIsa_xc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_build_configuration" ):
                listener.exitIsa_xc_build_configuration(self)




    def isa_xc_build_configuration(self):

        localctx = PBXProjParser.Isa_xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_isa_xc_build_configuration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(PBXProjParser.ISA)
            self.state = 921
            self.match(PBXProjParser.T__3)
            self.state = 922
            self.match(PBXProjParser.T__22)
            self.state = 923
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_configuration_list" ):
                listener.enterIsa_xc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_configuration_list" ):
                listener.exitIsa_xc_configuration_list(self)




    def isa_xc_configuration_list(self):

        localctx = PBXProjParser.Isa_xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_isa_xc_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(PBXProjParser.ISA)
            self.state = 926
            self.match(PBXProjParser.T__3)
            self.state = 927
            self.match(PBXProjParser.T__23)
            self.state = 928
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_remote_swift_package_reference" ):
                listener.enterIsa_xc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_remote_swift_package_reference" ):
                listener.exitIsa_xc_remote_swift_package_reference(self)




    def isa_xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Isa_xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_isa_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(PBXProjParser.ISA)
            self.state = 931
            self.match(PBXProjParser.T__3)
            self.state = 932
            self.match(PBXProjParser.T__24)
            self.state = 933
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_swift_package_product_dependency" ):
                listener.enterIsa_xc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_swift_package_product_dependency" ):
                listener.exitIsa_xc_swift_package_product_dependency(self)




    def isa_xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Isa_xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_isa_xc_swift_package_product_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(PBXProjParser.ISA)
            self.state = 936
            self.match(PBXProjParser.T__3)
            self.state = 937
            self.match(PBXProjParser.T__25)
            self.state = 938
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_version_group" ):
                listener.enterIsa_xc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_version_group" ):
                listener.exitIsa_xc_version_group(self)




    def isa_xc_version_group(self):

        localctx = PBXProjParser.Isa_xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_isa_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(PBXProjParser.ISA)
            self.state = 941
            self.match(PBXProjParser.T__3)
            self.state = 942
            self.match(PBXProjParser.T__26)
            self.state = 943
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_ref" ):
                listener.enterFile_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_ref" ):
                listener.exitFile_ref(self)




    def file_ref(self):

        localctx = PBXProjParser.File_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_file_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(PBXProjParser.T__27)
            self.state = 946
            self.match(PBXProjParser.T__3)
            self.state = 947
            self.match(PBXProjParser.REFERENCE)
            self.state = 948
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref" ):
                listener.enterProduct_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref" ):
                listener.exitProduct_ref(self)




    def product_ref(self):

        localctx = PBXProjParser.Product_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_product_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(PBXProjParser.T__28)
            self.state = 951
            self.match(PBXProjParser.T__3)
            self.state = 952
            self.match(PBXProjParser.REFERENCE)
            self.state = 953
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_portalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_container_portal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_portal" ):
                listener.enterContainer_portal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_portal" ):
                listener.exitContainer_portal(self)




    def container_portal(self):

        localctx = PBXProjParser.Container_portalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_container_portal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(PBXProjParser.T__29)
            self.state = 956
            self.match(PBXProjParser.T__3)
            self.state = 957
            self.match(PBXProjParser.REFERENCE)
            self.state = 958
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_proxy_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_type" ):
                listener.enterProxy_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_type" ):
                listener.exitProxy_type(self)




    def proxy_type(self):

        localctx = PBXProjParser.Proxy_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_proxy_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(PBXProjParser.T__30)
            self.state = 961
            self.match(PBXProjParser.T__3)
            self.state = 962
            self.match(PBXProjParser.NUMBER)
            self.state = 963
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_global_id_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_global_id_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_global_id_string" ):
                listener.enterRemote_global_id_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_global_id_string" ):
                listener.exitRemote_global_id_string(self)




    def remote_global_id_string(self):

        localctx = PBXProjParser.Remote_global_id_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_remote_global_id_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(PBXProjParser.T__31)
            self.state = 966
            self.match(PBXProjParser.T__3)
            self.state = 967
            self.match(PBXProjParser.REFERENCE)
            self.state = 968
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_info" ):
                listener.enterRemote_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_info" ):
                listener.exitRemote_info(self)




    def remote_info(self):

        localctx = PBXProjParser.Remote_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_remote_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(PBXProjParser.T__32)
            self.state = 971
            self.match(PBXProjParser.T__3)
            self.state = 972
            self.any_string()
            self.state = 973
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_encoding" ):
                listener.enterFile_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_encoding" ):
                listener.exitFile_encoding(self)




    def file_encoding(self):

        localctx = PBXProjParser.File_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_file_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(PBXProjParser.T__33)
            self.state = 976
            self.match(PBXProjParser.T__3)
            self.state = 977
            self.match(PBXProjParser.NUMBER)
            self.state = 978
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_file_type" ):
                listener.enterExplicit_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_file_type" ):
                listener.exitExplicit_file_type(self)




    def explicit_file_type(self):

        localctx = PBXProjParser.Explicit_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_explicit_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(PBXProjParser.T__34)
            self.state = 981
            self.match(PBXProjParser.T__3)
            self.state = 982
            self.any_string()
            self.state = 983
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_known_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_last_known_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_known_file_type" ):
                listener.enterLast_known_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_known_file_type" ):
                listener.exitLast_known_file_type(self)




    def last_known_file_type(self):

        localctx = PBXProjParser.Last_known_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_last_known_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(PBXProjParser.T__35)
            self.state = 986
            self.match(PBXProjParser.T__3)
            self.state = 987
            self.any_string()
            self.state = 988
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_in_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_include_in_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_in_index" ):
                listener.enterInclude_in_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_in_index" ):
                listener.exitInclude_in_index(self)




    def include_in_index(self):

        localctx = PBXProjParser.Include_in_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_include_in_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(PBXProjParser.T__36)
            self.state = 991
            self.match(PBXProjParser.T__3)
            self.state = 992
            self.match(PBXProjParser.NUMBER)
            self.state = 993
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indent_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_indent_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndent_width" ):
                listener.enterIndent_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndent_width" ):
                listener.exitIndent_width(self)




    def indent_width(self):

        localctx = PBXProjParser.Indent_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_indent_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(PBXProjParser.T__37)
            self.state = 996
            self.match(PBXProjParser.T__3)
            self.state = 997
            self.match(PBXProjParser.NUMBER)
            self.state = 998
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tab_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_tab_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_width" ):
                listener.enterTab_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_width" ):
                listener.exitTab_width(self)




    def tab_width(self):

        localctx = PBXProjParser.Tab_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_tab_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(PBXProjParser.T__38)
            self.state = 1001
            self.match(PBXProjParser.T__3)
            self.state = 1002
            self.match(PBXProjParser.NUMBER)
            self.state = 1003
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uses_tabsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_uses_tabs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUses_tabs" ):
                listener.enterUses_tabs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUses_tabs" ):
                listener.exitUses_tabs(self)




    def uses_tabs(self):

        localctx = PBXProjParser.Uses_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_uses_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(PBXProjParser.T__39)
            self.state = 1006
            self.match(PBXProjParser.T__3)
            self.state = 1007
            self.match(PBXProjParser.NUMBER)
            self.state = 1008
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filter" ):
                listener.enterPlatform_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filter" ):
                listener.exitPlatform_filter(self)




    def platform_filter(self):

        localctx = PBXProjParser.Platform_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_platform_filter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(PBXProjParser.T__40)
            self.state = 1011
            self.match(PBXProjParser.T__3)
            self.state = 1012
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1013
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChildrenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildren" ):
                listener.enterChildren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildren" ):
                listener.exitChildren(self)




    def children(self):

        localctx = PBXProjParser.ChildrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(PBXProjParser.T__41)
            self.state = 1016
            self.match(PBXProjParser.T__3)
            self.state = 1017
            self.reference_list()
            self.state = 1018
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_install_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_install_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_install_path" ):
                listener.enterProduct_install_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_install_path" ):
                listener.exitProduct_install_path(self)




    def product_install_path(self):

        localctx = PBXProjParser.Product_install_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_product_install_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(PBXProjParser.T__42)
            self.state = 1021
            self.match(PBXProjParser.T__3)
            self.state = 1022
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1023
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repository_urlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_repository_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepository_url" ):
                listener.enterRepository_url(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepository_url" ):
                listener.exitRepository_url(self)




    def repository_url(self):

        localctx = PBXProjParser.Repository_urlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_repository_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(PBXProjParser.T__43)
            self.state = 1026
            self.match(PBXProjParser.T__3)
            self.state = 1027
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1028
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = PBXProjParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(PBXProjParser.T__44)
            self.state = 1031
            self.match(PBXProjParser.T__3)
            self.state = 1032
            self.match(PBXProjParser.T__0)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (PBXProjParser.NUMBER - 120)) | (1 << (PBXProjParser.QUOTED_STRING - 120)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 120)) | (1 << (PBXProjParser.VARIABLE - 120)))) != 0):
                self.state = 1033
                self.key_value()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.match(PBXProjParser.T__1)
            self.state = 1040
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_packageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_package" ):
                listener.enterXc_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_package" ):
                listener.exitXc_package(self)




    def xc_package(self):

        localctx = PBXProjParser.Xc_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_xc_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(PBXProjParser.T__45)
            self.state = 1043
            self.match(PBXProjParser.T__3)
            self.state = 1044
            self.match(PBXProjParser.REFERENCE)
            self.state = 1045
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_product_dependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_product_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_product_dependencies" ):
                listener.enterPackage_product_dependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_product_dependencies" ):
                listener.exitPackage_product_dependencies(self)




    def package_product_dependencies(self):

        localctx = PBXProjParser.Package_product_dependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_package_product_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(PBXProjParser.T__46)
            self.state = 1048
            self.match(PBXProjParser.T__3)
            self.state = 1049
            self.reference_list()
            self.state = 1050
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PBXProjParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(PBXProjParser.T__47)
            self.state = 1053
            self.match(PBXProjParser.T__3)
            self.state = 1054
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1055
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = PBXProjParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(PBXProjParser.T__48)
            self.state = 1058
            self.match(PBXProjParser.T__3)
            self.state = 1059
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1060
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_treeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_source_tree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_tree" ):
                listener.enterSource_tree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_tree" ):
                listener.exitSource_tree(self)




    def source_tree(self):

        localctx = PBXProjParser.Source_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_source_tree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(PBXProjParser.T__49)
            self.state = 1063
            self.match(PBXProjParser.T__3)
            self.state = 1064
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1065
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_action_maskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_action_mask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_action_mask" ):
                listener.enterBuild_action_mask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_action_mask" ):
                listener.exitBuild_action_mask(self)




    def build_action_mask(self):

        localctx = PBXProjParser.Build_action_maskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_build_action_mask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(PBXProjParser.T__50)
            self.state = 1068
            self.match(PBXProjParser.T__3)
            self.state = 1069
            self.match(PBXProjParser.NUMBER)
            self.state = 1070
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiles" ):
                listener.enterFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiles" ):
                listener.exitFiles(self)




    def files(self):

        localctx = PBXProjParser.FilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(PBXProjParser.T__51)
            self.state = 1073
            self.match(PBXProjParser.T__3)
            self.state = 1074
            self.reference_list()
            self.state = 1075
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Run_only_for_deployment_postprocessingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_run_only_for_deployment_postprocessing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRun_only_for_deployment_postprocessing" ):
                listener.enterRun_only_for_deployment_postprocessing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRun_only_for_deployment_postprocessing" ):
                listener.exitRun_only_for_deployment_postprocessing(self)




    def run_only_for_deployment_postprocessing(self):

        localctx = PBXProjParser.Run_only_for_deployment_postprocessingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_run_only_for_deployment_postprocessing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(PBXProjParser.T__52)
            self.state = 1078
            self.match(PBXProjParser.T__3)
            self.state = 1079
            self.match(PBXProjParser.NUMBER)
            self.state = 1080
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_list" ):
                listener.enterReference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_list" ):
                listener.exitReference_list(self)




    def reference_list(self):

        localctx = PBXProjParser.Reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_reference_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(PBXProjParser.T__53)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.REFERENCE:
                self.state = 1083
                self.match(PBXProjParser.REFERENCE)
                self.state = 1084
                self.match(PBXProjParser.T__54)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1090
            self.match(PBXProjParser.T__55)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_string_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string_list" ):
                listener.enterAny_string_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string_list" ):
                listener.exitAny_string_list(self)




    def any_string_list(self):

        localctx = PBXProjParser.Any_string_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_any_string_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(PBXProjParser.T__53)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (PBXProjParser.NUMBER - 120)) | (1 << (PBXProjParser.QUOTED_STRING - 120)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 120)) | (1 << (PBXProjParser.VARIABLE - 120)))) != 0):
                self.state = 1093
                self.any_string()
                self.state = 1094
                self.match(PBXProjParser.T__54)
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1101
            self.match(PBXProjParser.T__55)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_quoted_strings_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.NON_QUOTED_STRING)
            else:
                return self.getToken(PBXProjParser.NON_QUOTED_STRING, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_non_quoted_strings_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_quoted_strings_list" ):
                listener.enterNon_quoted_strings_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_quoted_strings_list" ):
                listener.exitNon_quoted_strings_list(self)




    def non_quoted_strings_list(self):

        localctx = PBXProjParser.Non_quoted_strings_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_non_quoted_strings_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(PBXProjParser.T__53)
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.NON_QUOTED_STRING:
                self.state = 1104
                self.match(PBXProjParser.NON_QUOTED_STRING)
                self.state = 1105
                self.match(PBXProjParser.T__54)
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1111
            self.match(PBXProjParser.T__55)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configuration_list" ):
                listener.enterBuild_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configuration_list" ):
                listener.exitBuild_configuration_list(self)




    def build_configuration_list(self):

        localctx = PBXProjParser.Build_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_build_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(PBXProjParser.T__56)
            self.state = 1114
            self.match(PBXProjParser.T__3)
            self.state = 1115
            self.match(PBXProjParser.REFERENCE)
            self.state = 1116
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_phasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_phases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_phases" ):
                listener.enterBuild_phases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_phases" ):
                listener.exitBuild_phases(self)




    def build_phases(self):

        localctx = PBXProjParser.Build_phasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_build_phases)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(PBXProjParser.T__57)
            self.state = 1119
            self.match(PBXProjParser.T__3)
            self.state = 1120
            self.reference_list()
            self.state = 1121
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_rules" ):
                listener.enterBuild_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_rules" ):
                listener.exitBuild_rules(self)




    def build_rules(self):

        localctx = PBXProjParser.Build_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_build_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.match(PBXProjParser.T__58)
            self.state = 1124
            self.match(PBXProjParser.T__3)
            self.state = 1125
            self.reference_list()
            self.state = 1126
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependencies" ):
                listener.enterDependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependencies" ):
                listener.exitDependencies(self)




    def dependencies(self):

        localctx = PBXProjParser.DependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(PBXProjParser.T__59)
            self.state = 1129
            self.match(PBXProjParser.T__3)
            self.state = 1130
            self.reference_list()
            self.state = 1131
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_name" ):
                listener.enterProduct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_name" ):
                listener.exitProduct_name(self)




    def product_name(self):

        localctx = PBXProjParser.Product_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_product_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(PBXProjParser.T__60)
            self.state = 1134
            self.match(PBXProjParser.T__3)
            self.state = 1135
            self.any_string()
            self.state = 1136
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_reference" ):
                listener.enterProduct_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_reference" ):
                listener.exitProduct_reference(self)




    def product_reference(self):

        localctx = PBXProjParser.Product_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_product_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(PBXProjParser.T__61)
            self.state = 1139
            self.match(PBXProjParser.T__3)
            self.state = 1140
            self.match(PBXProjParser.REFERENCE)
            self.state = 1141
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_type" ):
                listener.enterProduct_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_type" ):
                listener.exitProduct_type(self)




    def product_type(self):

        localctx = PBXProjParser.Product_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_product_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(PBXProjParser.T__62)
            self.state = 1144
            self.match(PBXProjParser.T__3)
            self.state = 1145
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1146
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_endingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_line_ending

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_ending" ):
                listener.enterLine_ending(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_ending" ):
                listener.exitLine_ending(self)




    def line_ending(self):

        localctx = PBXProjParser.Line_endingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_line_ending)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(PBXProjParser.T__63)
            self.state = 1149
            self.match(PBXProjParser.T__3)
            self.state = 1150
            self.match(PBXProjParser.NUMBER)
            self.state = 1151
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_language_specification_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_language_specification_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_language_specification_identifier" ):
                listener.enterXc_language_specification_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_language_specification_identifier" ):
                listener.exitXc_language_specification_identifier(self)




    def xc_language_specification_identifier(self):

        localctx = PBXProjParser.Xc_language_specification_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_xc_language_specification_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(PBXProjParser.T__64)
            self.state = 1154
            self.match(PBXProjParser.T__3)
            self.state = 1155
            self.any_string()
            self.state = 1156
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plist_structure_definition_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_plist_structure_definition_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlist_structure_definition_identifier" ):
                listener.enterPlist_structure_definition_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlist_structure_definition_identifier" ):
                listener.exitPlist_structure_definition_identifier(self)




    def plist_structure_definition_identifier(self):

        localctx = PBXProjParser.Plist_structure_definition_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_plist_structure_definition_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(PBXProjParser.T__65)
            self.state = 1159
            self.match(PBXProjParser.T__3)
            self.state = 1160
            self.any_string()
            self.state = 1161
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefix(self):
            return self.getTypedRuleContext(PBXProjParser.Class_prefixContext,0)


        def default_build_system_type_for_workspace(self):
            return self.getTypedRuleContext(PBXProjParser.Default_build_system_type_for_workspaceContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def last_swift_update_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_update_checkContext,0)


        def build_targets_in_parallel(self):
            return self.getTypedRuleContext(PBXProjParser.Build_targets_in_parallelContext,0)


        def last_testing_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_testing_upgrade_checkContext,0)


        def last_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_upgrade_checkContext,0)


        def organization_name(self):
            return self.getTypedRuleContext(PBXProjParser.Organization_nameContext,0)


        def target_attributes(self):
            return self.getTypedRuleContext(PBXProjParser.Target_attributesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PBXProjParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(PBXProjParser.T__66)
            self.state = 1164
            self.match(PBXProjParser.T__3)
            self.state = 1165
            self.match(PBXProjParser.T__0)
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__114:
                self.state = 1166
                self.class_prefix()


            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__68:
                self.state = 1169
                self.default_build_system_type_for_workspace()


            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__67:
                self.state = 1172
                self.last_swift_migration()


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__69:
                self.state = 1175
                self.last_swift_update_check()


            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__70:
                self.state = 1178
                self.build_targets_in_parallel()


            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__71:
                self.state = 1181
                self.last_testing_upgrade_check()


            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__72:
                self.state = 1184
                self.last_upgrade_check()


            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__73:
                self.state = 1187
                self.organization_name()


            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__74:
                self.state = 1190
                self.target_attributes()


            self.state = 1193
            self.match(PBXProjParser.T__1)
            self.state = 1194
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_migrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_migration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_migration" ):
                listener.enterLast_swift_migration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_migration" ):
                listener.exitLast_swift_migration(self)




    def last_swift_migration(self):

        localctx = PBXProjParser.Last_swift_migrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_last_swift_migration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(PBXProjParser.T__67)
            self.state = 1197
            self.match(PBXProjParser.T__3)
            self.state = 1198
            self.match(PBXProjParser.NUMBER)
            self.state = 1199
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_build_system_type_for_workspaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_build_system_type_for_workspace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_build_system_type_for_workspace" ):
                listener.enterDefault_build_system_type_for_workspace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_build_system_type_for_workspace" ):
                listener.exitDefault_build_system_type_for_workspace(self)




    def default_build_system_type_for_workspace(self):

        localctx = PBXProjParser.Default_build_system_type_for_workspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_default_build_system_type_for_workspace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(PBXProjParser.T__68)
            self.state = 1202
            self.match(PBXProjParser.T__3)
            self.state = 1203
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1204
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_update_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_update_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_update_check" ):
                listener.enterLast_swift_update_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_update_check" ):
                listener.exitLast_swift_update_check(self)




    def last_swift_update_check(self):

        localctx = PBXProjParser.Last_swift_update_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_last_swift_update_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.match(PBXProjParser.T__69)
            self.state = 1207
            self.match(PBXProjParser.T__3)
            self.state = 1208
            self.match(PBXProjParser.NUMBER)
            self.state = 1209
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_targets_in_parallelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_targets_in_parallel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_targets_in_parallel" ):
                listener.enterBuild_targets_in_parallel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_targets_in_parallel" ):
                listener.exitBuild_targets_in_parallel(self)




    def build_targets_in_parallel(self):

        localctx = PBXProjParser.Build_targets_in_parallelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_build_targets_in_parallel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(PBXProjParser.T__70)
            self.state = 1212
            self.match(PBXProjParser.T__3)
            self.state = 1213
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1214
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_testing_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_testing_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_testing_upgrade_check" ):
                listener.enterLast_testing_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_testing_upgrade_check" ):
                listener.exitLast_testing_upgrade_check(self)




    def last_testing_upgrade_check(self):

        localctx = PBXProjParser.Last_testing_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_last_testing_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(PBXProjParser.T__71)
            self.state = 1217
            self.match(PBXProjParser.T__3)
            self.state = 1218
            self.match(PBXProjParser.NUMBER)
            self.state = 1219
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_upgrade_check" ):
                listener.enterLast_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_upgrade_check" ):
                listener.exitLast_upgrade_check(self)




    def last_upgrade_check(self):

        localctx = PBXProjParser.Last_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_last_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(PBXProjParser.T__72)
            self.state = 1222
            self.match(PBXProjParser.T__3)
            self.state = 1223
            self.match(PBXProjParser.NUMBER)
            self.state = 1224
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Organization_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_organization_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrganization_name" ):
                listener.enterOrganization_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrganization_name" ):
                listener.exitOrganization_name(self)




    def organization_name(self):

        localctx = PBXProjParser.Organization_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_organization_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(PBXProjParser.T__73)
            self.state = 1227
            self.match(PBXProjParser.T__3)
            self.state = 1228
            self.any_string()
            self.state = 1229
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Target_attributeContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Target_attributeContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attributes" ):
                listener.enterTarget_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attributes" ):
                listener.exitTarget_attributes(self)




    def target_attributes(self):

        localctx = PBXProjParser.Target_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_target_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(PBXProjParser.T__74)
            self.state = 1232
            self.match(PBXProjParser.T__3)
            self.state = 1233
            self.match(PBXProjParser.T__0)
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.REFERENCE:
                self.state = 1234
                self.target_attribute()
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1240
            self.match(PBXProjParser.T__1)
            self.state = 1241
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def created_on_tools_version(self):
            return self.getTypedRuleContext(PBXProjParser.Created_on_tools_versionContext,0)


        def test_target_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Test_target_idContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Test_target_idContext,i)


        def development_team(self):
            return self.getTypedRuleContext(PBXProjParser.Development_teamContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def provisioning_style(self):
            return self.getTypedRuleContext(PBXProjParser.Provisioning_styleContext,0)


        def system_capabilities(self):
            return self.getTypedRuleContext(PBXProjParser.System_capabilitiesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attribute" ):
                listener.enterTarget_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attribute" ):
                listener.exitTarget_attribute(self)




    def target_attribute(self):

        localctx = PBXProjParser.Target_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_target_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(PBXProjParser.REFERENCE)
            self.state = 1244
            self.match(PBXProjParser.T__3)
            self.state = 1245
            self.match(PBXProjParser.T__0)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__75:
                self.state = 1246
                self.created_on_tools_version()


            self.state = 1250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 1249
                self.test_target_id()


            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__77:
                self.state = 1252
                self.development_team()


            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__67:
                self.state = 1255
                self.last_swift_migration()


            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__78:
                self.state = 1258
                self.provisioning_style()


            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__111:
                self.state = 1261
                self.system_capabilities()


            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__76:
                self.state = 1264
                self.test_target_id()


            self.state = 1267
            self.match(PBXProjParser.T__1)
            self.state = 1268
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Created_on_tools_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_created_on_tools_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreated_on_tools_version" ):
                listener.enterCreated_on_tools_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreated_on_tools_version" ):
                listener.exitCreated_on_tools_version(self)




    def created_on_tools_version(self):

        localctx = PBXProjParser.Created_on_tools_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_created_on_tools_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(PBXProjParser.T__75)
            self.state = 1271
            self.match(PBXProjParser.T__3)
            self.state = 1272
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1273
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_target_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_test_target_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_target_id" ):
                listener.enterTest_target_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_target_id" ):
                listener.exitTest_target_id(self)




    def test_target_id(self):

        localctx = PBXProjParser.Test_target_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_test_target_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(PBXProjParser.T__76)
            self.state = 1276
            self.match(PBXProjParser.T__3)
            self.state = 1277
            self.match(PBXProjParser.REFERENCE)
            self.state = 1278
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_teamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team" ):
                listener.enterDevelopment_team(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team" ):
                listener.exitDevelopment_team(self)




    def development_team(self):

        localctx = PBXProjParser.Development_teamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_development_team)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(PBXProjParser.T__77)
            self.state = 1281
            self.match(PBXProjParser.T__3)
            self.state = 1282
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1283
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provisioning_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_provisioning_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvisioning_style" ):
                listener.enterProvisioning_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvisioning_style" ):
                listener.exitProvisioning_style(self)




    def provisioning_style(self):

        localctx = PBXProjParser.Provisioning_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_provisioning_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(PBXProjParser.T__78)
            self.state = 1286
            self.match(PBXProjParser.T__3)
            self.state = 1287
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1288
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compatibility_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_compatibility_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompatibility_version" ):
                listener.enterCompatibility_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompatibility_version" ):
                listener.exitCompatibility_version(self)




    def compatibility_version(self):

        localctx = PBXProjParser.Compatibility_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_compatibility_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.match(PBXProjParser.T__79)
            self.state = 1291
            self.match(PBXProjParser.T__3)
            self.state = 1292
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1293
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_regionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_region

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_region" ):
                listener.enterDevelopment_region(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_region" ):
                listener.exitDevelopment_region(self)




    def development_region(self):

        localctx = PBXProjParser.Development_regionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_development_region)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(PBXProjParser.T__80)
            self.state = 1296
            self.match(PBXProjParser.T__3)
            self.state = 1297
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1298
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_scanned_for_encodingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_has_scanned_for_encodings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_scanned_for_encodings" ):
                listener.enterHas_scanned_for_encodings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_scanned_for_encodings" ):
                listener.exitHas_scanned_for_encodings(self)




    def has_scanned_for_encodings(self):

        localctx = PBXProjParser.Has_scanned_for_encodingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_has_scanned_for_encodings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(PBXProjParser.T__81)
            self.state = 1301
            self.match(PBXProjParser.T__3)
            self.state = 1302
            self.match(PBXProjParser.NUMBER)
            self.state = 1303
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Known_regionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_known_regions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKnown_regions" ):
                listener.enterKnown_regions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKnown_regions" ):
                listener.exitKnown_regions(self)




    def known_regions(self):

        localctx = PBXProjParser.Known_regionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_known_regions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(PBXProjParser.T__82)
            self.state = 1306
            self.match(PBXProjParser.T__3)
            self.state = 1307
            self.any_string_list()
            self.state = 1308
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_main_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_group" ):
                listener.enterMain_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_group" ):
                listener.exitMain_group(self)




    def main_group(self):

        localctx = PBXProjParser.Main_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_main_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(PBXProjParser.T__83)
            self.state = 1311
            self.match(PBXProjParser.T__3)
            self.state = 1312
            self.match(PBXProjParser.REFERENCE)
            self.state = 1313
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_ref_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref_group" ):
                listener.enterProduct_ref_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref_group" ):
                listener.exitProduct_ref_group(self)




    def product_ref_group(self):

        localctx = PBXProjParser.Product_ref_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_product_ref_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(PBXProjParser.T__84)
            self.state = 1316
            self.match(PBXProjParser.T__3)
            self.state = 1317
            self.match(PBXProjParser.REFERENCE)
            self.state = 1318
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_references" ):
                listener.enterPackage_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_references" ):
                listener.exitPackage_references(self)




    def package_references(self):

        localctx = PBXProjParser.Package_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_package_references)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(PBXProjParser.T__85)
            self.state = 1321
            self.match(PBXProjParser.T__3)
            self.state = 1322
            self.reference_list()
            self.state = 1323
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_dir_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_dir_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_dir_path" ):
                listener.enterProject_dir_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_dir_path" ):
                listener.exitProject_dir_path(self)




    def project_dir_path(self):

        localctx = PBXProjParser.Project_dir_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_project_dir_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(PBXProjParser.T__86)
            self.state = 1326
            self.match(PBXProjParser.T__3)
            self.state = 1327
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1328
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def project_references_list(self):
            return self.getTypedRuleContext(PBXProjParser.Project_references_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references" ):
                listener.enterProject_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references" ):
                listener.exitProject_references(self)




    def project_references(self):

        localctx = PBXProjParser.Project_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_project_references)
        try:
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1330
                self.match(PBXProjParser.T__87)
                self.state = 1331
                self.match(PBXProjParser.T__3)
                self.state = 1332
                self.any_string()
                self.state = 1333
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1335
                self.match(PBXProjParser.T__87)
                self.state = 1336
                self.match(PBXProjParser.T__3)
                self.state = 1337
                self.match(PBXProjParser.T__53)
                self.state = 1338
                self.project_references_list()
                self.state = 1339
                self.match(PBXProjParser.T__55)
                self.state = 1340
                self.match(PBXProjParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_root" ):
                listener.enterProject_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_root" ):
                listener.exitProject_root(self)




    def project_root(self):

        localctx = PBXProjParser.Project_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_project_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(PBXProjParser.T__88)
            self.state = 1345
            self.match(PBXProjParser.T__3)
            self.state = 1346
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1347
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargets" ):
                listener.enterTargets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargets" ):
                listener.exitTargets(self)




    def targets(self):

        localctx = PBXProjParser.TargetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_targets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(PBXProjParser.T__89)
            self.state = 1350
            self.match(PBXProjParser.T__3)
            self.state = 1351
            self.reference_list()
            self.state = 1352
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_file_list_paths" ):
                listener.enterInput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_file_list_paths" ):
                listener.exitInput_file_list_paths(self)




    def input_file_list_paths(self):

        localctx = PBXProjParser.Input_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_input_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(PBXProjParser.T__90)
            self.state = 1355
            self.match(PBXProjParser.T__3)
            self.state = 1356
            self.any_string_list()
            self.state = 1357
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_paths" ):
                listener.enterInput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_paths" ):
                listener.exitInput_paths(self)




    def input_paths(self):

        localctx = PBXProjParser.Input_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_input_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.match(PBXProjParser.T__91)
            self.state = 1360
            self.match(PBXProjParser.T__3)
            self.state = 1361
            self.any_string_list()
            self.state = 1362
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_file_list_paths" ):
                listener.enterOutput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_file_list_paths" ):
                listener.exitOutput_file_list_paths(self)




    def output_file_list_paths(self):

        localctx = PBXProjParser.Output_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_output_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(PBXProjParser.T__92)
            self.state = 1365
            self.match(PBXProjParser.T__3)
            self.state = 1366
            self.any_string_list()
            self.state = 1367
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_paths" ):
                listener.enterOutput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_paths" ):
                listener.exitOutput_paths(self)




    def output_paths(self):

        localctx = PBXProjParser.Output_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_output_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(PBXProjParser.T__93)
            self.state = 1370
            self.match(PBXProjParser.T__3)
            self.state = 1371
            self.any_string_list()
            self.state = 1372
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_path" ):
                listener.enterShell_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_path" ):
                listener.exitShell_path(self)




    def shell_path(self):

        localctx = PBXProjParser.Shell_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_shell_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(PBXProjParser.T__94)
            self.state = 1375
            self.match(PBXProjParser.T__3)
            self.state = 1376
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1377
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_script" ):
                listener.enterShell_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_script" ):
                listener.exitShell_script(self)




    def shell_script(self):

        localctx = PBXProjParser.Shell_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_shell_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(PBXProjParser.T__95)
            self.state = 1380
            self.match(PBXProjParser.T__3)
            self.state = 1381
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1382
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_env_vars_in_logContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_show_env_vars_in_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_env_vars_in_log" ):
                listener.enterShow_env_vars_in_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_env_vars_in_log" ):
                listener.exitShow_env_vars_in_log(self)




    def show_env_vars_in_log(self):

        localctx = PBXProjParser.Show_env_vars_in_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_show_env_vars_in_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(PBXProjParser.T__96)
            self.state = 1385
            self.match(PBXProjParser.T__3)
            self.state = 1386
            self.match(PBXProjParser.NUMBER)
            self.state = 1387
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget" ):
                listener.enterTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget" ):
                listener.exitTarget(self)




    def target(self):

        localctx = PBXProjParser.TargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(PBXProjParser.T__97)
            self.state = 1390
            self.match(PBXProjParser.T__3)
            self.state = 1391
            self.match(PBXProjParser.REFERENCE)
            self.state = 1392
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_proxy" ):
                listener.enterTarget_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_proxy" ):
                listener.exitTarget_proxy(self)




    def target_proxy(self):

        localctx = PBXProjParser.Target_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_target_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(PBXProjParser.T__98)
            self.state = 1395
            self.match(PBXProjParser.T__3)
            self.state = 1396
            self.match(PBXProjParser.REFERENCE)
            self.state = 1397
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_type" ):
                listener.enterFile_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_type" ):
                listener.exitFile_type(self)




    def file_type(self):

        localctx = PBXProjParser.File_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.match(PBXProjParser.T__99)
            self.state = 1400
            self.match(PBXProjParser.T__3)
            self.state = 1401
            self.any_string()
            self.state = 1402
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_ref" ):
                listener.enterRemote_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_ref" ):
                listener.exitRemote_ref(self)




    def remote_ref(self):

        localctx = PBXProjParser.Remote_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_remote_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(PBXProjParser.T__100)
            self.state = 1405
            self.match(PBXProjParser.T__3)
            self.state = 1406
            self.match(PBXProjParser.REFERENCE)
            self.state = 1407
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_configuration_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_base_configuration_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_configuration_reference" ):
                listener.enterBase_configuration_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_configuration_reference" ):
                listener.exitBase_configuration_reference(self)




    def base_configuration_reference(self):

        localctx = PBXProjParser.Base_configuration_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_base_configuration_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.match(PBXProjParser.T__101)
            self.state = 1410
            self.match(PBXProjParser.T__3)
            self.state = 1411
            self.match(PBXProjParser.REFERENCE)
            self.state = 1412
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_settings" ):
                listener.enterBuild_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_settings" ):
                listener.exitBuild_settings(self)




    def build_settings(self):

        localctx = PBXProjParser.Build_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_build_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(PBXProjParser.T__102)
            self.state = 1415
            self.match(PBXProjParser.T__3)
            self.state = 1416
            self.match(PBXProjParser.T__0)
            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (PBXProjParser.NUMBER - 120)) | (1 << (PBXProjParser.QUOTED_STRING - 120)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 120)) | (1 << (PBXProjParser.VARIABLE - 120)))) != 0):
                self.state = 1417
                self.key_value()
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1423
            self.match(PBXProjParser.T__1)
            self.state = 1424
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_path" ):
                listener.enterDst_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_path" ):
                listener.exitDst_path(self)




    def dst_path(self):

        localctx = PBXProjParser.Dst_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_dst_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.match(PBXProjParser.T__103)
            self.state = 1427
            self.match(PBXProjParser.T__3)
            self.state = 1428
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1429
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_subfolder_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_subfolder_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_subfolder_spec" ):
                listener.enterDst_subfolder_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_subfolder_spec" ):
                listener.exitDst_subfolder_spec(self)




    def dst_subfolder_spec(self):

        localctx = PBXProjParser.Dst_subfolder_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_dst_subfolder_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(PBXProjParser.T__104)
            self.state = 1432
            self.match(PBXProjParser.T__3)
            self.state = 1433
            self.match(PBXProjParser.NUMBER)
            self.state = 1434
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project_references_list_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Project_references_list_elementContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Project_references_list_elementContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list" ):
                listener.enterProject_references_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list" ):
                listener.exitProject_references_list(self)




    def project_references_list(self):

        localctx = PBXProjParser.Project_references_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_project_references_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.T__0:
                self.state = 1436
                self.project_references_list_element()
                self.state = 1441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_list_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list_element" ):
                listener.enterProject_references_list_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list_element" ):
                listener.exitProject_references_list_element(self)




    def project_references_list_element(self):

        localctx = PBXProjParser.Project_references_list_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_project_references_list_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self.match(PBXProjParser.T__0)
            self.state = 1443
            self.match(PBXProjParser.T__105)
            self.state = 1444
            self.match(PBXProjParser.T__3)
            self.state = 1445
            self.match(PBXProjParser.REFERENCE)
            self.state = 1446
            self.match(PBXProjParser.T__4)
            self.state = 1447
            self.match(PBXProjParser.T__106)
            self.state = 1448
            self.match(PBXProjParser.T__3)
            self.state = 1449
            self.match(PBXProjParser.REFERENCE)
            self.state = 1450
            self.match(PBXProjParser.T__4)
            self.state = 1451
            self.match(PBXProjParser.T__1)
            self.state = 1452
            self.match(PBXProjParser.T__54)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def ALPHA_NUMERIC(self):
            return self.getToken(PBXProjParser.ALPHA_NUMERIC, 0)

        def key_value(self):
            return self.getTypedRuleContext(PBXProjParser.Key_valueContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_key_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value" ):
                listener.enterKey_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value" ):
                listener.exitKey_value(self)




    def key_value(self):

        localctx = PBXProjParser.Key_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_key_value)
        self._la = 0 # Token type
        try:
            self.state = 1490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1454
                self.any_string()
                self.state = 1455
                self.match(PBXProjParser.T__3)
                self.state = 1456
                self.any_string()
                self.state = 1457
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self.any_string()
                self.state = 1460
                self.match(PBXProjParser.T__3)
                self.state = 1461
                self.match(PBXProjParser.NUMBER)
                self.state = 1462
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1464
                self.any_string()
                self.state = 1465
                self.match(PBXProjParser.T__3)
                self.state = 1466
                self.match(PBXProjParser.ALPHA_NUMERIC)
                self.state = 1467
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1469
                self.any_string()
                self.state = 1470
                self.match(PBXProjParser.T__3)
                self.state = 1471
                self.match(PBXProjParser.T__0)
                self.state = 1472
                self.key_value()
                self.state = 1473
                self.match(PBXProjParser.T__1)
                self.state = 1474
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1476
                self.any_string()
                self.state = 1477
                self.match(PBXProjParser.T__3)
                self.state = 1478
                self.match(PBXProjParser.T__53)
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (PBXProjParser.NUMBER - 120)) | (1 << (PBXProjParser.QUOTED_STRING - 120)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 120)) | (1 << (PBXProjParser.VARIABLE - 120)))) != 0):
                    self.state = 1479
                    self.any_string()
                    self.state = 1480
                    self.match(PBXProjParser.T__54)
                    self.state = 1486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1487
                self.match(PBXProjParser.T__55)
                self.state = 1488
                self.match(PBXProjParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configurationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configurations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configurations" ):
                listener.enterBuild_configurations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configurations" ):
                listener.exitBuild_configurations(self)




    def build_configurations(self):

        localctx = PBXProjParser.Build_configurationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_build_configurations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            self.match(PBXProjParser.T__107)
            self.state = 1493
            self.match(PBXProjParser.T__3)
            self.state = 1494
            self.reference_list()
            self.state = 1495
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_is_visibleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_is_visible

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_is_visible" ):
                listener.enterDefault_configuration_is_visible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_is_visible" ):
                listener.exitDefault_configuration_is_visible(self)




    def default_configuration_is_visible(self):

        localctx = PBXProjParser.Default_configuration_is_visibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_default_configuration_is_visible)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(PBXProjParser.T__108)
            self.state = 1498
            self.match(PBXProjParser.T__3)
            self.state = 1499
            self.match(PBXProjParser.NUMBER)
            self.state = 1500
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_name" ):
                listener.enterDefault_configuration_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_name" ):
                listener.exitDefault_configuration_name(self)




    def default_configuration_name(self):

        localctx = PBXProjParser.Default_configuration_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_default_configuration_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(PBXProjParser.T__109)
            self.state = 1503
            self.match(PBXProjParser.T__3)
            self.state = 1504
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1505
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettings" ):
                listener.enterSettings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettings" ):
                listener.exitSettings(self)




    def settings(self):

        localctx = PBXProjParser.SettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(PBXProjParser.T__110)
            self.state = 1508
            self.match(PBXProjParser.T__3)
            self.state = 1509
            self.match(PBXProjParser.T__0)
            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (PBXProjParser.NUMBER - 120)) | (1 << (PBXProjParser.QUOTED_STRING - 120)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 120)) | (1 << (PBXProjParser.VARIABLE - 120)))) != 0):
                self.state = 1510
                self.key_value()
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1516
            self.match(PBXProjParser.T__1)
            self.state = 1517
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_capabilitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_system_capabilities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_capabilities" ):
                listener.enterSystem_capabilities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_capabilities" ):
                listener.exitSystem_capabilities(self)




    def system_capabilities(self):

        localctx = PBXProjParser.System_capabilitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_system_capabilities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.match(PBXProjParser.T__111)
            self.state = 1520
            self.match(PBXProjParser.T__3)
            self.state = 1521
            self.match(PBXProjParser.T__0)
            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (PBXProjParser.NUMBER - 120)) | (1 << (PBXProjParser.QUOTED_STRING - 120)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 120)) | (1 << (PBXProjParser.VARIABLE - 120)))) != 0):
                self.state = 1522
                self.key_value()
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1528
            self.match(PBXProjParser.T__1)
            self.state = 1529
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_current_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_version" ):
                listener.enterCurrent_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_version" ):
                listener.exitCurrent_version(self)




    def current_version(self):

        localctx = PBXProjParser.Current_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_current_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(PBXProjParser.T__112)
            self.state = 1532
            self.match(PBXProjParser.T__3)
            self.state = 1533
            self.match(PBXProjParser.REFERENCE)
            self.state = 1534
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Version_group_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_version_group_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion_group_type" ):
                listener.enterVersion_group_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion_group_type" ):
                listener.exitVersion_group_type(self)




    def version_group_type(self):

        localctx = PBXProjParser.Version_group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_version_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(PBXProjParser.T__113)
            self.state = 1537
            self.match(PBXProjParser.T__3)
            self.state = 1538
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1539
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_class_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefix" ):
                listener.enterClass_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefix" ):
                listener.exitClass_prefix(self)




    def class_prefix(self):

        localctx = PBXProjParser.Class_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_class_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.match(PBXProjParser.T__114)
            self.state = 1542
            self.match(PBXProjParser.T__3)
            self.state = 1543
            self.any_string()
            self.state = 1544
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def VARIABLE(self):
            return self.getToken(PBXProjParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string" ):
                listener.enterAny_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string" ):
                listener.exitAny_string(self)




    def any_string(self):

        localctx = PBXProjParser.Any_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_any_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            _la = self._input.LA(1)
            if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (PBXProjParser.NUMBER - 120)) | (1 << (PBXProjParser.QUOTED_STRING - 120)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 120)) | (1 << (PBXProjParser.VARIABLE - 120)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





