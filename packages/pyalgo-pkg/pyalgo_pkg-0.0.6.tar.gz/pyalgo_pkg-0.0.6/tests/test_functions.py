from pyalgo import algocryption



#algo = algocryption.pipeline([algocryption.XOR_Cipher(15),
#                              algocryption.Simple_Columnar_Transposition(["hello", "there", 5, "vlad"], 1000)])


#algo = algocryption.RSA(794400996517939834621525682497637073170057923047091362984490542449508723752775336268404049953132679888296030676269788001835650158137713827105323921753246954147936469297862235726665099953089737788271556844372527469042937250848276288905511183471957502514387229506497163837603497788648207243181638600921417495521213466788901864445281886786227722994906338201302576012026688908243802859259652049118138151597189250287138985713220994103133165205286507664433304381293459038493421699454755504947258815066502874164343760633028287323412002849242760585330163172585895783036209016959692242467517375584414860751316087758735996916125279103530684306499295399529609897366797825679472886870039514165607367030581622871263950661673474225185492793317840484278465963986818648003673968453417525414323363610048559648008603774097870689533569505225721625560852460296396722065987796076160501970284502080449143983370745598368234149858668886114571461222946632866241861309085618314425867189889354883859713015228224526962070965272919106869314300123777815063584415997659405646354734937060223415611912008525054068531354334319779275833139586816392875460936010193548565627057597832450502513597124892327648000349067017522467495586475456527348998934802811343186737679646057259037679674644627532046933014183110546086781881721502814747227570517874791486953260442076547954809593546999104456250460577265198203076563296651984904542791537229058554645989198346121957978289941282451625262112676628760531320405426209406207563511858154443849656175705161752478602084823278411233301953622977761601654634540943588451176735624332760992495018020834102474633977932133969246368063335843560433819865434850687811261497480735861132882708754198113670002261647855077826649168829792064618212164010935704404880288440183254592152043886410598191958760351012746009951667474867210675556534371919111471452041463719693340814577559328893089204546741738389446924731868130017365208243818887154143883675484677477468856301187242393261485548915229393291519066970751374102021010138918096235590999167241252254796899016272490250230708658900399032669494146028163347593245316072167948517187520906583822197677646112228412731640131613831291610526789728305605071000468057071165679879154829266773699399670751348370531371863195932467185733788875231066421931284197495008375940967364259761980148004889150330204892750152500543540148553913571728206362766394252168871244106645815879090412624525878072452618977403812793010154157100427574831290383908549939,
#                        1013505233045640446047610878588338318386964808127045764254561795663529036036066251290955942679402177634582165453364001841793102179404000982062286667026243199831255226345701196088878708393828657604469551379643991417853245857784429321163538419634838262533389571291462841172897361848831258561673687337691672315349566051742793326135920119565137822843327688606371711023611336190024942088733933144245805339088332590830587835813756812307051583897368485392073140759944067603616750218436273654411193541443954269041419265413199355941631403065483581190351843447753193536930908101026922795020301690441280855475953903277610545742907976604734931031502397584969035211670316474893874991174557234284561395566006990818801480139539991544702529772130317038622668576580823060027957009009120147995534920891760741043109803222318087624397796710451787689500518969029692827599278858718969206803999779218412737761488983319523063265404021700481899471585442999491627099258634676723885987136265973585230463083597712642785022097956245581551189767709327266781817976315082978967416010940657605635712962978820706683208690348904760693801576666384065828718951063482150959652467179656857371294126558535744153399684446597100357174790736096802157152033704506335954574036817568035071243292324605180565929692972400496497438531115365171997591144873938179191069278796213319196083658644460217607602083753945777943675140245996510887673098890045683540761770715746742530844252496212752919505367118963184587535192428058231809828545798436860274419567981925541510317612668156479029715879728544997326652586277722805996182693025469220519703239275814816299690398219481547450800835674416803693482108358170705739228797636820214146928281895649974181812278264526931620597441763675288250764015290629880521806504488505782106373520437442468771393820157858015365931458423153917371344153854321926709794541856857892914298635780339649248512308126639832386073181168328879208319559651906849905864141526708667892184488494689493816239517418830527520171444270604917148772208448539933856352444550485286344306037417832996891022378814019194205605731088017093943280104490900636928870636765998583990361048823280198999561766618721768225498163087622755571993483341076953879143929373913752940226838875987894001702691900065476444667451457081588146597641050394346554546816496868055175494943882853937984173904321741310526871523299023237272230579466133779909751657885784928804676513301992589482215848016590515227792698772682910516392964576209269609,
#                        940386191472307)


algo = algocryption.RSA(822791, 644911, 65537)

text = "hello there"

signature = algo.create_signature(text)

print(f"signature = {signature.hex()}")

is_signature_valid = algo.validate_signature(signature, text)
is_signature_valid2 = algo.validate_signature(signature, "hello there2")
print(f"is_signature_valid = {is_signature_valid}")
print(f"is_signature_valid = {is_signature_valid2}")
















## Large Prime Generation for RSA
#import random
#
## Pre generated primes
#first_primes_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
#                     31, 37, 41, 43, 47, 53, 59, 61, 67,
#                     71, 73, 79, 83, 89, 97, 101, 103,
#                     107, 109, 113, 127, 131, 137, 139,
#                     149, 151, 157, 163, 167, 173, 179,
#                     181, 191, 193, 197, 199, 211, 223,
#                     227, 229, 233, 239, 241, 251, 257,
#                     263, 269, 271, 277, 281, 283, 293,
#                     307, 311, 313, 317, 331, 337, 347, 349]
#
#
#def nBitRandom(n):
#    return random.randrange(2 ** (n - 1) + 1, 2 ** n - 1)
#
#
#def getLowLevelPrime(n):
#    '''Generate a prime candidate divisible
#    by first primes'''
#    while True:
#        # Obtain a random number
#        pc = nBitRandom(n)
#
#        # Test divisibility by pre-generated
#        # primes
#        for divisor in first_primes_list:
#            if pc % divisor == 0 and divisor ** 2 <= pc:
#                break
#        else:
#            return pc
#
#
#def isMillerRabinPassed(mrc):
#    '''Run 20 iterations of Rabin Miller Primality test'''
#    maxDivisionsByTwo = 0
#    ec = mrc - 1
#    while ec % 2 == 0:
#        ec >>= 1
#        maxDivisionsByTwo += 1
#    assert (2 ** maxDivisionsByTwo * ec == mrc - 1)
#
#    def trialComposite(round_tester):
#        if pow(round_tester, ec, mrc) == 1:
#            return False
#        for i in range(maxDivisionsByTwo):
#            if pow(round_tester, 2 ** i * ec, mrc) == mrc - 1:
#                return False
#        return True
#
#    # Set number of trials here
#    numberOfRabinTrials = 20
#    for i in range(numberOfRabinTrials):
#        round_tester = random.randrange(2, mrc)
#        if trialComposite(round_tester):
#            return False
#    return True
#
#
#if __name__ == '__main__':
#    while True:
#        n = 2048
#        prime_candidate = getLowLevelPrime(n)
#        if not isMillerRabinPassed(prime_candidate):
#            continue
#        else:
#            print(n, "bit prime is: \n", prime_candidate)
#            break