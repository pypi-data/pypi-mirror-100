strategy:
  matrix:
    Linux_py37:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.7'
    Linux_py38:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.8'
    Linux_py39:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.9'
    macOS_py37:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.7'
    macOS_py38:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.8'
    macOS_py39:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.9'
    Windows_py37:
      vmImage: 'windows-2019'
      pythonVersion: '3.7'
    Windows_py38:
      vmImage: 'windows-2019'
      pythonVersion: '3.8'
    Windows_py39:
      vmImage: 'windows-2019'
      pythonVersion: '3.9'

pool:
  vmImage: '$(vmImage)'

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(pythonVersion)'
    architecture: 'x64'

- bash: |
    set -x

    python -mpip install --upgrade pip setuptools &&

    case "$(python -c 'import sys; print(sys.platform)')" in
    linux)
      sudo PY_VERS="$PYTHONVERSION" tools/build-manylinux-wheel.sh &&
      sudo apt update &&
      sudo apt install ghostscript inkscape \
        texlive-latex-{base,recommended,extra} texlive-fonts-recommended cm-super dvipng &&
      pip install 'pycairo<1.20'  # 1.20 requires too-recent cairo for Ubuntu 16.04.
      ;;
    darwin)
      # Don't install inkscape: building it from source is a bit silly.
      export HOMEBREW_NO_INSTALL_CLEANUP=1 &&
      brew install cairo pkg-config &&
      PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig tools/build-macos-wheel.sh &&
      brew install ghostscript
      ;;
    win32)
      # Don't install inkscape (see note in run-mpl-test-suite.py).
      # Skip known-bad version of numpy.
      git clone --depth 1 https://github.com/anntzer/pycairo-windows-wheels &&
      python -mpip install --find-links pycairo-windows-wheels --prefer-binary pycairo &&
      python tools/build-windows-wheel.py &&
      choco install --no-progress ghostscript &&
      pip install 'numpy!=1.19.4'
      ;;
    *)
      exit 1
      ;;
    esac &&

    python -mpip install dist/*.whl &&
    python tools/ensure-mpl-test-data.py &&
    # pytest 6.2 is incompatible with matplotlib<3.4
    # pytest-{instafail,timeout} useful for hanging tests.
    python -mpip install 'pytest<6.2' pytest-instafail pytest-timeout

  displayName: 'Build & install'

- bash: |
    set -x &&
    python -mpip list &&
    # Skip tests triggering to-be-investigated fatal error on Windows :(
    (
      if [[ "$(python -c 'import sys; print(sys.platform)')" != win32 ]]; then
        ./run-mpl-test-suite.py --tolerance=50 \
          --instafail --timeout=300 --capture=no --verbose --junitxml=junit/test-results.xml
      fi
    ) &&
    PYTHONFAULTHANDLER=1 PYTHONIOENCODING=utf-8 ./run-examples.py
  displayName: 'Test'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-results.xml'
    testRunTitle: 'Python $(pythonVersion) / $(vmImage)'
  condition: succeededOrFailed()

- bash: |
    cp dist/*.whl "$BUILD_ARTIFACTSTAGINGDIRECTORY"
  condition: succeededOrFailed()
  displayName: 'Copy files'

- task: PublishBuildArtifacts@1
  inputs:
    artifactName: 'wheels'
  condition: succeededOrFailed()

- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: 'wheels'
  condition: succeededOrFailed()
